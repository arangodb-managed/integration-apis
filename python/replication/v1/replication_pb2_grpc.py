# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2
from data.v1 import data_pb2 as data_dot_v1_dot_data__pb2
from replication.v1 import replication_pb2 as replication_dot_v1_dot_replication__pb2


class ReplicationServiceStub(object):
    """ReplicationService is the API used to replicate a deployment.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.replication.v1.ReplicationService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                )
        self.CloneDeploymentFromBackup = channel.unary_unary(
                '/arangodb.cloud.replication.v1.ReplicationService/CloneDeploymentFromBackup',
                request_serializer=replication_dot_v1_dot_replication__pb2.CloneDeploymentFromBackupRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.Deployment.FromString,
                )
        self.GetDeploymentReplication = channel.unary_unary(
                '/arangodb.cloud.replication.v1.ReplicationService/GetDeploymentReplication',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=replication_dot_v1_dot_replication__pb2.DeploymentReplication.FromString,
                )
        self.UpdateDeploymentReplication = channel.unary_unary(
                '/arangodb.cloud.replication.v1.ReplicationService/UpdateDeploymentReplication',
                request_serializer=replication_dot_v1_dot_replication__pb2.DeploymentReplication.SerializeToString,
                response_deserializer=replication_dot_v1_dot_replication__pb2.DeploymentReplication.FromString,
                )


class ReplicationServiceServicer(object):
    """ReplicationService is the API used to replicate a deployment.
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloneDeploymentFromBackup(self, request, context):
        """Takes a backup and creates a deployment from it. For all intents and purposes this new deployment
        will be the same as the deployment at that exact moment when the backup was taken from it. This means that
        the new deployment will be in the same project and use the same provider as the old deployment did. Optionally
        a different region can be provided using the region id field on the request. Furthermore, the new deployment
        will have the same server settings ( count, mode, replication factor ) as the old deployment did at the time
        of taking the backup. After the new deployment successfully started, the backup will be used to restore the
        data into the new deployment. The new deployment will have a different endpoint, and the password will also
        be reset for it. All other user settings will remain the same.
        The old deployment will not be touched.
        Required permissions:
        if project_id is specified
        - backup.backup.get on the backup specified by backup_id in request
        - replication.deployment.clone-from-backup on the project specified in request
        if project_id is not specified
        - replication.deployment.clone-from-backup on the backup specified by backup_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeploymentReplication(self, request, context):
        """Get an existing DeploymentReplication using its deployment ID
        Required permissions:
        - replication.deploymentreplication.get
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDeploymentReplication(self, request, context):
        """Update an existing DeploymentReplication spec. If does not exist, this will create a new one.
        This call expects the complete entity with the updated fields.
        Required permissions:
        - replication.deploymentreplication.update
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'CloneDeploymentFromBackup': grpc.unary_unary_rpc_method_handler(
                    servicer.CloneDeploymentFromBackup,
                    request_deserializer=replication_dot_v1_dot_replication__pb2.CloneDeploymentFromBackupRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
            ),
            'GetDeploymentReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeploymentReplication,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=replication_dot_v1_dot_replication__pb2.DeploymentReplication.SerializeToString,
            ),
            'UpdateDeploymentReplication': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDeploymentReplication,
                    request_deserializer=replication_dot_v1_dot_replication__pb2.DeploymentReplication.FromString,
                    response_serializer=replication_dot_v1_dot_replication__pb2.DeploymentReplication.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.replication.v1.ReplicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReplicationService(object):
    """ReplicationService is the API used to replicate a deployment.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.replication.v1.ReplicationService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloneDeploymentFromBackup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.replication.v1.ReplicationService/CloneDeploymentFromBackup',
            replication_dot_v1_dot_replication__pb2.CloneDeploymentFromBackupRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.Deployment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeploymentReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.replication.v1.ReplicationService/GetDeploymentReplication',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            replication_dot_v1_dot_replication__pb2.DeploymentReplication.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDeploymentReplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.replication.v1.ReplicationService/UpdateDeploymentReplication',
            replication_dot_v1_dot_replication__pb2.DeploymentReplication.SerializeToString,
            replication_dot_v1_dot_replication__pb2.DeploymentReplication.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
