# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bucket_service.v1 import bucketservice_pb2 as bucket__service_dot_v1_dot_bucketservice__pb2
from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2


class BucketServiceStub(object):
    """BucketService is the API used to manage buckets.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.integration.bucketservice.v1.BucketService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                )
        self.BucketExists = channel.unary_unary(
                '/arangodb.cloud.integration.bucketservice.v1.BucketService/BucketExists',
                request_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.BucketRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.YesOrNo.FromString,
                )
        self.CreateBucket = channel.unary_unary(
                '/arangodb.cloud.integration.bucketservice.v1.BucketService/CreateBucket',
                request_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.BucketRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.DeleteBucket = channel.unary_unary(
                '/arangodb.cloud.integration.bucketservice.v1.BucketService/DeleteBucket',
                request_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.BucketRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.GetRepositoryURL = channel.unary_unary(
                '/arangodb.cloud.integration.bucketservice.v1.BucketService/GetRepositoryURL',
                request_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.SerializeToString,
                response_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.RepositoryURL.FromString,
                )
        self.DeletePath = channel.unary_unary(
                '/arangodb.cloud.integration.bucketservice.v1.BucketService/DeletePath',
                request_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.GetPathSize = channel.unary_unary(
                '/arangodb.cloud.integration.bucketservice.v1.BucketService/GetPathSize',
                request_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.SerializeToString,
                response_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathSize.FromString,
                )
        self.ReadObject = channel.unary_stream(
                '/arangodb.cloud.integration.bucketservice.v1.BucketService/ReadObject',
                request_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.SerializeToString,
                response_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.ReadObjectChunk.FromString,
                )
        self.WriteObject = channel.stream_stream(
                '/arangodb.cloud.integration.bucketservice.v1.BucketService/WriteObject',
                request_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.WriteObjectChunk.SerializeToString,
                response_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.WriteObjectControl.FromString,
                )
        self.GetObjectInfo = channel.unary_unary(
                '/arangodb.cloud.integration.bucketservice.v1.BucketService/GetObjectInfo',
                request_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.SerializeToString,
                response_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.ObjectInfo.FromString,
                )


class BucketServiceServicer(object):
    """BucketService is the API used to manage buckets.
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BucketExists(self, request, context):
        """BucketExists checks if the specified bucket exists
        Required permissions:
        - bucketservice.bucket.exists globally
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBucket(self, request, context):
        """CreateBucket creates a bucket 
        Required permissions:
        - bucketservice.bucket.create globally
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBucket(self, request, context):
        """DeleteBucket deletes a bucket 
        Notice that this deletes all data contained in the bucket as well
        Required permissions:
        - bucketservice.bucket.delete globally
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRepositoryURL(self, request, context):
        """GetRepositoryURL get the URL needed to store/delete objects in a bucket
        Required permissions:
        - bucketservice.bucketpath.get-repository-url globally
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeletePath(self, request, context):
        """DeletePath deletes the specified path (recursively) from the provided bucket
        Required permissions:
        - bucketservice.bucketpath.delete globally
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPathSize(self, request, context):
        """GetPathSize provides the size in bytes for the specified path from the provided bucket
        Required permissions:
        - bucketservice.bucketpath.get-size globally
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadObject(self, request, context):
        """ReadObject opens an object in the bucket and streams the existing data from the object into the client
        Required permissions:
        - bucketservice.bucketobject.read globally
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteObject(self, request_iterator, context):
        """CreateObject creates or opens an object in the bucket and allows the client to stream (additional) data into the object
        Required permissions:
        - bucketservice.bucketobject.write globally
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetObjectInfo(self, request, context):
        """GetObjectInfo provides information for the specified object from the provided bucket
        A Not-Found error is returned if the object cannot be found  
        Required permissions:
        - bucketservice.bucketobject.get-info globally
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BucketServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'BucketExists': grpc.unary_unary_rpc_method_handler(
                    servicer.BucketExists,
                    request_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.BucketRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.YesOrNo.SerializeToString,
            ),
            'CreateBucket': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBucket,
                    request_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.BucketRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'DeleteBucket': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBucket,
                    request_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.BucketRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'GetRepositoryURL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRepositoryURL,
                    request_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.FromString,
                    response_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.RepositoryURL.SerializeToString,
            ),
            'DeletePath': grpc.unary_unary_rpc_method_handler(
                    servicer.DeletePath,
                    request_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'GetPathSize': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPathSize,
                    request_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.FromString,
                    response_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathSize.SerializeToString,
            ),
            'ReadObject': grpc.unary_stream_rpc_method_handler(
                    servicer.ReadObject,
                    request_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.FromString,
                    response_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.ReadObjectChunk.SerializeToString,
            ),
            'WriteObject': grpc.stream_stream_rpc_method_handler(
                    servicer.WriteObject,
                    request_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.WriteObjectChunk.FromString,
                    response_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.WriteObjectControl.SerializeToString,
            ),
            'GetObjectInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObjectInfo,
                    request_deserializer=bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.FromString,
                    response_serializer=bucket__service_dot_v1_dot_bucketservice__pb2.ObjectInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.integration.bucketservice.v1.BucketService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BucketService(object):
    """BucketService is the API used to manage buckets.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.integration.bucketservice.v1.BucketService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BucketExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.integration.bucketservice.v1.BucketService/BucketExists',
            bucket__service_dot_v1_dot_bucketservice__pb2.BucketRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.YesOrNo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.integration.bucketservice.v1.BucketService/CreateBucket',
            bucket__service_dot_v1_dot_bucketservice__pb2.BucketRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteBucket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.integration.bucketservice.v1.BucketService/DeleteBucket',
            bucket__service_dot_v1_dot_bucketservice__pb2.BucketRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRepositoryURL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.integration.bucketservice.v1.BucketService/GetRepositoryURL',
            bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.SerializeToString,
            bucket__service_dot_v1_dot_bucketservice__pb2.RepositoryURL.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeletePath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.integration.bucketservice.v1.BucketService/DeletePath',
            bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPathSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.integration.bucketservice.v1.BucketService/GetPathSize',
            bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.SerializeToString,
            bucket__service_dot_v1_dot_bucketservice__pb2.PathSize.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/arangodb.cloud.integration.bucketservice.v1.BucketService/ReadObject',
            bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.SerializeToString,
            bucket__service_dot_v1_dot_bucketservice__pb2.ReadObjectChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteObject(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/arangodb.cloud.integration.bucketservice.v1.BucketService/WriteObject',
            bucket__service_dot_v1_dot_bucketservice__pb2.WriteObjectChunk.SerializeToString,
            bucket__service_dot_v1_dot_bucketservice__pb2.WriteObjectControl.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetObjectInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.integration.bucketservice.v1.BucketService/GetObjectInfo',
            bucket__service_dot_v1_dot_bucketservice__pb2.PathRequest.SerializeToString,
            bucket__service_dot_v1_dot_bucketservice__pb2.ObjectInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
