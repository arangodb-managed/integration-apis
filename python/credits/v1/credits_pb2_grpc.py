# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2
from credits.v1 import credits_pb2 as credits_dot_v1_dot_credits__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in credits/v1/credits_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CreditsServiceStub(object):
    """CreditsService is the API used for managing credits.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.credits.v1.CreditsService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                _registered_method=True)
        self.ListCreditBundles = channel.unary_unary(
                '/arangodb.cloud.credits.v1.CreditsService/ListCreditBundles',
                request_serializer=credits_dot_v1_dot_credits__pb2.ListCreditBundlesRequest.SerializeToString,
                response_deserializer=credits_dot_v1_dot_credits__pb2.CreditBundlesList.FromString,
                _registered_method=True)
        self.ListCreditBundlesUsage = channel.unary_unary(
                '/arangodb.cloud.credits.v1.CreditsService/ListCreditBundlesUsage',
                request_serializer=credits_dot_v1_dot_credits__pb2.ListCreditBundleUsageRequest.SerializeToString,
                response_deserializer=credits_dot_v1_dot_credits__pb2.CreditBundleUsageList.FromString,
                _registered_method=True)
        self.ListCreditUsageReports = channel.unary_unary(
                '/arangodb.cloud.credits.v1.CreditsService/ListCreditUsageReports',
                request_serializer=credits_dot_v1_dot_credits__pb2.ListCreditUsageReportsRequest.SerializeToString,
                response_deserializer=credits_dot_v1_dot_credits__pb2.CreditUsageReportList.FromString,
                _registered_method=True)
        self.GetCreditUsageReport = channel.unary_unary(
                '/arangodb.cloud.credits.v1.CreditsService/GetCreditUsageReport',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=credits_dot_v1_dot_credits__pb2.CreditUsageReport.FromString,
                _registered_method=True)
        self.GetCreditUsageReportPDF = channel.unary_stream(
                '/arangodb.cloud.credits.v1.CreditsService/GetCreditUsageReportPDF',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=credits_dot_v1_dot_credits__pb2.PDFDocument.FromString,
                _registered_method=True)
        self.GetCreditBundleUsageProjection = channel.unary_unary(
                '/arangodb.cloud.credits.v1.CreditsService/GetCreditBundleUsageProjection',
                request_serializer=credits_dot_v1_dot_credits__pb2.GetCreditBundleUsageProjectionRequest.SerializeToString,
                response_deserializer=credits_dot_v1_dot_credits__pb2.CreditBundleUsageProjection.FromString,
                _registered_method=True)
        self.GetOrganizationCreditDebt = channel.unary_unary(
                '/arangodb.cloud.credits.v1.CreditsService/GetOrganizationCreditDebt',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=credits_dot_v1_dot_credits__pb2.CreditDebt.FromString,
                _registered_method=True)


class CreditsServiceServicer(object):
    """CreditsService is the API used for managing credits.
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None (authenticated only)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCreditBundles(self, request, context):
        """List credit bundles for an organization based on the provided request.
        Required permissions:
        - credit.creditbundle.list on the organization identified by the given organization ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCreditBundlesUsage(self, request, context):
        """List credit bundle usages for an organization based on the provided request.
        Required permissions:
        - credit.creditbundleusage.list on the organization identified by the given organization ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCreditUsageReports(self, request, context):
        """List the credit reports for the organization identified by the given
        organization ID that match the given criteria.
        Required permissions:
        - credit.creditusagereport.list on the organization identified by the given organization ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCreditUsageReport(self, request, context):
        """Get a credit usage report identified by the given ID.
        Required permissions:
        - credit.creditusagereport.get on the organization that owns the report.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCreditUsageReportPDF(self, request, context):
        """Get a credit usage report identified by the given ID, as a PDF document.
        The server sends the PDF over a stream once rendered.
        The stream is closed after the PDF is sent.
        Required permissions:
        - credit.creditusagereport.get on the organization that owns the report.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCreditBundleUsageProjection(self, request, context):
        """Get credit usage projection for an organization identified by the given organization ID.
        This will return a projected credit usage for each month in the future, until the credits run out.
        Required permissions:
        - credit.creditbundleusageprojection.get on the organization identified by the given organization ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrganizationCreditDebt(self, request, context):
        """Get the total amount of credit debt accrued by an organization identified by the ID.
        An organization starts accumulating debt from the moment it runs out of credits.
        The debt is paid off upon purchasing additional credit bundles.
        Note: debt usage is allowed only for a limited period of time, after which the organization's deployments are paused.
        Required permissions:
        - credit.creditdebt.get on the organization identified by the given organization ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CreditsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'ListCreditBundles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCreditBundles,
                    request_deserializer=credits_dot_v1_dot_credits__pb2.ListCreditBundlesRequest.FromString,
                    response_serializer=credits_dot_v1_dot_credits__pb2.CreditBundlesList.SerializeToString,
            ),
            'ListCreditBundlesUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCreditBundlesUsage,
                    request_deserializer=credits_dot_v1_dot_credits__pb2.ListCreditBundleUsageRequest.FromString,
                    response_serializer=credits_dot_v1_dot_credits__pb2.CreditBundleUsageList.SerializeToString,
            ),
            'ListCreditUsageReports': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCreditUsageReports,
                    request_deserializer=credits_dot_v1_dot_credits__pb2.ListCreditUsageReportsRequest.FromString,
                    response_serializer=credits_dot_v1_dot_credits__pb2.CreditUsageReportList.SerializeToString,
            ),
            'GetCreditUsageReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCreditUsageReport,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=credits_dot_v1_dot_credits__pb2.CreditUsageReport.SerializeToString,
            ),
            'GetCreditUsageReportPDF': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCreditUsageReportPDF,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=credits_dot_v1_dot_credits__pb2.PDFDocument.SerializeToString,
            ),
            'GetCreditBundleUsageProjection': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCreditBundleUsageProjection,
                    request_deserializer=credits_dot_v1_dot_credits__pb2.GetCreditBundleUsageProjectionRequest.FromString,
                    response_serializer=credits_dot_v1_dot_credits__pb2.CreditBundleUsageProjection.SerializeToString,
            ),
            'GetOrganizationCreditDebt': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrganizationCreditDebt,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=credits_dot_v1_dot_credits__pb2.CreditDebt.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.credits.v1.CreditsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('arangodb.cloud.credits.v1.CreditsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CreditsService(object):
    """CreditsService is the API used for managing credits.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.credits.v1.CreditsService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCreditBundles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.credits.v1.CreditsService/ListCreditBundles',
            credits_dot_v1_dot_credits__pb2.ListCreditBundlesRequest.SerializeToString,
            credits_dot_v1_dot_credits__pb2.CreditBundlesList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCreditBundlesUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.credits.v1.CreditsService/ListCreditBundlesUsage',
            credits_dot_v1_dot_credits__pb2.ListCreditBundleUsageRequest.SerializeToString,
            credits_dot_v1_dot_credits__pb2.CreditBundleUsageList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCreditUsageReports(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.credits.v1.CreditsService/ListCreditUsageReports',
            credits_dot_v1_dot_credits__pb2.ListCreditUsageReportsRequest.SerializeToString,
            credits_dot_v1_dot_credits__pb2.CreditUsageReportList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCreditUsageReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.credits.v1.CreditsService/GetCreditUsageReport',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            credits_dot_v1_dot_credits__pb2.CreditUsageReport.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCreditUsageReportPDF(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/arangodb.cloud.credits.v1.CreditsService/GetCreditUsageReportPDF',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            credits_dot_v1_dot_credits__pb2.PDFDocument.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCreditBundleUsageProjection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.credits.v1.CreditsService/GetCreditBundleUsageProjection',
            credits_dot_v1_dot_credits__pb2.GetCreditBundleUsageProjectionRequest.SerializeToString,
            credits_dot_v1_dot_credits__pb2.CreditBundleUsageProjection.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrganizationCreditDebt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.credits.v1.CreditsService/GetOrganizationCreditDebt',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            credits_dot_v1_dot_credits__pb2.CreditDebt.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
