# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2
from monitoring.v1 import monitoring_pb2 as monitoring_dot_v1_dot_monitoring__pb2


class MonitoringServiceStub(object):
    """MonitoringService is the API used to monitor deployments.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.monitoring.v1.MonitoringService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                )
        self.GetDeploymentLogs = channel.unary_stream(
                '/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentLogs',
                request_serializer=monitoring_dot_v1_dot_monitoring__pb2.GetDeploymentLogsRequest.SerializeToString,
                response_deserializer=monitoring_dot_v1_dot_monitoring__pb2.DeploymentLogsChunk.FromString,
                )


class MonitoringServiceServicer(object):
    """MonitoringService is the API used to monitor deployments.
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeploymentLogs(self, request, context):
        """Fetch all logs of the deployment that matches the given request.
        Required permissions:
        - monitoring.logs.get on the deployment identified by the given deployment ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitoringServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'GetDeploymentLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDeploymentLogs,
                    request_deserializer=monitoring_dot_v1_dot_monitoring__pb2.GetDeploymentLogsRequest.FromString,
                    response_serializer=monitoring_dot_v1_dot_monitoring__pb2.DeploymentLogsChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.monitoring.v1.MonitoringService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MonitoringService(object):
    """MonitoringService is the API used to monitor deployments.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.monitoring.v1.MonitoringService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeploymentLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/arangodb.cloud.monitoring.v1.MonitoringService/GetDeploymentLogs',
            monitoring_dot_v1_dot_monitoring__pb2.GetDeploymentLogsRequest.SerializeToString,
            monitoring_dot_v1_dot_monitoring__pb2.DeploymentLogsChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
