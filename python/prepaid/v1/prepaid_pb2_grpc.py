# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2
from data.v1 import data_pb2 as data_dot_v1_dot_data__pb2
from prepaid.v1 import prepaid_pb2 as prepaid_dot_v1_dot_prepaid__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in prepaid/v1/prepaid_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PrepaidServiceStub(object):
    """PrepaidService is the API used to configure prepaid objects.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.prepaid.v1.PrepaidService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                _registered_method=True)
        self.ListPrepaidDeployments = channel.unary_unary(
                '/arangodb.cloud.prepaid.v1.PrepaidService/ListPrepaidDeployments',
                request_serializer=prepaid_dot_v1_dot_prepaid__pb2.ListPrepaidDeploymentsRequest.SerializeToString,
                response_deserializer=prepaid_dot_v1_dot_prepaid__pb2.PrepaidDeploymentList.FromString,
                _registered_method=True)
        self.GetPrepaidDeployment = channel.unary_unary(
                '/arangodb.cloud.prepaid.v1.PrepaidService/GetPrepaidDeployment',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=prepaid_dot_v1_dot_prepaid__pb2.PrepaidDeployment.FromString,
                _registered_method=True)
        self.CreateDeployment = channel.unary_unary(
                '/arangodb.cloud.prepaid.v1.PrepaidService/CreateDeployment',
                request_serializer=prepaid_dot_v1_dot_prepaid__pb2.CreateDeploymentRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.Deployment.FromString,
                _registered_method=True)
        self.UpdateDeployment = channel.unary_unary(
                '/arangodb.cloud.prepaid.v1.PrepaidService/UpdateDeployment',
                request_serializer=prepaid_dot_v1_dot_prepaid__pb2.UpdateDeploymentRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.Deployment.FromString,
                _registered_method=True)
        self.CloneDeploymentFromBackup = channel.unary_unary(
                '/arangodb.cloud.prepaid.v1.PrepaidService/CloneDeploymentFromBackup',
                request_serializer=prepaid_dot_v1_dot_prepaid__pb2.CloneFromBackupRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.Deployment.FromString,
                _registered_method=True)


class PrepaidServiceServicer(object):
    """PrepaidService is the API used to configure prepaid objects.
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPrepaidDeployments(self, request, context):
        """Fetch all prepaid deployments for organization.
        Required permissions:
        - prepaid.prepaiddeployment.list on the organization identified by given organization ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrepaidDeployment(self, request, context):
        """Fetch a deployment by its id.
        Required permissions:
        - prepaid.prepaiddeployment.get on the deployment identified by the given ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDeployment(self, request, context):
        """Creates a new deployment from a prepaid deployment and attached the newly created deployment to the prepaid deployment.
        Required permissions:
        - data.deployment.create on the project in which the deployment is going to be created
        - prepaid.prepaiddeployment.get on the deployment identified by the given prepaid_deployment_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDeployment(self, request, context):
        """Update the deployment by prepaid deployment's id
        Required permissions:
        - data.deployment.update on the deployment attached to the prepaid deployment
        - prepaid.prepaiddeployment.get on the deployment identified by the given prepaid_deployment_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloneDeploymentFromBackup(self, request, context):
        """Creates a cloned deployment from a backup and attaches it to the prepaid deployment. This takes the deployment specification from the prepaid deployment, which must match the specification mentioned in the backup.
        Required permissions:
        - prepaid.prepaiddeployment.get on the prepaid deployment identified by the given prepaid_deployment_id
        - replication.deployment.clone-from-backup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrepaidServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'ListPrepaidDeployments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPrepaidDeployments,
                    request_deserializer=prepaid_dot_v1_dot_prepaid__pb2.ListPrepaidDeploymentsRequest.FromString,
                    response_serializer=prepaid_dot_v1_dot_prepaid__pb2.PrepaidDeploymentList.SerializeToString,
            ),
            'GetPrepaidDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrepaidDeployment,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=prepaid_dot_v1_dot_prepaid__pb2.PrepaidDeployment.SerializeToString,
            ),
            'CreateDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDeployment,
                    request_deserializer=prepaid_dot_v1_dot_prepaid__pb2.CreateDeploymentRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
            ),
            'UpdateDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDeployment,
                    request_deserializer=prepaid_dot_v1_dot_prepaid__pb2.UpdateDeploymentRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
            ),
            'CloneDeploymentFromBackup': grpc.unary_unary_rpc_method_handler(
                    servicer.CloneDeploymentFromBackup,
                    request_deserializer=prepaid_dot_v1_dot_prepaid__pb2.CloneFromBackupRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.prepaid.v1.PrepaidService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('arangodb.cloud.prepaid.v1.PrepaidService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PrepaidService(object):
    """PrepaidService is the API used to configure prepaid objects.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.prepaid.v1.PrepaidService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPrepaidDeployments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.prepaid.v1.PrepaidService/ListPrepaidDeployments',
            prepaid_dot_v1_dot_prepaid__pb2.ListPrepaidDeploymentsRequest.SerializeToString,
            prepaid_dot_v1_dot_prepaid__pb2.PrepaidDeploymentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPrepaidDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.prepaid.v1.PrepaidService/GetPrepaidDeployment',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            prepaid_dot_v1_dot_prepaid__pb2.PrepaidDeployment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.prepaid.v1.PrepaidService/CreateDeployment',
            prepaid_dot_v1_dot_prepaid__pb2.CreateDeploymentRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.Deployment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.prepaid.v1.PrepaidService/UpdateDeployment',
            prepaid_dot_v1_dot_prepaid__pb2.UpdateDeploymentRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.Deployment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloneDeploymentFromBackup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.prepaid.v1.PrepaidService/CloneDeploymentFromBackup',
            prepaid_dot_v1_dot_prepaid__pb2.CloneFromBackupRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.Deployment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
