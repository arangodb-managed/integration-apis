# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2
from metrics.v1 import metrics_pb2 as metrics_dot_v1_dot_metrics__pb2


class MetricsServiceStub(object):
    """MetricsService is the API used to configure various metrics objects.
    Prerelease: This Service is not yet available in production
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.metrics.v1.MetricsService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                )
        self.ListTokens = channel.unary_unary(
                '/arangodb.cloud.metrics.v1.MetricsService/ListTokens',
                request_serializer=metrics_dot_v1_dot_metrics__pb2.ListTokensRequest.SerializeToString,
                response_deserializer=metrics_dot_v1_dot_metrics__pb2.TokenList.FromString,
                )
        self.GetToken = channel.unary_unary(
                '/arangodb.cloud.metrics.v1.MetricsService/GetToken',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=metrics_dot_v1_dot_metrics__pb2.Token.FromString,
                )
        self.CreateToken = channel.unary_unary(
                '/arangodb.cloud.metrics.v1.MetricsService/CreateToken',
                request_serializer=metrics_dot_v1_dot_metrics__pb2.Token.SerializeToString,
                response_deserializer=metrics_dot_v1_dot_metrics__pb2.Token.FromString,
                )
        self.UpdateToken = channel.unary_unary(
                '/arangodb.cloud.metrics.v1.MetricsService/UpdateToken',
                request_serializer=metrics_dot_v1_dot_metrics__pb2.Token.SerializeToString,
                response_deserializer=metrics_dot_v1_dot_metrics__pb2.Token.FromString,
                )
        self.RevokeToken = channel.unary_unary(
                '/arangodb.cloud.metrics.v1.MetricsService/RevokeToken',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.DeleteToken = channel.unary_unary(
                '/arangodb.cloud.metrics.v1.MetricsService/DeleteToken',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.GetMetricsEndpoint = channel.unary_unary(
                '/arangodb.cloud.metrics.v1.MetricsService/GetMetricsEndpoint',
                request_serializer=metrics_dot_v1_dot_metrics__pb2.GetMetricsEndpointRequest.SerializeToString,
                response_deserializer=metrics_dot_v1_dot_metrics__pb2.MetricsEndpoint.FromString,
                )


class MetricsServiceServicer(object):
    """MetricsService is the API used to configure various metrics objects.
    Prerelease: This Service is not yet available in production
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTokens(self, request, context):
        """Fetch all metrics token in the deployment identified by the given deployment ID.
        Required permissions:
        - metrics.token.list on the deployment identified by the given deployment ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetToken(self, request, context):
        """Fetch a metrics token by its id.
        Required permissions:
        - metrics.token.get on the token identified by the given ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateToken(self, request, context):
        """Create a new metrics token.
        Required permissions:
        - metrics.token.create on the deployment that owns the token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateToken(self, request, context):
        """Update a metrics token.
        Note that you can only change the metadata (name & description) of the 
        token.
        Required permissions:
        - metrics.token.update on the token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeToken(self, request, context):
        """Revoke a metrics token.
        Once a token is revoked, it can no longer be used for authentication.
        Required permissions:
        - metrics.token.revoke on the token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteToken(self, request, context):
        """Delete a metrics token.
        Note that token are initially only marked for deleted.
        Once all the resources that depend on it are removed the token itself is deleted
        and cannot be restored.
        Required permissions:
        - metrics.token.delete on the token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetricsEndpoint(self, request, context):
        """Fetch the endpoint to use for getting metrics for a deployment with given id.
        Required permissions:
        - metrics.endpoint.get on the deployment identified by the given ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetricsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'ListTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTokens,
                    request_deserializer=metrics_dot_v1_dot_metrics__pb2.ListTokensRequest.FromString,
                    response_serializer=metrics_dot_v1_dot_metrics__pb2.TokenList.SerializeToString,
            ),
            'GetToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GetToken,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=metrics_dot_v1_dot_metrics__pb2.Token.SerializeToString,
            ),
            'CreateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateToken,
                    request_deserializer=metrics_dot_v1_dot_metrics__pb2.Token.FromString,
                    response_serializer=metrics_dot_v1_dot_metrics__pb2.Token.SerializeToString,
            ),
            'UpdateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateToken,
                    request_deserializer=metrics_dot_v1_dot_metrics__pb2.Token.FromString,
                    response_serializer=metrics_dot_v1_dot_metrics__pb2.Token.SerializeToString,
            ),
            'RevokeToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeToken,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'DeleteToken': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteToken,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'GetMetricsEndpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetricsEndpoint,
                    request_deserializer=metrics_dot_v1_dot_metrics__pb2.GetMetricsEndpointRequest.FromString,
                    response_serializer=metrics_dot_v1_dot_metrics__pb2.MetricsEndpoint.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.metrics.v1.MetricsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MetricsService(object):
    """MetricsService is the API used to configure various metrics objects.
    Prerelease: This Service is not yet available in production
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.metrics.v1.MetricsService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.metrics.v1.MetricsService/ListTokens',
            metrics_dot_v1_dot_metrics__pb2.ListTokensRequest.SerializeToString,
            metrics_dot_v1_dot_metrics__pb2.TokenList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.metrics.v1.MetricsService/GetToken',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            metrics_dot_v1_dot_metrics__pb2.Token.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.metrics.v1.MetricsService/CreateToken',
            metrics_dot_v1_dot_metrics__pb2.Token.SerializeToString,
            metrics_dot_v1_dot_metrics__pb2.Token.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.metrics.v1.MetricsService/UpdateToken',
            metrics_dot_v1_dot_metrics__pb2.Token.SerializeToString,
            metrics_dot_v1_dot_metrics__pb2.Token.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevokeToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.metrics.v1.MetricsService/RevokeToken',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.metrics.v1.MetricsService/DeleteToken',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetricsEndpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.metrics.v1.MetricsService/GetMetricsEndpoint',
            metrics_dot_v1_dot_metrics__pb2.GetMetricsEndpointRequest.SerializeToString,
            metrics_dot_v1_dot_metrics__pb2.MetricsEndpoint.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
