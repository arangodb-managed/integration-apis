# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2
from iam.v1 import iam_pb2 as iam_dot_v1_dot_iam__pb2


class IAMServiceStub(object):
    """IAMService is the API used to configure IAM objects.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                )
        self.GetThisUser = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/GetThisUser',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.User.FromString,
                )
        self.GetUser = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/GetUser',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.User.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/UpdateUser',
                request_serializer=iam_dot_v1_dot_iam__pb2.User.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.User.FromString,
                )
        self.VerifyUserMobilePhone = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/VerifyUserMobilePhone',
                request_serializer=iam_dot_v1_dot_iam__pb2.VerifyUserMobilePhoneRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.ResendUserMobilePhoneVerification = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/ResendUserMobilePhoneVerification',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.ListGroups = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/ListGroups',
                request_serializer=common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.GroupList.FromString,
                )
        self.GetGroup = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/GetGroup',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.Group.FromString,
                )
        self.CreateGroup = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/CreateGroup',
                request_serializer=iam_dot_v1_dot_iam__pb2.Group.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.Group.FromString,
                )
        self.UpdateGroup = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/UpdateGroup',
                request_serializer=iam_dot_v1_dot_iam__pb2.Group.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.Group.FromString,
                )
        self.DeleteGroup = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/DeleteGroup',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.ListGroupMembers = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/ListGroupMembers',
                request_serializer=common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.GroupMemberList.FromString,
                )
        self.AddGroupMembers = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/AddGroupMembers',
                request_serializer=iam_dot_v1_dot_iam__pb2.GroupMembersRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.DeleteGroupMembers = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/DeleteGroupMembers',
                request_serializer=iam_dot_v1_dot_iam__pb2.GroupMembersRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.IsMemberOfGroup = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/IsMemberOfGroup',
                request_serializer=iam_dot_v1_dot_iam__pb2.IsMemberOfGroupRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.YesOrNo.FromString,
                )
        self.ListRoles = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/ListRoles',
                request_serializer=common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.RoleList.FromString,
                )
        self.GetRole = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/GetRole',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.Role.FromString,
                )
        self.CreateRole = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/CreateRole',
                request_serializer=iam_dot_v1_dot_iam__pb2.Role.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.Role.FromString,
                )
        self.UpdateRole = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/UpdateRole',
                request_serializer=iam_dot_v1_dot_iam__pb2.Role.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.Role.FromString,
                )
        self.DeleteRole = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/DeleteRole',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.GetPolicy = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/GetPolicy',
                request_serializer=common_dot_v1_dot_common__pb2.URLOptions.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.Policy.FromString,
                )
        self.GetPolicyByFilter = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/GetPolicyByFilter',
                request_serializer=iam_dot_v1_dot_iam__pb2.GetPolicyByFilterRequest.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.Policy.FromString,
                )
        self.AddRoleBindings = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/AddRoleBindings',
                request_serializer=iam_dot_v1_dot_iam__pb2.RoleBindingsRequest.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.Policy.FromString,
                )
        self.DeleteRoleBindings = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/DeleteRoleBindings',
                request_serializer=iam_dot_v1_dot_iam__pb2.RoleBindingsRequest.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.Policy.FromString,
                )
        self.GetEffectivePermissions = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/GetEffectivePermissions',
                request_serializer=common_dot_v1_dot_common__pb2.URLOptions.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.PermissionList.FromString,
                )
        self.GetMultipleEffectivePermissions = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/GetMultipleEffectivePermissions',
                request_serializer=iam_dot_v1_dot_iam__pb2.GetMultipleEffectivePermissionsRequest.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.MultiplePermissionLists.FromString,
                )
        self.HasPermissions = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/HasPermissions',
                request_serializer=iam_dot_v1_dot_iam__pb2.HasPermissionsRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.YesOrNo.FromString,
                )
        self.ListPermissions = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/ListPermissions',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.PermissionList.FromString,
                )
        self.ListAPIKeys = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/ListAPIKeys',
                request_serializer=common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.APIKeyList.FromString,
                )
        self.GetAPIKey = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/GetAPIKey',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.APIKey.FromString,
                )
        self.CreateAPIKey = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/CreateAPIKey',
                request_serializer=iam_dot_v1_dot_iam__pb2.CreateAPIKeyRequest.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.APIKeySecret.FromString,
                )
        self.RevokeAPIKey = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/RevokeAPIKey',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.DeleteAPIKey = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/DeleteAPIKey',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.AuthenticateAPIKey = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/AuthenticateAPIKey',
                request_serializer=iam_dot_v1_dot_iam__pb2.AuthenticateAPIKeyRequest.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.AuthenticateAPIKeyResponse.FromString,
                )
        self.RenewAPIKeyToken = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/RenewAPIKeyToken',
                request_serializer=iam_dot_v1_dot_iam__pb2.RenewAPIKeyTokenRequest.SerializeToString,
                response_deserializer=iam_dot_v1_dot_iam__pb2.RenewAPIKeyTokenResponse.FromString,
                )
        self.RevokeAPIKeyToken = channel.unary_unary(
                '/arangodb.cloud.iam.v1.IAMService/RevokeAPIKeyToken',
                request_serializer=iam_dot_v1_dot_iam__pb2.RevokeAPIKeyTokenRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )


class IAMServiceServicer(object):
    """IAMService is the API used to configure IAM objects.
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetThisUser(self, request, context):
        """Fetch all available information of the currently authenticated user.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Fetch all available information of the user identified by the given ID.
        Required permissions:
        - resourcemanager.organization.get on one of the organizations that the requested user and authenticated user are both a member of
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Update a user
        Required permissions:
        - None if the given user is the authenticated user.
        or
        - resourcemanager.organization.get on one of the organizations that the requested user and authenticated user are both a member of and
        - iam.user.update on organization on one of the organizations that the requested user and authenticated user are both a member of
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyUserMobilePhone(self, request, context):
        """Verify the mobile phone number of a user, by provided the unique
        code that was send to the number.
        If the code is valid an empty result is returned, otherwise an InvalidArgument error is returned.
        The authenticated user is always the subject of this request.
        Required permissions:
        - None (since the subject is always the authenticated user).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResendUserMobilePhoneVerification(self, request, context):
        """Resend a verification code to the mobile phone number listed for the
        authenticated user.
        Required permissions:
        - None (since the subject is always the authenticated user).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroups(self, request, context):
        """Fetch all groups of the organization identified by the given context ID.
        Required permissions:
        - iam.group.list on organization identified by given context ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Fetch a group by its id.
        Required permissions:
        - iam.group.get on organization that owns the group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """Create a group
        Required permissions:
        - iam.group.create on organization that owns the group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGroup(self, request, context):
        """Update a group
        Required permissions:
        - iam.group.update on organization that owns the group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """Delete a group
        Required permissions:
        - iam.group.delete on organization that owns the group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroupMembers(self, request, context):
        """List of members of the group identified by the given context ID.
        Required permissions:
        - iam.group.get on organization that owns the group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGroupMembers(self, request, context):
        """Add one or more members to the group identified by given ID.
        Required permissions:
        - iam.group.update on organization that owns the group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroupMembers(self, request, context):
        """Remove one or more members from the group identified by given ID.
        Required permissions:
        - iam.group.update on organization that owns the group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsMemberOfGroup(self, request, context):
        """Is the user identified by the given user ID a member of the group identified by the given group ID.
        Required permissions:
        - iam.group.get on organization that owns the group, unless the requested user is identical to the authenticated user.
        Note that if the identified group does not exist, no is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoles(self, request, context):
        """Fetch all roles in the organization identified by the given context ID.
        Required permissions:
        - iam.role.list on organization identified by given context ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRole(self, request, context):
        """Fetch a role by its id.
        Required permissions:
        - iam.role.get on organization that owns the role
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRole(self, request, context):
        """Create a custom role
        Required permissions:
        - iam.role.create on organization that owns the role
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRole(self, request, context):
        """Update a custom role
        Required permissions:
        - iam.role.update on organization that owns the role
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRole(self, request, context):
        """Delete a custom role
        Required permissions:
        - iam.role.delete on organization that owns the role
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPolicy(self, request, context):
        """Get the policy for a resource identified by given URL.
        Required permissions:
        - iam.policy.get on resource identified by the url
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPolicyByFilter(self, request, context):
        """Get the policies based on given filters.
        Required permissions:
        - iam.policy.get on resource identified by the url
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRoleBindings(self, request, context):
        """Add one or more RoleBindings to the policy of a resource identified by given URL.
        Required permissions:
        - iam.policy.update on resource identified by the url
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRoleBindings(self, request, context):
        """Remove one or more RoleBindings from the policy of a resource identified by given URL.
        Required permissions:
        - iam.policy.update on resource identified by the url
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEffectivePermissions(self, request, context):
        """Return the list of permissions that are available to the currently authenticated
        used for actions on the resource identified by the given URL.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMultipleEffectivePermissions(self, request, context):
        """Return the lists of permissions that are available to the currently authenticated
        used for actions on the resources identified by the given URLs.
        This method can replace multiple GetEffectivePermissions calls into a single roundtrip.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasPermissions(self, request, context):
        """Does the authenticated user have all of the requested permissions for the resource
        identified by the given URL?
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPermissions(self, request, context):
        """List all known permissions.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAPIKeys(self, request, context):
        """Fetch all API keys owned by the authenticated caller.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAPIKey(self, request, context):
        """Fetch an API key by its id.
        The API key must be owned by the authenticated caller.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAPIKey(self, request, context):
        """Create a new API key.
        The API key will be owned by the authenticated caller.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeAPIKey(self, request, context):
        """Ensure that the expiration date of the API key identified by given ID
        is either in the past or set to now.
        The API key must be owned by the authenticated caller.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAPIKey(self, request, context):
        """Delete the API key identified by given ID
        The API key must be owned by the authenticated caller.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthenticateAPIKey(self, request, context):
        """Authenticate using an API key.
        If authentication succeeds, this function returns a bearer token.
        That token must be used to authenticate all other API requests.
        If the given API key identifier is invalid or expired, or an incorrect secret 
        is given, this function will return an unauthenticated error.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenewAPIKeyToken(self, request, context):
        """Renew a non-expired API key authentication token.
        This allows to extend the lifetime of a token created by AuthenticateAPIKey.
        If the given token is invalid or expired, or the underlying API key is expired
        this function will return an unauthenticated error.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RevokeAPIKeyToken(self, request, context):
        """Revoke an API key authentication token.
        This function will return a non-error response, even if the given token
        is invalid or already expired.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IAMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'GetThisUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetThisUser,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.User.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.User.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.User.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.User.SerializeToString,
            ),
            'VerifyUserMobilePhone': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyUserMobilePhone,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.VerifyUserMobilePhoneRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'ResendUserMobilePhoneVerification': grpc.unary_unary_rpc_method_handler(
                    servicer.ResendUserMobilePhoneVerification,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'ListGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroups,
                    request_deserializer=common_dot_v1_dot_common__pb2.ListOptions.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.GroupList.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.Group.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.Group.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.Group.SerializeToString,
            ),
            'UpdateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGroup,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.Group.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.Group.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'ListGroupMembers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroupMembers,
                    request_deserializer=common_dot_v1_dot_common__pb2.ListOptions.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.GroupMemberList.SerializeToString,
            ),
            'AddGroupMembers': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGroupMembers,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.GroupMembersRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'DeleteGroupMembers': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroupMembers,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.GroupMembersRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'IsMemberOfGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.IsMemberOfGroup,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.IsMemberOfGroupRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.YesOrNo.SerializeToString,
            ),
            'ListRoles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoles,
                    request_deserializer=common_dot_v1_dot_common__pb2.ListOptions.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.RoleList.SerializeToString,
            ),
            'GetRole': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRole,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.Role.SerializeToString,
            ),
            'CreateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRole,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.Role.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.Role.SerializeToString,
            ),
            'UpdateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRole,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.Role.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.Role.SerializeToString,
            ),
            'DeleteRole': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRole,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'GetPolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPolicy,
                    request_deserializer=common_dot_v1_dot_common__pb2.URLOptions.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.Policy.SerializeToString,
            ),
            'GetPolicyByFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPolicyByFilter,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.GetPolicyByFilterRequest.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.Policy.SerializeToString,
            ),
            'AddRoleBindings': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRoleBindings,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.RoleBindingsRequest.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.Policy.SerializeToString,
            ),
            'DeleteRoleBindings': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRoleBindings,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.RoleBindingsRequest.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.Policy.SerializeToString,
            ),
            'GetEffectivePermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEffectivePermissions,
                    request_deserializer=common_dot_v1_dot_common__pb2.URLOptions.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.PermissionList.SerializeToString,
            ),
            'GetMultipleEffectivePermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMultipleEffectivePermissions,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.GetMultipleEffectivePermissionsRequest.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.MultiplePermissionLists.SerializeToString,
            ),
            'HasPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.HasPermissions,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.HasPermissionsRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.YesOrNo.SerializeToString,
            ),
            'ListPermissions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPermissions,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.PermissionList.SerializeToString,
            ),
            'ListAPIKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAPIKeys,
                    request_deserializer=common_dot_v1_dot_common__pb2.ListOptions.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.APIKeyList.SerializeToString,
            ),
            'GetAPIKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIKey,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.APIKey.SerializeToString,
            ),
            'CreateAPIKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAPIKey,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.CreateAPIKeyRequest.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.APIKeySecret.SerializeToString,
            ),
            'RevokeAPIKey': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeAPIKey,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'DeleteAPIKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAPIKey,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'AuthenticateAPIKey': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateAPIKey,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.AuthenticateAPIKeyRequest.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.AuthenticateAPIKeyResponse.SerializeToString,
            ),
            'RenewAPIKeyToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RenewAPIKeyToken,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.RenewAPIKeyTokenRequest.FromString,
                    response_serializer=iam_dot_v1_dot_iam__pb2.RenewAPIKeyTokenResponse.SerializeToString,
            ),
            'RevokeAPIKeyToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RevokeAPIKeyToken,
                    request_deserializer=iam_dot_v1_dot_iam__pb2.RevokeAPIKeyTokenRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.iam.v1.IAMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IAMService(object):
    """IAMService is the API used to configure IAM objects.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetThisUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/GetThisUser',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            iam_dot_v1_dot_iam__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/GetUser',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            iam_dot_v1_dot_iam__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/UpdateUser',
            iam_dot_v1_dot_iam__pb2.User.SerializeToString,
            iam_dot_v1_dot_iam__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyUserMobilePhone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/VerifyUserMobilePhone',
            iam_dot_v1_dot_iam__pb2.VerifyUserMobilePhoneRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResendUserMobilePhoneVerification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/ResendUserMobilePhoneVerification',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/ListGroups',
            common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
            iam_dot_v1_dot_iam__pb2.GroupList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/GetGroup',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            iam_dot_v1_dot_iam__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/CreateGroup',
            iam_dot_v1_dot_iam__pb2.Group.SerializeToString,
            iam_dot_v1_dot_iam__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/UpdateGroup',
            iam_dot_v1_dot_iam__pb2.Group.SerializeToString,
            iam_dot_v1_dot_iam__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/DeleteGroup',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGroupMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/ListGroupMembers',
            common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
            iam_dot_v1_dot_iam__pb2.GroupMemberList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddGroupMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/AddGroupMembers',
            iam_dot_v1_dot_iam__pb2.GroupMembersRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGroupMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/DeleteGroupMembers',
            iam_dot_v1_dot_iam__pb2.GroupMembersRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsMemberOfGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/IsMemberOfGroup',
            iam_dot_v1_dot_iam__pb2.IsMemberOfGroupRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.YesOrNo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRoles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/ListRoles',
            common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
            iam_dot_v1_dot_iam__pb2.RoleList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/GetRole',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            iam_dot_v1_dot_iam__pb2.Role.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/CreateRole',
            iam_dot_v1_dot_iam__pb2.Role.SerializeToString,
            iam_dot_v1_dot_iam__pb2.Role.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/UpdateRole',
            iam_dot_v1_dot_iam__pb2.Role.SerializeToString,
            iam_dot_v1_dot_iam__pb2.Role.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/DeleteRole',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/GetPolicy',
            common_dot_v1_dot_common__pb2.URLOptions.SerializeToString,
            iam_dot_v1_dot_iam__pb2.Policy.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPolicyByFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/GetPolicyByFilter',
            iam_dot_v1_dot_iam__pb2.GetPolicyByFilterRequest.SerializeToString,
            iam_dot_v1_dot_iam__pb2.Policy.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRoleBindings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/AddRoleBindings',
            iam_dot_v1_dot_iam__pb2.RoleBindingsRequest.SerializeToString,
            iam_dot_v1_dot_iam__pb2.Policy.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRoleBindings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/DeleteRoleBindings',
            iam_dot_v1_dot_iam__pb2.RoleBindingsRequest.SerializeToString,
            iam_dot_v1_dot_iam__pb2.Policy.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEffectivePermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/GetEffectivePermissions',
            common_dot_v1_dot_common__pb2.URLOptions.SerializeToString,
            iam_dot_v1_dot_iam__pb2.PermissionList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMultipleEffectivePermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/GetMultipleEffectivePermissions',
            iam_dot_v1_dot_iam__pb2.GetMultipleEffectivePermissionsRequest.SerializeToString,
            iam_dot_v1_dot_iam__pb2.MultiplePermissionLists.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HasPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/HasPermissions',
            iam_dot_v1_dot_iam__pb2.HasPermissionsRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.YesOrNo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPermissions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/ListPermissions',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            iam_dot_v1_dot_iam__pb2.PermissionList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAPIKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/ListAPIKeys',
            common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
            iam_dot_v1_dot_iam__pb2.APIKeyList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAPIKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/GetAPIKey',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            iam_dot_v1_dot_iam__pb2.APIKey.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAPIKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/CreateAPIKey',
            iam_dot_v1_dot_iam__pb2.CreateAPIKeyRequest.SerializeToString,
            iam_dot_v1_dot_iam__pb2.APIKeySecret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevokeAPIKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/RevokeAPIKey',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAPIKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/DeleteAPIKey',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthenticateAPIKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/AuthenticateAPIKey',
            iam_dot_v1_dot_iam__pb2.AuthenticateAPIKeyRequest.SerializeToString,
            iam_dot_v1_dot_iam__pb2.AuthenticateAPIKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenewAPIKeyToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/RenewAPIKeyToken',
            iam_dot_v1_dot_iam__pb2.RenewAPIKeyTokenRequest.SerializeToString,
            iam_dot_v1_dot_iam__pb2.RenewAPIKeyTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RevokeAPIKeyToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.iam.v1.IAMService/RevokeAPIKeyToken',
            iam_dot_v1_dot_iam__pb2.RevokeAPIKeyTokenRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
