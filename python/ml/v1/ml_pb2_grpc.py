# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2
from ml.v1 import ml_pb2 as ml_dot_v1_dot_ml__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ml/v1/ml_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MLServiceStub(object):
    """MLService is the API used to configure ArangoML on ArangoGraph Insights Platform.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.ml.v1.MLService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                _registered_method=True)
        self.GetMLServices = channel.unary_unary(
                '/arangodb.cloud.ml.v1.MLService/GetMLServices',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=ml_dot_v1_dot_ml__pb2.MLServices.FromString,
                _registered_method=True)
        self.UpdateMLServices = channel.unary_unary(
                '/arangodb.cloud.ml.v1.MLService/UpdateMLServices',
                request_serializer=ml_dot_v1_dot_ml__pb2.MLServices.SerializeToString,
                response_deserializer=ml_dot_v1_dot_ml__pb2.MLServices.FromString,
                _registered_method=True)
        self.ListMLServicesSizes = channel.unary_unary(
                '/arangodb.cloud.ml.v1.MLService/ListMLServicesSizes',
                request_serializer=ml_dot_v1_dot_ml__pb2.ListMLServicesSizesRequest.SerializeToString,
                response_deserializer=ml_dot_v1_dot_ml__pb2.MLServicesSizeList.FromString,
                _registered_method=True)


class MLServiceServicer(object):
    """MLService is the API used to configure ArangoML on ArangoGraph Insights Platform.
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMLServices(self, request, context):
        """Get an existing MLServices resource for a given deployment (specified by the id). 
        Required permissions:
        - ml.mlservices.get
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMLServices(self, request, context):
        """Update an existing MLServices resource. If it does not exist, this will create a new one.
        Pass the desired updated state of MLServices to this call.
        Required permissions:
        - ml.mlservices.update
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMLServicesSizes(self, request, context):
        """List the available size configurations for MLServices.
        Note that the returned size specifications are applied for ML Jobs.
        Required permissions:
        - ml.mlservicessize.list on the deployment (if deployment_id is provided)
        - None, authenticated only
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'GetMLServices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMLServices,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=ml_dot_v1_dot_ml__pb2.MLServices.SerializeToString,
            ),
            'UpdateMLServices': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMLServices,
                    request_deserializer=ml_dot_v1_dot_ml__pb2.MLServices.FromString,
                    response_serializer=ml_dot_v1_dot_ml__pb2.MLServices.SerializeToString,
            ),
            'ListMLServicesSizes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMLServicesSizes,
                    request_deserializer=ml_dot_v1_dot_ml__pb2.ListMLServicesSizesRequest.FromString,
                    response_serializer=ml_dot_v1_dot_ml__pb2.MLServicesSizeList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.ml.v1.MLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('arangodb.cloud.ml.v1.MLService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MLService(object):
    """MLService is the API used to configure ArangoML on ArangoGraph Insights Platform.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.ml.v1.MLService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMLServices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.ml.v1.MLService/GetMLServices',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            ml_dot_v1_dot_ml__pb2.MLServices.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMLServices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.ml.v1.MLService/UpdateMLServices',
            ml_dot_v1_dot_ml__pb2.MLServices.SerializeToString,
            ml_dot_v1_dot_ml__pb2.MLServices.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListMLServicesSizes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.ml.v1.MLService/ListMLServicesSizes',
            ml_dot_v1_dot_ml__pb2.ListMLServicesSizesRequest.SerializeToString,
            ml_dot_v1_dot_ml__pb2.MLServicesSizeList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
