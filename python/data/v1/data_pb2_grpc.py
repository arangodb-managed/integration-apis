# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2
from data.v1 import data_pb2 as data_dot_v1_dot_data__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in data/v1/data_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DataServiceStub(object):
    """DataService is the API used to configure data objects.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                _registered_method=True)
        self.ListDeployments = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/ListDeployments',
                request_serializer=common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DeploymentList.FromString,
                _registered_method=True)
        self.ListDeploymentsByFilter = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/ListDeploymentsByFilter',
                request_serializer=data_dot_v1_dot_data__pb2.ListDeploymentsByFilterRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DeploymentList.FromString,
                _registered_method=True)
        self.GetDeployment = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetDeployment',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.Deployment.FromString,
                _registered_method=True)
        self.GetDeploymentUpdates = channel.unary_stream(
                '/arangodb.cloud.data.v1.DataService/GetDeploymentUpdates',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.Deployment.FromString,
                _registered_method=True)
        self.CreateDeployment = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/CreateDeployment',
                request_serializer=data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.Deployment.FromString,
                _registered_method=True)
        self.UpdateDeployment = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/UpdateDeployment',
                request_serializer=data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.Deployment.FromString,
                _registered_method=True)
        self.UpdateDeploymentScheduledRootPasswordRotation = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/UpdateDeploymentScheduledRootPasswordRotation',
                request_serializer=data_dot_v1_dot_data__pb2.UpdateDeploymentScheduledRootPasswordRotationRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                _registered_method=True)
        self.DeleteDeployment = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/DeleteDeployment',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                _registered_method=True)
        self.GetDeploymentCredentials = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetDeploymentCredentials',
                request_serializer=data_dot_v1_dot_data__pb2.DeploymentCredentialsRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DeploymentCredentials.FromString,
                _registered_method=True)
        self.ListVersions = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/ListVersions',
                request_serializer=data_dot_v1_dot_data__pb2.ListVersionsRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.VersionList.FromString,
                _registered_method=True)
        self.GetDefaultVersion = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetDefaultVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.Version.FromString,
                _registered_method=True)
        self.GetVersion = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetVersion',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.Version.FromString,
                _registered_method=True)
        self.GetServersSpecLimits = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetServersSpecLimits',
                request_serializer=data_dot_v1_dot_data__pb2.ServersSpecLimitsRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.ServersSpecLimits.FromString,
                _registered_method=True)
        self.ListNodeSizes = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/ListNodeSizes',
                request_serializer=data_dot_v1_dot_data__pb2.NodeSizesRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.NodeSizeList.FromString,
                _registered_method=True)
        self.ListDeploymentModels = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/ListDeploymentModels',
                request_serializer=data_dot_v1_dot_data__pb2.ListDeploymentModelsRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DeploymentModelList.FromString,
                _registered_method=True)
        self.ListCPUSizes = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/ListCPUSizes',
                request_serializer=data_dot_v1_dot_data__pb2.ListCPUSizesRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.CPUSizeList.FromString,
                _registered_method=True)
        self.GetDeploymentModel = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetDeploymentModel',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DeploymentModel.FromString,
                _registered_method=True)
        self.CalculateDeploymentSize = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/CalculateDeploymentSize',
                request_serializer=data_dot_v1_dot_data__pb2.CalculateDeploymentSizeRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DeploymentSize.FromString,
                _registered_method=True)
        self.RecommendDeploymentSize = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/RecommendDeploymentSize',
                request_serializer=data_dot_v1_dot_data__pb2.DeploymentSizeRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DeploymentSizeRecommendation.FromString,
                _registered_method=True)
        self.GetConnectDriverInstructions = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetConnectDriverInstructions',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.ConnectDriverInstructions.FromString,
                _registered_method=True)
        self.GetImportDataInstructions = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetImportDataInstructions',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.ImportDataInstructions.FromString,
                _registered_method=True)
        self.CalculateDeploymentPrice = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/CalculateDeploymentPrice',
                request_serializer=data_dot_v1_dot_data__pb2.DeploymentPriceRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DeploymentPrice.FromString,
                _registered_method=True)
        self.GetDeploymentFeatures = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetDeploymentFeatures',
                request_serializer=data_dot_v1_dot_data__pb2.DeploymentFeaturesRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DeploymentFeatures.FromString,
                _registered_method=True)
        self.PauseDeployment = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/PauseDeployment',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                _registered_method=True)
        self.ResumeDeployment = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/ResumeDeployment',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                _registered_method=True)
        self.RotateDeploymentServer = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/RotateDeploymentServer',
                request_serializer=data_dot_v1_dot_data__pb2.RotateDeploymentServerRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                _registered_method=True)
        self.CreateTestDatabase = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/CreateTestDatabase',
                request_serializer=data_dot_v1_dot_data__pb2.CreateTestDatabaseRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.CreateTestDatabaseResponse.FromString,
                _registered_method=True)
        self.RebalanceDeploymentShards = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/RebalanceDeploymentShards',
                request_serializer=data_dot_v1_dot_data__pb2.RebalanceDeploymentShardsRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                _registered_method=True)
        self.ListDiskPerformances = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/ListDiskPerformances',
                request_serializer=data_dot_v1_dot_data__pb2.ListDiskPerformancesRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DiskPerformanceList.FromString,
                _registered_method=True)
        self.GetDiskPerformance = channel.unary_unary(
                '/arangodb.cloud.data.v1.DataService/GetDiskPerformance',
                request_serializer=data_dot_v1_dot_data__pb2.GetDiskPerformanceRequest.SerializeToString,
                response_deserializer=data_dot_v1_dot_data__pb2.DiskPerformance.FromString,
                _registered_method=True)


class DataServiceServicer(object):
    """DataService is the API used to configure data objects.
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDeployments(self, request, context):
        """Fetch all deployments in the project identified by the given context ID.
        Required permissions:
        - data.deployment.list on the project identified by the given context ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDeploymentsByFilter(self, request, context):
        """Fetch all deployments in the organization identified by the given filter.
        Only the deployments with sufficient permissions are returned. 
        If the caller has no such permission on any of the deployments (in the organization) an empty list is returned, not an error. 
        Required permissions:
        - None (authenticated only)
        - data.deployment.list on the filtered deployment(s)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeployment(self, request, context):
        """Fetch a deployment by its id.
        Required permissions:
        - data.deployment.get on the deployment identified by the given ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeploymentUpdates(self, request, context):
        """Fetch all updates (spec and/or status) of the deployment that matches the given request.
        Required permissions:
        - data.deployment.get on the deployment identified by the given ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDeployment(self, request, context):
        """Create a new deployment
        Required permissions:
        - data.deployment.create on the project that owns the deployment
        - network.privateendpointservice.create on the project that owns the deployment (if private_endpoint field is set)
        Note that deployment.status & deployment.expiration are ignored
        in this request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDeployment(self, request, context):
        """Update a deployment
        Required permissions:
        - data.deployment.update on the deployment
        Note that deployment.status & deployment.expiration are ignored
        in this request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDeploymentScheduledRootPasswordRotation(self, request, context):
        """Update the setting for scheduled root password rotation
        Required permissions:
        - data.deployment.update-scheduled-root-password-rotation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDeployment(self, request, context):
        """Delete a deployment
        Note that deployments are initially only marked for deletion.
        Once all their resources are removed the deployment itself is removed.
        Required permissions:
        - data.deployment.delete on the deployment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeploymentCredentials(self, request, context):
        """Fetch credentials for accessing deployment by its id.
        Required permissions:
        - data.deployment.get on the deployment identified by the given ID
        - data.deploymentcredentials.get on the deployment identified by the given ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListVersions(self, request, context):
        """Fetch all ArangoDB versions that are available for deployments.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDefaultVersion(self, request, context):
        """Fetch the default ArangoDB version for new deployment.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVersion(self, request, context):
        """Fetch the ArangoDB version by its id (semver).
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServersSpecLimits(self, request, context):
        """Fetch the limits for server specifications for deployments
        owned by the given projected, created in the given region.
        Required permissions:
        - data.limits.get on the requested project
        - data.deployment.get on the specified deployment (if deployment_id is set)
        This method is deprecated and will be remove in the very near future, do not use this method anymore
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNodeSizes(self, request, context):
        """Fetch the node sizes available for deployments
        owned by the project with given ID, created in the given region with given ID.
        If project ID "all" is used, then all node sizes for the region with given
        ID are returned.
        Required permissions:
        - data.nodesize.list on the requested deployment (if deployment ID is set)
        - data.nodesize.list on the requested project (if project ID does not equal "all")
        - data.nodesize.list on the requested organization (if organization ID is set)
        - None if project ID does equals "all"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDeploymentModels(self, request, context):
        """Fetch the models available for deployments owned by the project with given ID.
        Required permissions:
        - data.deploymentmodel.list on the requested project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCPUSizes(self, request, context):
        """Fetch the CPU sizes available for deployments owned by the project with given ID.
        Required permissions:
        - data.cpusize.list on the requested project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeploymentModel(self, request, context):
        """Get the deployment model identified by the provided ID.
        Required permissions:
        - None (authenticated only)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateDeploymentSize(self, request, context):
        """Calculate the total size of a deployment with given arguments.
        Required permissions:
        - none
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecommendDeploymentSize(self, request, context):
        """Recommend a deployment size, for a oneshard or sharded deployments, using the
        given input values.
        Required permissions:
        - none
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnectDriverInstructions(self, request, context):
        """Fetch instructions for connecting drivers to the deployment identified by the given id.
        Required permissions:
        - data.deployment.get on the deployment identified by the given ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImportDataInstructions(self, request, context):
        """Fetch instructions for importing data into the deployment identified by the given id.
        Required permissions:
        - data.deployment.get on the deployment identified by the given ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateDeploymentPrice(self, request, context):
        """Calculate the price of a deployment of given settings.
        Required permissions:
        - data.deploymentprice.calculate
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeploymentFeatures(self, request, context):
        """Get the features that will be available to a deployment in the given context.
        Required permissions:
        - data.deploymentfeatures.get on the project that is given in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseDeployment(self, request, context):
        """Pauses a deployment indentified by the given ID.
        When PauseDeployment is invoked on a deployment that is not allowed to pause or has is_paused set, an PreconditionFailed error is returned.
        Required permissions:
        - data.deployment.pause on the deployment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResumeDeployment(self, request, context):
        """Resumes a paused deployment identified by the given id.
        When ResumeDeployment is invoked on a deployment that has is_paused not set, an PreconditionFailed error is returned.
        Required permissions:
        - data.deployment.resume on the deployment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RotateDeploymentServer(self, request, context):
        """Rotate a server for a deployment.
        This causes the server to restart after condition are deemed safe for a restart.
        Required permissions:
        - data.deployment.rotate-server on the deployment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTestDatabase(self, request, context):
        """Create a test database and user for a deployment. Returns the output containing the created
        database name, password, username, host and port.
        Required permissions:
        - data.deployment.create-test-database on the deployment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RebalanceDeploymentShards(self, request, context):
        """RebalanceDeploymentShards rebalances shards for deployment across the DB servers.
        Prerelease: This function is not yet available in production.
        Required permissions:
        - data.deployment.rebalance-shards on the deployment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDiskPerformances(self, request, context):
        """Lists disk performances that match all of the given filters.
        Required permissions:
        - data.diskperformance.list on the deployment (if deployment ID is provided)
        - data.diskperformance.list on the organization (if organization ID is provided, but deployment ID is not)
        - None, authenticated only (if no deployment ID is provided)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDiskPerformance(self, request, context):
        """Get the disk performance for the requested disk performance ID.
        Required permissions:
        - None, authenticated only
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'ListDeployments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDeployments,
                    request_deserializer=common_dot_v1_dot_common__pb2.ListOptions.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DeploymentList.SerializeToString,
            ),
            'ListDeploymentsByFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDeploymentsByFilter,
                    request_deserializer=data_dot_v1_dot_data__pb2.ListDeploymentsByFilterRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DeploymentList.SerializeToString,
            ),
            'GetDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeployment,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
            ),
            'GetDeploymentUpdates': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDeploymentUpdates,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
            ),
            'CreateDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDeployment,
                    request_deserializer=data_dot_v1_dot_data__pb2.Deployment.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
            ),
            'UpdateDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDeployment,
                    request_deserializer=data_dot_v1_dot_data__pb2.Deployment.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
            ),
            'UpdateDeploymentScheduledRootPasswordRotation': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDeploymentScheduledRootPasswordRotation,
                    request_deserializer=data_dot_v1_dot_data__pb2.UpdateDeploymentScheduledRootPasswordRotationRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'DeleteDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDeployment,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'GetDeploymentCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeploymentCredentials,
                    request_deserializer=data_dot_v1_dot_data__pb2.DeploymentCredentialsRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DeploymentCredentials.SerializeToString,
            ),
            'ListVersions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListVersions,
                    request_deserializer=data_dot_v1_dot_data__pb2.ListVersionsRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.VersionList.SerializeToString,
            ),
            'GetDefaultVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDefaultVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.Version.SerializeToString,
            ),
            'GetVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.Version.SerializeToString,
            ),
            'GetServersSpecLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServersSpecLimits,
                    request_deserializer=data_dot_v1_dot_data__pb2.ServersSpecLimitsRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.ServersSpecLimits.SerializeToString,
            ),
            'ListNodeSizes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNodeSizes,
                    request_deserializer=data_dot_v1_dot_data__pb2.NodeSizesRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.NodeSizeList.SerializeToString,
            ),
            'ListDeploymentModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDeploymentModels,
                    request_deserializer=data_dot_v1_dot_data__pb2.ListDeploymentModelsRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DeploymentModelList.SerializeToString,
            ),
            'ListCPUSizes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCPUSizes,
                    request_deserializer=data_dot_v1_dot_data__pb2.ListCPUSizesRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.CPUSizeList.SerializeToString,
            ),
            'GetDeploymentModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeploymentModel,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DeploymentModel.SerializeToString,
            ),
            'CalculateDeploymentSize': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateDeploymentSize,
                    request_deserializer=data_dot_v1_dot_data__pb2.CalculateDeploymentSizeRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DeploymentSize.SerializeToString,
            ),
            'RecommendDeploymentSize': grpc.unary_unary_rpc_method_handler(
                    servicer.RecommendDeploymentSize,
                    request_deserializer=data_dot_v1_dot_data__pb2.DeploymentSizeRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DeploymentSizeRecommendation.SerializeToString,
            ),
            'GetConnectDriverInstructions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnectDriverInstructions,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.ConnectDriverInstructions.SerializeToString,
            ),
            'GetImportDataInstructions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImportDataInstructions,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.ImportDataInstructions.SerializeToString,
            ),
            'CalculateDeploymentPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateDeploymentPrice,
                    request_deserializer=data_dot_v1_dot_data__pb2.DeploymentPriceRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DeploymentPrice.SerializeToString,
            ),
            'GetDeploymentFeatures': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeploymentFeatures,
                    request_deserializer=data_dot_v1_dot_data__pb2.DeploymentFeaturesRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DeploymentFeatures.SerializeToString,
            ),
            'PauseDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseDeployment,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'ResumeDeployment': grpc.unary_unary_rpc_method_handler(
                    servicer.ResumeDeployment,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'RotateDeploymentServer': grpc.unary_unary_rpc_method_handler(
                    servicer.RotateDeploymentServer,
                    request_deserializer=data_dot_v1_dot_data__pb2.RotateDeploymentServerRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'CreateTestDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTestDatabase,
                    request_deserializer=data_dot_v1_dot_data__pb2.CreateTestDatabaseRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.CreateTestDatabaseResponse.SerializeToString,
            ),
            'RebalanceDeploymentShards': grpc.unary_unary_rpc_method_handler(
                    servicer.RebalanceDeploymentShards,
                    request_deserializer=data_dot_v1_dot_data__pb2.RebalanceDeploymentShardsRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'ListDiskPerformances': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDiskPerformances,
                    request_deserializer=data_dot_v1_dot_data__pb2.ListDiskPerformancesRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DiskPerformanceList.SerializeToString,
            ),
            'GetDiskPerformance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDiskPerformance,
                    request_deserializer=data_dot_v1_dot_data__pb2.GetDiskPerformanceRequest.FromString,
                    response_serializer=data_dot_v1_dot_data__pb2.DiskPerformance.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.data.v1.DataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('arangodb.cloud.data.v1.DataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataService(object):
    """DataService is the API used to configure data objects.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDeployments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/ListDeployments',
            common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
            data_dot_v1_dot_data__pb2.DeploymentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDeploymentsByFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/ListDeploymentsByFilter',
            data_dot_v1_dot_data__pb2.ListDeploymentsByFilterRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.DeploymentList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetDeployment',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            data_dot_v1_dot_data__pb2.Deployment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDeploymentUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetDeploymentUpdates',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            data_dot_v1_dot_data__pb2.Deployment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/CreateDeployment',
            data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
            data_dot_v1_dot_data__pb2.Deployment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/UpdateDeployment',
            data_dot_v1_dot_data__pb2.Deployment.SerializeToString,
            data_dot_v1_dot_data__pb2.Deployment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDeploymentScheduledRootPasswordRotation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/UpdateDeploymentScheduledRootPasswordRotation',
            data_dot_v1_dot_data__pb2.UpdateDeploymentScheduledRootPasswordRotationRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/DeleteDeployment',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDeploymentCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetDeploymentCredentials',
            data_dot_v1_dot_data__pb2.DeploymentCredentialsRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.DeploymentCredentials.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListVersions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/ListVersions',
            data_dot_v1_dot_data__pb2.ListVersionsRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.VersionList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDefaultVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetDefaultVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            data_dot_v1_dot_data__pb2.Version.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetVersion',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            data_dot_v1_dot_data__pb2.Version.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetServersSpecLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetServersSpecLimits',
            data_dot_v1_dot_data__pb2.ServersSpecLimitsRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.ServersSpecLimits.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListNodeSizes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/ListNodeSizes',
            data_dot_v1_dot_data__pb2.NodeSizesRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.NodeSizeList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDeploymentModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/ListDeploymentModels',
            data_dot_v1_dot_data__pb2.ListDeploymentModelsRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.DeploymentModelList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCPUSizes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/ListCPUSizes',
            data_dot_v1_dot_data__pb2.ListCPUSizesRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.CPUSizeList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDeploymentModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetDeploymentModel',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            data_dot_v1_dot_data__pb2.DeploymentModel.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CalculateDeploymentSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/CalculateDeploymentSize',
            data_dot_v1_dot_data__pb2.CalculateDeploymentSizeRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.DeploymentSize.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RecommendDeploymentSize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/RecommendDeploymentSize',
            data_dot_v1_dot_data__pb2.DeploymentSizeRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.DeploymentSizeRecommendation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConnectDriverInstructions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetConnectDriverInstructions',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            data_dot_v1_dot_data__pb2.ConnectDriverInstructions.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetImportDataInstructions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetImportDataInstructions',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            data_dot_v1_dot_data__pb2.ImportDataInstructions.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CalculateDeploymentPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/CalculateDeploymentPrice',
            data_dot_v1_dot_data__pb2.DeploymentPriceRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.DeploymentPrice.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDeploymentFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetDeploymentFeatures',
            data_dot_v1_dot_data__pb2.DeploymentFeaturesRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.DeploymentFeatures.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PauseDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/PauseDeployment',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResumeDeployment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/ResumeDeployment',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RotateDeploymentServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/RotateDeploymentServer',
            data_dot_v1_dot_data__pb2.RotateDeploymentServerRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateTestDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/CreateTestDatabase',
            data_dot_v1_dot_data__pb2.CreateTestDatabaseRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.CreateTestDatabaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RebalanceDeploymentShards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/RebalanceDeploymentShards',
            data_dot_v1_dot_data__pb2.RebalanceDeploymentShardsRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDiskPerformances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/ListDiskPerformances',
            data_dot_v1_dot_data__pb2.ListDiskPerformancesRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.DiskPerformanceList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDiskPerformance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arangodb.cloud.data.v1.DataService/GetDiskPerformance',
            data_dot_v1_dot_data__pb2.GetDiskPerformanceRequest.SerializeToString,
            data_dot_v1_dot_data__pb2.DiskPerformance.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
