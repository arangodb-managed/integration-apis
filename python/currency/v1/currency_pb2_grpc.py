# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2
from currency.v1 import currency_pb2 as currency_dot_v1_dot_currency__pb2


class CurrencyServiceStub(object):
    """CurrencyService is the API used to query for supported currencies.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.currency.v1.CurrencyService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                )
        self.ListCurrencies = channel.unary_unary(
                '/arangodb.cloud.currency.v1.CurrencyService/ListCurrencies',
                request_serializer=common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
                response_deserializer=currency_dot_v1_dot_currency__pb2.CurrencyList.FromString,
                )
        self.GetCurrency = channel.unary_unary(
                '/arangodb.cloud.currency.v1.CurrencyService/GetCurrency',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=currency_dot_v1_dot_currency__pb2.Currency.FromString,
                )
        self.GetDefaultCurrency = channel.unary_unary(
                '/arangodb.cloud.currency.v1.CurrencyService/GetDefaultCurrency',
                request_serializer=currency_dot_v1_dot_currency__pb2.GetDefaultCurrencyRequest.SerializeToString,
                response_deserializer=currency_dot_v1_dot_currency__pb2.Currency.FromString,
                )


class CurrencyServiceServicer(object):
    """CurrencyService is the API used to query for supported currencies.
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCurrencies(self, request, context):
        """Fetch all providers that are supported by the ArangoDB cloud.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrency(self, request, context):
        """Fetch a currency by its id.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDefaultCurrency(self, request, context):
        """Fetch the default currency for a given (optional) organization.
        Required permissions:
        - resourcemanager.organization.get On the organization identified by given id.
        - None In case no organization identifier was given.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CurrencyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'ListCurrencies': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCurrencies,
                    request_deserializer=common_dot_v1_dot_common__pb2.ListOptions.FromString,
                    response_serializer=currency_dot_v1_dot_currency__pb2.CurrencyList.SerializeToString,
            ),
            'GetCurrency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrency,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=currency_dot_v1_dot_currency__pb2.Currency.SerializeToString,
            ),
            'GetDefaultCurrency': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDefaultCurrency,
                    request_deserializer=currency_dot_v1_dot_currency__pb2.GetDefaultCurrencyRequest.FromString,
                    response_serializer=currency_dot_v1_dot_currency__pb2.Currency.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.currency.v1.CurrencyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CurrencyService(object):
    """CurrencyService is the API used to query for supported currencies.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.currency.v1.CurrencyService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCurrencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.currency.v1.CurrencyService/ListCurrencies',
            common_dot_v1_dot_common__pb2.ListOptions.SerializeToString,
            currency_dot_v1_dot_currency__pb2.CurrencyList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCurrency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.currency.v1.CurrencyService/GetCurrency',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            currency_dot_v1_dot_currency__pb2.Currency.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDefaultCurrency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.currency.v1.CurrencyService/GetDefaultCurrency',
            currency_dot_v1_dot_currency__pb2.GetDefaultCurrencyRequest.SerializeToString,
            currency_dot_v1_dot_currency__pb2.Currency.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
