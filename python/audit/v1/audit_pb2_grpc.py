# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from audit.v1 import audit_pb2 as audit_dot_v1_dot_audit__pb2
from common.v1 import common_pb2 as common_dot_v1_dot_common__pb2


class AuditServiceStub(object):
    """AuditService is the API used to provide access to audit events.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAPIVersion = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/GetAPIVersion',
                request_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Version.FromString,
                )
        self.ListAuditLogTopics = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/ListAuditLogTopics',
                request_serializer=audit_dot_v1_dot_audit__pb2.ListAuditLogTopicsRequest.SerializeToString,
                response_deserializer=audit_dot_v1_dot_audit__pb2.AuditLogTopicList.FromString,
                )
        self.ListAuditLogs = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/ListAuditLogs',
                request_serializer=audit_dot_v1_dot_audit__pb2.ListAuditLogsRequest.SerializeToString,
                response_deserializer=audit_dot_v1_dot_audit__pb2.AuditLogList.FromString,
                )
        self.GetAuditLog = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/GetAuditLog',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=audit_dot_v1_dot_audit__pb2.AuditLog.FromString,
                )
        self.CreateAuditLog = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/CreateAuditLog',
                request_serializer=audit_dot_v1_dot_audit__pb2.AuditLog.SerializeToString,
                response_deserializer=audit_dot_v1_dot_audit__pb2.AuditLog.FromString,
                )
        self.UpdateAuditLog = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/UpdateAuditLog',
                request_serializer=audit_dot_v1_dot_audit__pb2.AuditLog.SerializeToString,
                response_deserializer=audit_dot_v1_dot_audit__pb2.AuditLog.FromString,
                )
        self.DeleteAuditLog = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/DeleteAuditLog',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.SetDefaultAuditLog = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/SetDefaultAuditLog',
                request_serializer=audit_dot_v1_dot_audit__pb2.SetDefaultAuditLogRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.TestAuditLogHttpsPostDestination = channel.unary_stream(
                '/arangodb.cloud.audit.v1.AuditService/TestAuditLogHttpsPostDestination',
                request_serializer=audit_dot_v1_dot_audit__pb2.TestAuditLogHttpsPostDestinationRequest.SerializeToString,
                response_deserializer=audit_dot_v1_dot_audit__pb2.TestAuditLogHttpsPostDestinationResult.FromString,
                )
        self.ListAuditLogArchives = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/ListAuditLogArchives',
                request_serializer=audit_dot_v1_dot_audit__pb2.ListAuditLogArchivesRequest.SerializeToString,
                response_deserializer=audit_dot_v1_dot_audit__pb2.AuditLogArchiveList.FromString,
                )
        self.GetAuditLogArchive = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/GetAuditLogArchive',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=audit_dot_v1_dot_audit__pb2.AuditLogArchive.FromString,
                )
        self.DeleteAuditLogArchive = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/DeleteAuditLogArchive',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.DeleteAuditLogArchiveEvents = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/DeleteAuditLogArchiveEvents',
                request_serializer=audit_dot_v1_dot_audit__pb2.DeleteAuditLogArchiveEventsRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.GetAuditLogEvents = channel.unary_stream(
                '/arangodb.cloud.audit.v1.AuditService/GetAuditLogEvents',
                request_serializer=audit_dot_v1_dot_audit__pb2.GetAuditLogEventsRequest.SerializeToString,
                response_deserializer=audit_dot_v1_dot_audit__pb2.AuditLogEventList.FromString,
                )
        self.GetAuditLogAttachedToProject = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/GetAuditLogAttachedToProject',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=audit_dot_v1_dot_audit__pb2.AuditLog.FromString,
                )
        self.AttachProjectToAuditLog = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/AttachProjectToAuditLog',
                request_serializer=audit_dot_v1_dot_audit__pb2.AttachProjectToAuditLogRequest.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )
        self.DetachProjectFromAuditLog = channel.unary_unary(
                '/arangodb.cloud.audit.v1.AuditService/DetachProjectFromAuditLog',
                request_serializer=common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
                response_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                )


class AuditServiceServicer(object):
    """AuditService is the API used to provide access to audit events.
    """

    def GetAPIVersion(self, request, context):
        """Get the current API version of this service.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAuditLogTopics(self, request, context):
        """Fetch all topics that can be found in an audit log event.
        Required permissions:
        - None
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAuditLogs(self, request, context):
        """Fetch all audit logs in the organization identified by the given ID.
        Required permissions:
        - audit.auditlog.list on the organization identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuditLog(self, request, context):
        """Fetch a specific AuditLog identified by the given ID.
        Required permissions:
        - audit.auditlog.get on the audit log identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAuditLog(self, request, context):
        """Create a new audit log.
        Required permissions:
        - audit.auditlog.create on the organization identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAuditLog(self, request, context):
        """Update an audit log.
        Required permissions:
        - audit.auditlog.update on the audit log identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAuditLog(self, request, context):
        """Delete an audit log.
        Note that audit logs are initially only marked for deleted.
        Once all their resources are removed the audit log itself is deleted
        and cannot be restored.
        Note that deleting an AuditLog will detach it from all Projects that
        it was attached to.
        Required permissions:
        - audit.auditlog.delete on the audit log.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDefaultAuditLog(self, request, context):
        """Change the default audit log of an organization.
        The default AuditLog for an organization is used to capture audit events
        from the ArangoGraph Insights Platform. If there is no default AuditLog, audit events
        from the ArangoGraph Insights Platform are not captured.
        The default AuditLog is also attached to new projects in the organization.
        Required permissions:
        - audit.auditlog.set-default on the organization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestAuditLogHttpsPostDestination(self, request, context):
        """Test an audit log destination of type HTTPS Post.
        Note that only 1 item is returned, but this can take a while.
        To recognize test events: The Topic will be "test-topic" and the Sequence 0
        Required permissions:
        - audit.auditlog.test-https-post-destination on the organization identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAuditLogArchives(self, request, context):
        """Fetch all audit log archives in the audit log identified by the given ID.
        Required permissions:
        - audit.auditlogarchive.list on the audit log identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuditLogArchive(self, request, context):
        """Fetch a specific AuditLogArchive identified by the given ID.
        Required permissions:
        - audit.auditlogarchive.get on the audit log archive identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAuditLogArchive(self, request, context):
        """Delete an audit log archive.
        Note that this method will return a precondition-failed error 
        if there is a non-deleted deployment using this archive.
        Note that audit log archives are initially only marked for deleted.
        Once all their resources are removed the audit log archive itself is deleted
        and cannot be restored.
        Required permissions:
        - audit.auditlogarchive.delete on the audit log archive.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAuditLogArchiveEvents(self, request, context):
        """Remove all audit events that match the given filter from the AuditLogArchive
        identified by the given ID.
        Note that this method will return a precondition-failed error 
        if there is no destination of type "cloud" in the AuditLog.
        Required permissions:
        - audit.auditlogevent.delete on the audit log archive identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuditLogEvents(self, request, context):
        """Fetch all audit events that match the given filter.
        Note that this method will return a precondition-failed error 
        if there is no destination of type "cloud" in the AuditLog.
        Required permissions:
        - audit.auditlogevents.get on the audit log identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuditLogAttachedToProject(self, request, context):
        """Fetch the AuditLog that is attached to the project identified by the given ID.
        If no AuditLog is attached to the project, a not-found error is returned.
        Required permissions:
        - audit.auditlogattachment.get on the project identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AttachProjectToAuditLog(self, request, context):
        """Attach the AuditLog identified by given ID to the project identified with given ID.
        This replaces any existing AuditLog attachment for the project.
        Required permissions:
        - audit.auditlogattachment.create on the project identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetachProjectFromAuditLog(self, request, context):
        """Detach the current AuditLog from the project identified with given ID.
        After a detachment, no audit events in the context of the project will be sent
        to an AuditLog.
        Required permissions:
        - audit.auditlogattachment.delete on the project identified by the given ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuditServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAPIVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIVersion,
                    request_deserializer=common_dot_v1_dot_common__pb2.Empty.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Version.SerializeToString,
            ),
            'ListAuditLogTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAuditLogTopics,
                    request_deserializer=audit_dot_v1_dot_audit__pb2.ListAuditLogTopicsRequest.FromString,
                    response_serializer=audit_dot_v1_dot_audit__pb2.AuditLogTopicList.SerializeToString,
            ),
            'ListAuditLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAuditLogs,
                    request_deserializer=audit_dot_v1_dot_audit__pb2.ListAuditLogsRequest.FromString,
                    response_serializer=audit_dot_v1_dot_audit__pb2.AuditLogList.SerializeToString,
            ),
            'GetAuditLog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuditLog,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=audit_dot_v1_dot_audit__pb2.AuditLog.SerializeToString,
            ),
            'CreateAuditLog': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAuditLog,
                    request_deserializer=audit_dot_v1_dot_audit__pb2.AuditLog.FromString,
                    response_serializer=audit_dot_v1_dot_audit__pb2.AuditLog.SerializeToString,
            ),
            'UpdateAuditLog': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAuditLog,
                    request_deserializer=audit_dot_v1_dot_audit__pb2.AuditLog.FromString,
                    response_serializer=audit_dot_v1_dot_audit__pb2.AuditLog.SerializeToString,
            ),
            'DeleteAuditLog': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAuditLog,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'SetDefaultAuditLog': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDefaultAuditLog,
                    request_deserializer=audit_dot_v1_dot_audit__pb2.SetDefaultAuditLogRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'TestAuditLogHttpsPostDestination': grpc.unary_stream_rpc_method_handler(
                    servicer.TestAuditLogHttpsPostDestination,
                    request_deserializer=audit_dot_v1_dot_audit__pb2.TestAuditLogHttpsPostDestinationRequest.FromString,
                    response_serializer=audit_dot_v1_dot_audit__pb2.TestAuditLogHttpsPostDestinationResult.SerializeToString,
            ),
            'ListAuditLogArchives': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAuditLogArchives,
                    request_deserializer=audit_dot_v1_dot_audit__pb2.ListAuditLogArchivesRequest.FromString,
                    response_serializer=audit_dot_v1_dot_audit__pb2.AuditLogArchiveList.SerializeToString,
            ),
            'GetAuditLogArchive': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuditLogArchive,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=audit_dot_v1_dot_audit__pb2.AuditLogArchive.SerializeToString,
            ),
            'DeleteAuditLogArchive': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAuditLogArchive,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'DeleteAuditLogArchiveEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAuditLogArchiveEvents,
                    request_deserializer=audit_dot_v1_dot_audit__pb2.DeleteAuditLogArchiveEventsRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'GetAuditLogEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAuditLogEvents,
                    request_deserializer=audit_dot_v1_dot_audit__pb2.GetAuditLogEventsRequest.FromString,
                    response_serializer=audit_dot_v1_dot_audit__pb2.AuditLogEventList.SerializeToString,
            ),
            'GetAuditLogAttachedToProject': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuditLogAttachedToProject,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=audit_dot_v1_dot_audit__pb2.AuditLog.SerializeToString,
            ),
            'AttachProjectToAuditLog': grpc.unary_unary_rpc_method_handler(
                    servicer.AttachProjectToAuditLog,
                    request_deserializer=audit_dot_v1_dot_audit__pb2.AttachProjectToAuditLogRequest.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
            'DetachProjectFromAuditLog': grpc.unary_unary_rpc_method_handler(
                    servicer.DetachProjectFromAuditLog,
                    request_deserializer=common_dot_v1_dot_common__pb2.IDOptions.FromString,
                    response_serializer=common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arangodb.cloud.audit.v1.AuditService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuditService(object):
    """AuditService is the API used to provide access to audit events.
    """

    @staticmethod
    def GetAPIVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/GetAPIVersion',
            common_dot_v1_dot_common__pb2.Empty.SerializeToString,
            common_dot_v1_dot_common__pb2.Version.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAuditLogTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/ListAuditLogTopics',
            audit_dot_v1_dot_audit__pb2.ListAuditLogTopicsRequest.SerializeToString,
            audit_dot_v1_dot_audit__pb2.AuditLogTopicList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAuditLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/ListAuditLogs',
            audit_dot_v1_dot_audit__pb2.ListAuditLogsRequest.SerializeToString,
            audit_dot_v1_dot_audit__pb2.AuditLogList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAuditLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/GetAuditLog',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            audit_dot_v1_dot_audit__pb2.AuditLog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAuditLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/CreateAuditLog',
            audit_dot_v1_dot_audit__pb2.AuditLog.SerializeToString,
            audit_dot_v1_dot_audit__pb2.AuditLog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAuditLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/UpdateAuditLog',
            audit_dot_v1_dot_audit__pb2.AuditLog.SerializeToString,
            audit_dot_v1_dot_audit__pb2.AuditLog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAuditLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/DeleteAuditLog',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDefaultAuditLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/SetDefaultAuditLog',
            audit_dot_v1_dot_audit__pb2.SetDefaultAuditLogRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestAuditLogHttpsPostDestination(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/arangodb.cloud.audit.v1.AuditService/TestAuditLogHttpsPostDestination',
            audit_dot_v1_dot_audit__pb2.TestAuditLogHttpsPostDestinationRequest.SerializeToString,
            audit_dot_v1_dot_audit__pb2.TestAuditLogHttpsPostDestinationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAuditLogArchives(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/ListAuditLogArchives',
            audit_dot_v1_dot_audit__pb2.ListAuditLogArchivesRequest.SerializeToString,
            audit_dot_v1_dot_audit__pb2.AuditLogArchiveList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAuditLogArchive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/GetAuditLogArchive',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            audit_dot_v1_dot_audit__pb2.AuditLogArchive.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAuditLogArchive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/DeleteAuditLogArchive',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAuditLogArchiveEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/DeleteAuditLogArchiveEvents',
            audit_dot_v1_dot_audit__pb2.DeleteAuditLogArchiveEventsRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAuditLogEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/arangodb.cloud.audit.v1.AuditService/GetAuditLogEvents',
            audit_dot_v1_dot_audit__pb2.GetAuditLogEventsRequest.SerializeToString,
            audit_dot_v1_dot_audit__pb2.AuditLogEventList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAuditLogAttachedToProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/GetAuditLogAttachedToProject',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            audit_dot_v1_dot_audit__pb2.AuditLog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AttachProjectToAuditLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/AttachProjectToAuditLog',
            audit_dot_v1_dot_audit__pb2.AttachProjectToAuditLogRequest.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetachProjectFromAuditLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/arangodb.cloud.audit.v1.AuditService/DetachProjectFromAuditLog',
            common_dot_v1_dot_common__pb2.IDOptions.SerializeToString,
            common_dot_v1_dot_common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
