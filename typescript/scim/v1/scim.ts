//
// This file is AUTO-GENERATED by protoc-gen-ts.
// Do not modify it manually.
///
import api from '../../api'
import * as googleTypes from '../../googleTypes'
import { Empty as arangodb_cloud_common_v1_Empty } from '../../common/v1/common'
import { IDOptions as arangodb_cloud_common_v1_IDOptions } from '../../common/v1/common'
import { Version as arangodb_cloud_common_v1_Version } from '../../common/v1/common'

// File: scim/v1/scim.proto
// Package: arangodb.cloud.resourcemanager.v1

// Response for ListUsers
export interface ListUserResponse {
  // Name of schemas followed in response
  // string
  schemas?: string[];
  
  // Total number of results available
  // number
  totalResult?: number;
  
  // Pagination offset value
  // number
  startIndex?: number;
  
  // Pagination limit value
  // number
  count?: number;
  
  // List of users
  // User
  Resources?: User[];
}

// Request params for ListUsers
export interface ListUsersRequest {
  // Pagination offset value
  // number
  startIndex?: number;
  
  // Pagination limit value
  // number
  count?: number;
  
  // Filters to apply for querying data
  // string
  filter?: string;
}

// Metadata is the schema used for meta data of a resource in SCIM API response
export interface Metadata {
  // Identifies type of resource example User / Group
  // string
  resourceType?: string;
  
  // Defines the time at which the resource was created
  // googleTypes.Timestamp
  created?: googleTypes.Timestamp;
  
  // Defines the time at which the resource was updated
  // googleTypes.Timestamp
  lastModified?: googleTypes.Timestamp;
}

// User is the schema used for user information in SCIM API response
export interface User {
  // Name of schemas followed in request / response
  // string
  schemas?: string[];
  
  // User identifier
  // string
  id?: string;
  
  // Display name of user
  // string
  displayName?: string;
  
  // Nick name of user
  // string
  nickName?: string;
  
  // Language preferred by user
  // string
  locale?: string;
  
  // Name of user
  // UserName
  name?: UserName;
  
  // Emails of user
  // UserResource
  emails?: UserResource[];
  
  // Photos of user
  // UserResource
  photos?: UserResource[];
  
  // Meta information of user creation and updation
  // Metadata
  meta?: Metadata;
  
  // External identifier is used to know the ArangoGraph Insights Platform id
  // string
  externalId?: string;
  
  // Check if user is active
  // boolean
  active?: boolean;
  
  // userName attribute of the external system like okta
  // string
  userName?: string;
}

// UserName is the schema used for name of user in SCIM API response
export interface UserName {
  // Formatted name string
  // string
  formatted?: string;
  
  // Given name / first name of user
  // string
  givenName?: string;
  
  // Family name / last name of the user
  // string
  familyName?: string;
}

// UserResource is the schema used for resource like emails / photos of user in SCIM API response
export interface UserResource {
  // Value of resource example, email address or photo url
  // string
  value?: string;
  
  // If set value is used as the primary source of information
  // boolean
  primary?: boolean;
  
  // Optional value. Sets the type resource example photo
  // string
  type?: string;
}

// SCIMService is the API used to expose the SCIM Provisioning API for SAML based SSO.
export interface ISCIMService {
  // Get the current API version of this service.
  // Required permissions:
  // - None (authenticated only)
  GetAPIVersion: (req?: arangodb_cloud_common_v1_Empty) => Promise<arangodb_cloud_common_v1_Version>;
  
  // List the users as per SCIM API requirements
  // For an organization identifier inferred via API Key
  // Required permissions:
  // - scim.user.list on the organization
  ListUsers: (req: ListUsersRequest) => Promise<ListUserResponse>;
  
  // Get the organization member information based on user identifier as per SCIM API requirements
  // Required permissions:
  // - scim.user.get on the organization
  GetUser: (req: arangodb_cloud_common_v1_IDOptions) => Promise<User>;
  
  // Invite the user to an organization
  // that is inferred from API key
  // Required permissions:
  // - scim.user.add on the organization
  AddUser: (req: User) => Promise<User>;
  
  // Update the user information
  // Required permissions:
  // - scim.user.update on the organization
  UpdateUser: (req: User) => Promise<User>;
  
  // Delete the user from an organization
  // Required permissions:
  // - scim.user.delete on the organization
  DeleteUser: (req: arangodb_cloud_common_v1_IDOptions) => Promise<void>;
}

// SCIMService is the API used to expose the SCIM Provisioning API for SAML based SSO.
export class SCIMService implements ISCIMService {
  // Get the current API version of this service.
  // Required permissions:
  // - None (authenticated only)
  async GetAPIVersion(req?: arangodb_cloud_common_v1_Empty): Promise<arangodb_cloud_common_v1_Version> {
    const path = `/api/scim/v1/api-version`;
    const url = path + api.queryString(req, []);
    return api.get(url, undefined);
  }
  
  // List the users as per SCIM API requirements
  // For an organization identifier inferred via API Key
  // Required permissions:
  // - scim.user.list on the organization
  async ListUsers(req: ListUsersRequest): Promise<ListUserResponse> {
    const path = `/api/scim/v1/Users`;
    const url = path + api.queryString(req, []);
    return api.get(url, undefined);
  }
  
  // Get the organization member information based on user identifier as per SCIM API requirements
  // Required permissions:
  // - scim.user.get on the organization
  async GetUser(req: arangodb_cloud_common_v1_IDOptions): Promise<User> {
    const path = `/api/scim/v1/Users/${encodeURIComponent(req.id || '')}`;
    const url = path + api.queryString(req, [`id`]);
    return api.get(url, undefined);
  }
  
  // Invite the user to an organization
  // that is inferred from API key
  // Required permissions:
  // - scim.user.add on the organization
  async AddUser(req: User): Promise<User> {
    const url = `/api/scim/v1/Users`;
    return api.post(url, req);
  }
  
  // Update the user information
  // Required permissions:
  // - scim.user.update on the organization
  async UpdateUser(req: User): Promise<User> {
    const url = `/api/scim/v1/Users/${encodeURIComponent(req.id || '')}`;
    return api.put(url, req);
  }
  
  // Delete the user from an organization
  // Required permissions:
  // - scim.user.delete on the organization
  async DeleteUser(req: arangodb_cloud_common_v1_IDOptions): Promise<void> {
    const path = `/api/scim/v1/Users/${encodeURIComponent(req.id || '')}`;
    const url = path + api.queryString(req, [`id`]);
    return api.delete(url, undefined);
  }
}
