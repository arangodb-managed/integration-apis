//
// This file is AUTO-GENERATED by protoc-gen-ts.
// Do not modify it manually.
///
import api from '../../api'
import * as googleTypes from '../../googleTypes'
import { Empty as arangodb_cloud_common_v1_Empty } from '../../common/v1/common'
import { Version as arangodb_cloud_common_v1_Version } from '../../common/v1/common'

// File: auth/v1/auth.proto
// Package: arangodb.cloud.auth.v1

// Request arguments for Authorize
export interface AuthorizeRequest {
  // Resource identifier, example (notebook id)
  // string
  resource_id?: string;
  
  // Resource Type is the kind of resource
  // string
  resource_type?: string;
  
  // Endpoint of a resource
  // string
  callback_url?: string;
}

// AuthService is the API used to expose the authorize end point for JWT based authorization
export interface IAuthService {
  // Get the current API version of this service.
  // Required permissions:
  // - None (authenticated only)
  GetAPIVersion: (req?: arangodb_cloud_common_v1_Empty) => Promise<arangodb_cloud_common_v1_Version>;
  
  // Verify the current user based on JWT token provided in the request header
  // Verify if the resource URI in request is allowed for a given user
  // If the permission is allowed,
  // Set cookie (arango_graph_[env]]) in response for resource URL
  // Redirect user to callback_url in the request
  // Required permissions:
  // - None (since the subject is always the authenticated user).
  Authorize: (req: AuthorizeRequest) => Promise<void>;
  
  // Logout the user from auth dashboard by deleting the cookie
  // - None (since the subject is always the authenticated user).
  Logout: (req?: arangodb_cloud_common_v1_Empty) => Promise<void>;
}

// AuthService is the API used to expose the authorize end point for JWT based authorization
export class AuthService implements IAuthService {
  // Get the current API version of this service.
  // Required permissions:
  // - None (authenticated only)
  async GetAPIVersion(req?: arangodb_cloud_common_v1_Empty): Promise<arangodb_cloud_common_v1_Version> {
    const path = `/api/auth/v1/api-version`;
    const url = path + api.queryString(req, []);
    return api.get(url, undefined);
  }
  
  // Verify the current user based on JWT token provided in the request header
  // Verify if the resource URI in request is allowed for a given user
  // If the permission is allowed,
  // Set cookie (arango_graph_[env]]) in response for resource URL
  // Redirect user to callback_url in the request
  // Required permissions:
  // - None (since the subject is always the authenticated user).
  async Authorize(req: AuthorizeRequest): Promise<void> {
    const path = `/api/auth/v1/authorize`;
    const url = path + api.queryString(req, []);
    return api.post(url, undefined);
  }
  
  // Logout the user from auth dashboard by deleting the cookie
  // - None (since the subject is always the authenticated user).
  async Logout(req?: arangodb_cloud_common_v1_Empty): Promise<void> {
    const path = `/api/auth/v1/logout`;
    const url = path + api.queryString(req, []);
    return api.get(url, undefined);
  }
}
