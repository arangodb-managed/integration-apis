// 
// DISCLAIMER
// 
// Copyright 2023 ArangoDB GmbH, Cologne, Germany
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Copyright holder is ArangoDB GmbH, Cologne, Germany
// 

syntax = "proto3";

package arangodb.cloud.ml.v1;

option go_package = "github.com/arangodb-managed/apis/ml/v1";

import "common/v1/common.proto";

import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "google/api/annotations.proto";

// MLService is the API used to configure ArangoML on ArangoGraph Insights Platform.
service MLService {
    // Get the current API version of this service.
    // Required permissions:
    // - None
    rpc GetAPIVersion(common.v1.Empty) returns (common.v1.Version) {
        option (google.api.http) = {
            get: "/api/ml/v1/api-version"
        };
    }
    
    // Get an existing MLServices resource for a given deployment (specified by the id). 
    // Required permissions:
    // - ml.mlservices.get
    rpc GetMLServices(common.v1.IDOptions) returns (MLServices) {
        option (google.api.http) = {
            get: "/api/ml/v1/mlservices/{id}"
        };
    }
    
    // Update an existing MLServices resource. If it does not exist, this will create a new one.
    // Pass the desired updated state of MLServices to this call.
    // Required permissions:
    // - ml.mlservices.update
    rpc UpdateMLServices(MLServices) returns (MLServices) {
        option (google.api.http) = {
            put: "/api/ml/v1/mlservices/{deployment_id}"
            body: "*"
        };
    }
}

// MLServices is a single resource which represents the state and configuration
// of ML Services (ArangoGraphML) for a deployment specified by deployment_id.
message MLServices {
    // Identifier of the deployment for this MLServices resource.
    // This is a ready-only value.
    string deployment_id = 1;
    // Set to true if ML services are enabled for this deployment.
    bool enabled = 2;
    // Status of the MLServices.
    // This is a read-only value.
    Status status = 100;
}

// Status of the MLServices.
// Note: All fields are read-only.
message Status {
    // Overall status of where the MLServices resource is in its lifecycle at a given time.
    // It will contain only one of the following values:
    // "Bootstrapping"  - ArangoDB Deployment is being bootstrapped with the required databases, schemas and data.
    // "Initialising"   - The services needed for ArangoGraphML are being installed.
    // "Running"        - ArangoGraphML is setup and running correctly.
    // "Error"          - Indicates that there was an error with setting up ArangoGraphML. Check `message` field for additional info.
    string phase = 1;
    // Supporting information about the phase of MLServices (such as error messages in case of failures).
    string message = 2;
    // The timestamp of when this status was last updated.
    google.protobuf.Timestamp last_updated_at = 3;

    // Status of each ArangoGraphML components/services.
    repeated ServiceStatus services = 4;
}

// Status of a single ArangoGraphML component.
message ServiceStatus {
    // Type of service.
    // Should be one of: [training|prediction|projects]
    string type = 1;
    // Set to true if the service is available.
    // Every service is always in ONLY ONE of the following states: (available|failed)
    bool available = 2;
    // Set to true if the service is in a failed state.
    // Every service is always in ONLY ONE of the following states: (available|failed)
    bool failed = 3;
    // Resource usage for this service.
    message Usage {
        // Last known memory usage in bytes
        int64 last_memory_usage = 1;
        // Last known CPU usage in vCPU units
        float last_cpu_usage = 2;
        // Last known memory limit in bytes
        int64 last_memory_limit = 3;
        // Last known CPU limit in vCPU units
        float last_cpu_limit = 4;
    }
    // Resource usage information for this service.
    Usage usage = 4;
    // Number of replicas running for this service.
    int32 replicas = 5;
}
