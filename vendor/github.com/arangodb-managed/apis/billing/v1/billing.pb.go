// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: billing.proto

package v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	v1 "github.com/arangodb-managed/apis/common/v1"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// An Invoice message describes a transaction for usage of ArangoGraph Insights Platform.
type Invoice struct {
	// System identifier of the invoice.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of this resource
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Identifier of the organization that is responsible for the payment of this invoice.
	OrganizationId string `protobuf:"bytes,3,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Name of the organization that is responsible for the payment of this invoice.
	OrganizationName string `protobuf:"bytes,4,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	// Identifier of the legal entity that is the sender of this invoice.
	EntityId string `protobuf:"bytes,5,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	// Name of the legal entity that is the sender of this invoice.
	EntityName string `protobuf:"bytes,6,opt,name=entity_name,json=entityName,proto3" json:"entity_name,omitempty"`
	// Invoice number (used by accounting)
	InvoiceNumber string `protobuf:"bytes,7,opt,name=invoice_number,json=invoiceNumber,proto3" json:"invoice_number,omitempty"`
	// The creation date of the invoice
	CreatedAt *types.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// If set, this invoice must be manually verified
	// before payment can be initiated.
	RequiresManualVerification bool `protobuf:"varint,11,opt,name=requires_manual_verification,json=requiresManualVerification,proto3" json:"requires_manual_verification,omitempty"`
	// The last update date of the invoice.
	// This applies to 'specification' only and doesn't apply to status or payments changes.
	LastUpdatedAt *types.Timestamp `protobuf:"bytes,12,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	// The list of email addresses that this invoice (and payments related to this invoice) will be send to.
	EmailAddresses []string `protobuf:"bytes,13,rep,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
	// If set, this invoice is generated for an organization that is configured to use purchase orders.
	PurchaseOrderBased bool `protobuf:"varint,14,opt,name=purchase_order_based,json=purchaseOrderBased,proto3" json:"purchase_order_based,omitempty"`
	// The version of the invoice-builder who created the invoice.
	InvoiceBuilderVersion string `protobuf:"bytes,20,opt,name=invoice_builder_version,json=invoiceBuilderVersion,proto3" json:"invoice_builder_version,omitempty"`
	// All items of the invoice
	Items []*Invoice_Item `protobuf:"bytes,100,rep,name=items,proto3" json:"items,omitempty"`
	// Currency for all amounts
	CurrencyId string `protobuf:"bytes,110,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	// Sum all amount for all items (excluding VAT and sales tax)
	TotalAmountExclTaxes float32 `protobuf:"fixed32,111,opt,name=total_amount_excl_taxes,json=totalAmountExclTaxes,proto3" json:"total_amount_excl_taxes,omitempty"`
	// VAT amount for all items (applicable for Entity GmbH)
	TotalVat float32 `protobuf:"fixed32,112,opt,name=total_vat,json=totalVat,proto3" json:"total_vat,omitempty"`
	// If set, the VAT reverse charge rule is applied for this invoice.
	VatReverseCharge bool `protobuf:"varint,114,opt,name=vat_reverse_charge,json=vatReverseCharge,proto3" json:"vat_reverse_charge,omitempty"`
	// The VAT percentage used
	VatPercentageUsed float32 `protobuf:"fixed32,115,opt,name=vat_percentage_used,json=vatPercentageUsed,proto3" json:"vat_percentage_used,omitempty"`
	// Sales tax amount for all items (applicable for Entity Inc.)
	TotalSalesTax float32 `protobuf:"fixed32,116,opt,name=total_sales_tax,json=totalSalesTax,proto3" json:"total_sales_tax,omitempty"`
	// The sales tax percentage used
	SalesTaxPercentageUsed float32 `protobuf:"fixed32,117,opt,name=sales_tax_percentage_used,json=salesTaxPercentageUsed,proto3" json:"sales_tax_percentage_used,omitempty"`
	// Sum of total_amount_excl_taxes + total_vat + total_sales_tax.
	// This is the amount that the customer will be charged for.
	TotalAmountInclTaxes float32         `protobuf:"fixed32,113,opt,name=total_amount_incl_taxes,json=totalAmountInclTaxes,proto3" json:"total_amount_incl_taxes,omitempty"`
	Status               *Invoice_Status `protobuf:"bytes,200,opt,name=status,proto3" json:"status,omitempty"`
	// All payment attempts for this invoice, ordered by created_at.
	Payments             []*Invoice_Payment `protobuf:"bytes,201,rep,name=payments,proto3" json:"payments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Invoice) Reset()         { *m = Invoice{} }
func (m *Invoice) String() string { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()    {}
func (*Invoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{0}
}
func (m *Invoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice.Merge(m, src)
}
func (m *Invoice) XXX_Size() int {
	return m.Size()
}
func (m *Invoice) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice proto.InternalMessageInfo

func (m *Invoice) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Invoice) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Invoice) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *Invoice) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *Invoice) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *Invoice) GetEntityName() string {
	if m != nil {
		return m.EntityName
	}
	return ""
}

func (m *Invoice) GetInvoiceNumber() string {
	if m != nil {
		return m.InvoiceNumber
	}
	return ""
}

func (m *Invoice) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Invoice) GetRequiresManualVerification() bool {
	if m != nil {
		return m.RequiresManualVerification
	}
	return false
}

func (m *Invoice) GetLastUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.LastUpdatedAt
	}
	return nil
}

func (m *Invoice) GetEmailAddresses() []string {
	if m != nil {
		return m.EmailAddresses
	}
	return nil
}

func (m *Invoice) GetPurchaseOrderBased() bool {
	if m != nil {
		return m.PurchaseOrderBased
	}
	return false
}

func (m *Invoice) GetInvoiceBuilderVersion() string {
	if m != nil {
		return m.InvoiceBuilderVersion
	}
	return ""
}

func (m *Invoice) GetItems() []*Invoice_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Invoice) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

func (m *Invoice) GetTotalAmountExclTaxes() float32 {
	if m != nil {
		return m.TotalAmountExclTaxes
	}
	return 0
}

func (m *Invoice) GetTotalVat() float32 {
	if m != nil {
		return m.TotalVat
	}
	return 0
}

func (m *Invoice) GetVatReverseCharge() bool {
	if m != nil {
		return m.VatReverseCharge
	}
	return false
}

func (m *Invoice) GetVatPercentageUsed() float32 {
	if m != nil {
		return m.VatPercentageUsed
	}
	return 0
}

func (m *Invoice) GetTotalSalesTax() float32 {
	if m != nil {
		return m.TotalSalesTax
	}
	return 0
}

func (m *Invoice) GetSalesTaxPercentageUsed() float32 {
	if m != nil {
		return m.SalesTaxPercentageUsed
	}
	return 0
}

func (m *Invoice) GetTotalAmountInclTaxes() float32 {
	if m != nil {
		return m.TotalAmountInclTaxes
	}
	return 0
}

func (m *Invoice) GetStatus() *Invoice_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Invoice) GetPayments() []*Invoice_Payment {
	if m != nil {
		return m.Payments
	}
	return nil
}

// A single item of the invoice
type Invoice_Item struct {
	// Identifiers of the UsageItems that this item covers.
	UsageitemIds []string `protobuf:"bytes,4,rep,name=usageitem_ids,json=usageitemIds,proto3" json:"usageitem_ids,omitempty"`
	// Amount of money (ex VAT) for this item
	Amount float32 `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Human readable description of this item
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// If set, this invoice item is already prepaid
	IsPrepaid            bool     `protobuf:"varint,5,opt,name=is_prepaid,json=isPrepaid,proto3" json:"is_prepaid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Invoice_Item) Reset()         { *m = Invoice_Item{} }
func (m *Invoice_Item) String() string { return proto.CompactTextString(m) }
func (*Invoice_Item) ProtoMessage()    {}
func (*Invoice_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{0, 0}
}
func (m *Invoice_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invoice_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invoice_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invoice_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice_Item.Merge(m, src)
}
func (m *Invoice_Item) XXX_Size() int {
	return m.Size()
}
func (m *Invoice_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice_Item proto.InternalMessageInfo

func (m *Invoice_Item) GetUsageitemIds() []string {
	if m != nil {
		return m.UsageitemIds
	}
	return nil
}

func (m *Invoice_Item) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Invoice_Item) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Invoice_Item) GetIsPrepaid() bool {
	if m != nil {
		return m.IsPrepaid
	}
	return false
}

// Status of the invoice
type Invoice_Status struct {
	// If set, this invoice is still being processed.
	IsPending bool `protobuf:"varint,1,opt,name=is_pending,json=isPending,proto3" json:"is_pending,omitempty"`
	// If set, a successful payment has been made for this invoice.
	IsCompleted bool `protobuf:"varint,2,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	// If set, all payment attempts for this invoice have been rejected.
	IsRejected bool `protobuf:"varint,3,opt,name=is_rejected,json=isRejected,proto3" json:"is_rejected,omitempty"`
	// If set, this invoice has been verified manually.
	IsVerified bool `protobuf:"varint,4,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	// If set, this payment needs to be rebuild (by the invoice-builder service).
	// If set, is_completed & is_rejected must be false.
	NeedsRebuild bool `protobuf:"varint,5,opt,name=needs_rebuild,json=needsRebuild,proto3" json:"needs_rebuild,omitempty"`
	// The timestamp of succesfull completion of the payment.
	// This field equals the completed_at field of the last payment if
	// that payment succeeded, nil otherwise.
	CompletedAt *types.Timestamp `protobuf:"bytes,10,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// The timestamp of rejected completion of the payment.
	// This field equals the rejected_at field of the last payment if
	// that payment failed, nil otherwise.
	RejectedAt *types.Timestamp `protobuf:"bytes,11,opt,name=rejected_at,json=rejectedAt,proto3" json:"rejected_at,omitempty"`
	// Human readable reason for the completion.
	CompletionReason string `protobuf:"bytes,12,opt,name=completion_reason,json=completionReason,proto3" json:"completion_reason,omitempty"`
	// Human readable reason for the rejection.
	RejectionReason string `protobuf:"bytes,13,opt,name=rejection_reason,json=rejectionReason,proto3" json:"rejection_reason,omitempty"`
	// Identifier of user who completed this invoice.
	CompletedBy string `protobuf:"bytes,14,opt,name=completed_by,json=completedBy,proto3" json:"completed_by,omitempty"`
	// Identifier of user who rejected this invoice.
	RejectedBy           string   `protobuf:"bytes,15,opt,name=rejected_by,json=rejectedBy,proto3" json:"rejected_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Invoice_Status) Reset()         { *m = Invoice_Status{} }
func (m *Invoice_Status) String() string { return proto.CompactTextString(m) }
func (*Invoice_Status) ProtoMessage()    {}
func (*Invoice_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{0, 1}
}
func (m *Invoice_Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invoice_Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invoice_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invoice_Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice_Status.Merge(m, src)
}
func (m *Invoice_Status) XXX_Size() int {
	return m.Size()
}
func (m *Invoice_Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice_Status proto.InternalMessageInfo

func (m *Invoice_Status) GetIsPending() bool {
	if m != nil {
		return m.IsPending
	}
	return false
}

func (m *Invoice_Status) GetIsCompleted() bool {
	if m != nil {
		return m.IsCompleted
	}
	return false
}

func (m *Invoice_Status) GetIsRejected() bool {
	if m != nil {
		return m.IsRejected
	}
	return false
}

func (m *Invoice_Status) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *Invoice_Status) GetNeedsRebuild() bool {
	if m != nil {
		return m.NeedsRebuild
	}
	return false
}

func (m *Invoice_Status) GetCompletedAt() *types.Timestamp {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

func (m *Invoice_Status) GetRejectedAt() *types.Timestamp {
	if m != nil {
		return m.RejectedAt
	}
	return nil
}

func (m *Invoice_Status) GetCompletionReason() string {
	if m != nil {
		return m.CompletionReason
	}
	return ""
}

func (m *Invoice_Status) GetRejectionReason() string {
	if m != nil {
		return m.RejectionReason
	}
	return ""
}

func (m *Invoice_Status) GetCompletedBy() string {
	if m != nil {
		return m.CompletedBy
	}
	return ""
}

func (m *Invoice_Status) GetRejectedBy() string {
	if m != nil {
		return m.RejectedBy
	}
	return ""
}

// Payment (attempt) of the invoice
type Invoice_Payment struct {
	// The timestamp of the start of the payment attempt.
	CreatedAt *types.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Identifier of the payment provider that is used for this payment.
	PaymentProviderId string `protobuf:"bytes,2,opt,name=payment_provider_id,json=paymentProviderId,proto3" json:"payment_provider_id,omitempty"`
	// Identifier of this payment (created by payment provider)
	PaymentId string `protobuf:"bytes,3,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	// Identifier of the payment method that is used for this payment.
	PaymentMethodId string `protobuf:"bytes,4,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
	// If set, this payment is still being processed.
	IsPending bool `protobuf:"varint,10,opt,name=is_pending,json=isPending,proto3" json:"is_pending,omitempty"`
	// If set, this payment has been payed for succesfully.
	IsCompleted bool `protobuf:"varint,11,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
	// If set, this payment has been rejected.
	IsRejected bool `protobuf:"varint,12,opt,name=is_rejected,json=isRejected,proto3" json:"is_rejected,omitempty"`
	// The timestamp of succesfull completion of the payment.
	CompletedAt *types.Timestamp `protobuf:"bytes,20,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// The timestamp of rejected completion of the payment.
	RejectedAt *types.Timestamp `protobuf:"bytes,21,opt,name=rejected_at,json=rejectedAt,proto3" json:"rejected_at,omitempty"`
	// Human readable reason for the rejection.
	RejectionReason string `protobuf:"bytes,22,opt,name=rejection_reason,json=rejectionReason,proto3" json:"rejection_reason,omitempty"`
	// If the currency of the payment method differs from the currency of the
	// invoice, the amount is converted from the currency of the invoice
	// to the currency of the payment method.
	// If such a converted was needed, this field is set to the currency
	// of the payment method.
	ConvertedCurrencyId string `protobuf:"bytes,30,opt,name=converted_currency_id,json=convertedCurrencyId,proto3" json:"converted_currency_id,omitempty"`
	// If the converted_currency_id is non-empty, this field it set to the
	// the amount (in converted currency) that the customer is charged for.
	// This is the total_amount_incl_taxes converted into the payment
	// method currency.
	ConvertedAmount float32 `protobuf:"fixed32,31,opt,name=converted_amount,json=convertedAmount,proto3" json:"converted_amount,omitempty"`
	// Amount in the invoice currency that was paid with this payment
	// If it's 0, it is assumed that this is a full amount of the invoice
	Amount               float32  `protobuf:"fixed32,32,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Invoice_Payment) Reset()         { *m = Invoice_Payment{} }
func (m *Invoice_Payment) String() string { return proto.CompactTextString(m) }
func (*Invoice_Payment) ProtoMessage()    {}
func (*Invoice_Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{0, 2}
}
func (m *Invoice_Payment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invoice_Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invoice_Payment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invoice_Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice_Payment.Merge(m, src)
}
func (m *Invoice_Payment) XXX_Size() int {
	return m.Size()
}
func (m *Invoice_Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice_Payment proto.InternalMessageInfo

func (m *Invoice_Payment) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Invoice_Payment) GetPaymentProviderId() string {
	if m != nil {
		return m.PaymentProviderId
	}
	return ""
}

func (m *Invoice_Payment) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

func (m *Invoice_Payment) GetPaymentMethodId() string {
	if m != nil {
		return m.PaymentMethodId
	}
	return ""
}

func (m *Invoice_Payment) GetIsPending() bool {
	if m != nil {
		return m.IsPending
	}
	return false
}

func (m *Invoice_Payment) GetIsCompleted() bool {
	if m != nil {
		return m.IsCompleted
	}
	return false
}

func (m *Invoice_Payment) GetIsRejected() bool {
	if m != nil {
		return m.IsRejected
	}
	return false
}

func (m *Invoice_Payment) GetCompletedAt() *types.Timestamp {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

func (m *Invoice_Payment) GetRejectedAt() *types.Timestamp {
	if m != nil {
		return m.RejectedAt
	}
	return nil
}

func (m *Invoice_Payment) GetRejectionReason() string {
	if m != nil {
		return m.RejectionReason
	}
	return ""
}

func (m *Invoice_Payment) GetConvertedCurrencyId() string {
	if m != nil {
		return m.ConvertedCurrencyId
	}
	return ""
}

func (m *Invoice_Payment) GetConvertedAmount() float32 {
	if m != nil {
		return m.ConvertedAmount
	}
	return 0
}

func (m *Invoice_Payment) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// List of Invoices.
type InvoiceList struct {
	Items                []*Invoice `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *InvoiceList) Reset()         { *m = InvoiceList{} }
func (m *InvoiceList) String() string { return proto.CompactTextString(m) }
func (*InvoiceList) ProtoMessage()    {}
func (*InvoiceList) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{1}
}
func (m *InvoiceList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvoiceList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvoiceList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvoiceList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceList.Merge(m, src)
}
func (m *InvoiceList) XXX_Size() int {
	return m.Size()
}
func (m *InvoiceList) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceList.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceList proto.InternalMessageInfo

func (m *InvoiceList) GetItems() []*Invoice {
	if m != nil {
		return m.Items
	}
	return nil
}

// Request arguments for ListInvoices
type ListInvoicesRequest struct {
	// Request invoices for the organization with this id.
	// This is a required field.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Request invoices that are created at or after this timestamp.
	// This is an optional field.
	From *types.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// Request invoices that are created before this timestamp.
	// This is an optional field.
	To *types.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	// Standard list options
	// This is an optional field.
	Options *v1.ListOptions `protobuf:"bytes,10,opt,name=options,proto3" json:"options,omitempty"`
	// Whether or not to include the usage item IDs on every Invoice_Item in the returned Invoices.
	// This is an optional field; usage item IDs are not included by default.
	IncludeUsageitemIds  bool     `protobuf:"varint,20,opt,name=include_usageitem_ids,json=includeUsageitemIds,proto3" json:"include_usageitem_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListInvoicesRequest) Reset()         { *m = ListInvoicesRequest{} }
func (m *ListInvoicesRequest) String() string { return proto.CompactTextString(m) }
func (*ListInvoicesRequest) ProtoMessage()    {}
func (*ListInvoicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{2}
}
func (m *ListInvoicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListInvoicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListInvoicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListInvoicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListInvoicesRequest.Merge(m, src)
}
func (m *ListInvoicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListInvoicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListInvoicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListInvoicesRequest proto.InternalMessageInfo

func (m *ListInvoicesRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *ListInvoicesRequest) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ListInvoicesRequest) GetTo() *types.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ListInvoicesRequest) GetOptions() *v1.ListOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ListInvoicesRequest) GetIncludeUsageitemIds() bool {
	if m != nil {
		return m.IncludeUsageitemIds
	}
	return false
}

// Request argument for GetPreliminaryInvoice
type GetPreliminaryInvoiceRequest struct {
	// Identifier of the organization
	// This is a required field.
	OrganizationId       string   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPreliminaryInvoiceRequest) Reset()         { *m = GetPreliminaryInvoiceRequest{} }
func (m *GetPreliminaryInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetPreliminaryInvoiceRequest) ProtoMessage()    {}
func (*GetPreliminaryInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{3}
}
func (m *GetPreliminaryInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPreliminaryInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPreliminaryInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPreliminaryInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPreliminaryInvoiceRequest.Merge(m, src)
}
func (m *GetPreliminaryInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPreliminaryInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPreliminaryInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPreliminaryInvoiceRequest proto.InternalMessageInfo

func (m *GetPreliminaryInvoiceRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

// Payment providers are services that handle payments.
type PaymentProvider struct {
	// System identifier of this payment provider.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the payment provider
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the payment provider
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Type of payment method supported by this provider
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentProvider) Reset()         { *m = PaymentProvider{} }
func (m *PaymentProvider) String() string { return proto.CompactTextString(m) }
func (*PaymentProvider) ProtoMessage()    {}
func (*PaymentProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{4}
}
func (m *PaymentProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentProvider.Merge(m, src)
}
func (m *PaymentProvider) XXX_Size() int {
	return m.Size()
}
func (m *PaymentProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentProvider.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentProvider proto.InternalMessageInfo

func (m *PaymentProvider) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentProvider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentProvider) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PaymentProvider) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// List of Payment providers
type PaymentProviderList struct {
	Items                []*PaymentProvider `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PaymentProviderList) Reset()         { *m = PaymentProviderList{} }
func (m *PaymentProviderList) String() string { return proto.CompactTextString(m) }
func (*PaymentProviderList) ProtoMessage()    {}
func (*PaymentProviderList) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{5}
}
func (m *PaymentProviderList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentProviderList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentProviderList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentProviderList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentProviderList.Merge(m, src)
}
func (m *PaymentProviderList) XXX_Size() int {
	return m.Size()
}
func (m *PaymentProviderList) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentProviderList.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentProviderList proto.InternalMessageInfo

func (m *PaymentProviderList) GetItems() []*PaymentProvider {
	if m != nil {
		return m.Items
	}
	return nil
}

// Request arguments for PreparePaymentMethod.
type PreparePaymentMethodRequest struct {
	// ID of the provider to prepare
	ProviderId string `protobuf:"bytes,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	// ID of the organization that will own the future payment method
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Currency for the future payment payment method
	CurrencyId           string   `protobuf:"bytes,3,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreparePaymentMethodRequest) Reset()         { *m = PreparePaymentMethodRequest{} }
func (m *PreparePaymentMethodRequest) String() string { return proto.CompactTextString(m) }
func (*PreparePaymentMethodRequest) ProtoMessage()    {}
func (*PreparePaymentMethodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{6}
}
func (m *PreparePaymentMethodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreparePaymentMethodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreparePaymentMethodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreparePaymentMethodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreparePaymentMethodRequest.Merge(m, src)
}
func (m *PreparePaymentMethodRequest) XXX_Size() int {
	return m.Size()
}
func (m *PreparePaymentMethodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PreparePaymentMethodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PreparePaymentMethodRequest proto.InternalMessageInfo

func (m *PreparePaymentMethodRequest) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *PreparePaymentMethodRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *PreparePaymentMethodRequest) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

// Response data for PreparePaymentMethod.
type PreparedPaymentMethod struct {
	// ID of the provider of the future payment method
	ProviderId string `protobuf:"bytes,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	// ID of the organization that will own the future payment method
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Currency for this payment method
	CurrencyId string `protobuf:"bytes,3,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	// Token (semantics depends on payment provider)
	Token string `protobuf:"bytes,11,opt,name=token,proto3" json:"token,omitempty"`
	// URL of custom script to load to create the payment method
	ScriptUrl string `protobuf:"bytes,12,opt,name=script_url,json=scriptUrl,proto3" json:"script_url,omitempty"`
	// Signature used to verify the consistency of the data in this message.
	Signature            string   `protobuf:"bytes,101,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreparedPaymentMethod) Reset()         { *m = PreparedPaymentMethod{} }
func (m *PreparedPaymentMethod) String() string { return proto.CompactTextString(m) }
func (*PreparedPaymentMethod) ProtoMessage()    {}
func (*PreparedPaymentMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{7}
}
func (m *PreparedPaymentMethod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreparedPaymentMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreparedPaymentMethod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreparedPaymentMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreparedPaymentMethod.Merge(m, src)
}
func (m *PreparedPaymentMethod) XXX_Size() int {
	return m.Size()
}
func (m *PreparedPaymentMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_PreparedPaymentMethod.DiscardUnknown(m)
}

var xxx_messageInfo_PreparedPaymentMethod proto.InternalMessageInfo

func (m *PreparedPaymentMethod) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *PreparedPaymentMethod) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *PreparedPaymentMethod) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

func (m *PreparedPaymentMethod) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PreparedPaymentMethod) GetScriptUrl() string {
	if m != nil {
		return m.ScriptUrl
	}
	return ""
}

func (m *PreparedPaymentMethod) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// Request arguments for CreatePaymentMethod
type CreatePaymentMethodRequest struct {
	// The result of PreparePaymentMethod.
	PreparedPaymentMethod *PreparedPaymentMethod `protobuf:"bytes,1,opt,name=prepared_payment_method,json=preparedPaymentMethod,proto3" json:"prepared_payment_method,omitempty"`
	// First name of owner of payment method
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// Last name of owner of payment method
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePaymentMethodRequest) Reset()         { *m = CreatePaymentMethodRequest{} }
func (m *CreatePaymentMethodRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePaymentMethodRequest) ProtoMessage()    {}
func (*CreatePaymentMethodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{8}
}
func (m *CreatePaymentMethodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePaymentMethodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePaymentMethodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePaymentMethodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePaymentMethodRequest.Merge(m, src)
}
func (m *CreatePaymentMethodRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePaymentMethodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePaymentMethodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePaymentMethodRequest proto.InternalMessageInfo

func (m *CreatePaymentMethodRequest) GetPreparedPaymentMethod() *PreparedPaymentMethod {
	if m != nil {
		return m.PreparedPaymentMethod
	}
	return nil
}

func (m *CreatePaymentMethodRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreatePaymentMethodRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

// Request arguments for ListPaymentProviders
type ListPaymentProvidersRequest struct {
	// Identifier of the organization for which payment providers are requested.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Optional common list options. (Context ID is ignored)
	Options *v1.ListOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// If set to true, also return include internal payment providers, for whom users can't create payment methods.
	IncludeInternal      bool     `protobuf:"varint,3,opt,name=include_internal,json=includeInternal,proto3" json:"include_internal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPaymentProvidersRequest) Reset()         { *m = ListPaymentProvidersRequest{} }
func (m *ListPaymentProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*ListPaymentProvidersRequest) ProtoMessage()    {}
func (*ListPaymentProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{9}
}
func (m *ListPaymentProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPaymentProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPaymentProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPaymentProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPaymentProvidersRequest.Merge(m, src)
}
func (m *ListPaymentProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPaymentProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPaymentProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPaymentProvidersRequest proto.InternalMessageInfo

func (m *ListPaymentProvidersRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *ListPaymentProvidersRequest) GetOptions() *v1.ListOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *ListPaymentProvidersRequest) GetIncludeInternal() bool {
	if m != nil {
		return m.IncludeInternal
	}
	return false
}

// Payment methods are specific methods for paying at a specific payment provider
// such as a specific credit card.
type PaymentMethod struct {
	// System identifier of this payment method.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the payment method
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the payment method
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Identifier of the payment provider used for this payment method
	// This is a read-only field.
	PaymentProviderId string `protobuf:"bytes,4,opt,name=payment_provider_id,json=paymentProviderId,proto3" json:"payment_provider_id,omitempty"`
	// Identifier of the organization that owns this payment method
	// This is a read-only field.
	OrganizationId string `protobuf:"bytes,5,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Creation timestamp of this payment method
	// This is a read-only field.
	CreatedAt *types.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Deletion timestamp of this payment method
	// This is a read-only field.
	DeletedAt *types.Timestamp `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Set if the payment method is deleted.
	// This is a read-only field.
	IsDeleted bool `protobuf:"varint,12,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// If set, this timestamp specifies when the payment method is no longer valid.
	// If not set, there is no (known) end date for this payment method.
	ValidUntil *types.Timestamp `protobuf:"bytes,13,opt,name=valid_until,json=validUntil,proto3" json:"valid_until,omitempty"`
	// Token for this payment method, provided by the payment provider.
	// This is a read-only field.
	Token string `protobuf:"bytes,14,opt,name=token,proto3" json:"token,omitempty"`
	// Type of payment method
	Type string `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	// If set, this payment method is the default for its organization.
	// This is a read-only field.
	IsDefault bool `protobuf:"varint,16,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	// Currency for invoices using this payment method
	CurrencyId           string                        `protobuf:"bytes,17,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	CreditCardInfo       *PaymentMethod_CreditCardInfo `protobuf:"bytes,101,opt,name=credit_card_info,json=creditCardInfo,proto3" json:"credit_card_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *PaymentMethod) Reset()         { *m = PaymentMethod{} }
func (m *PaymentMethod) String() string { return proto.CompactTextString(m) }
func (*PaymentMethod) ProtoMessage()    {}
func (*PaymentMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{10}
}
func (m *PaymentMethod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentMethod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethod.Merge(m, src)
}
func (m *PaymentMethod) XXX_Size() int {
	return m.Size()
}
func (m *PaymentMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethod.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethod proto.InternalMessageInfo

func (m *PaymentMethod) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentMethod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentMethod) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PaymentMethod) GetPaymentProviderId() string {
	if m != nil {
		return m.PaymentProviderId
	}
	return ""
}

func (m *PaymentMethod) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *PaymentMethod) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PaymentMethod) GetDeletedAt() *types.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *PaymentMethod) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *PaymentMethod) GetValidUntil() *types.Timestamp {
	if m != nil {
		return m.ValidUntil
	}
	return nil
}

func (m *PaymentMethod) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PaymentMethod) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PaymentMethod) GetIsDefault() bool {
	if m != nil {
		return m.IsDefault
	}
	return false
}

func (m *PaymentMethod) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

func (m *PaymentMethod) GetCreditCardInfo() *PaymentMethod_CreditCardInfo {
	if m != nil {
		return m.CreditCardInfo
	}
	return nil
}

// Information of the creditcard.
// Only set when type == "creditcard"
type PaymentMethod_CreditCardInfo struct {
	// Last 4 digits of the CC number.
	LastDigits string `protobuf:"bytes,1,opt,name=last_digits,json=lastDigits,proto3" json:"last_digits,omitempty"`
	// Type of creditcard
	CardType             string   `protobuf:"bytes,2,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentMethod_CreditCardInfo) Reset()         { *m = PaymentMethod_CreditCardInfo{} }
func (m *PaymentMethod_CreditCardInfo) String() string { return proto.CompactTextString(m) }
func (*PaymentMethod_CreditCardInfo) ProtoMessage()    {}
func (*PaymentMethod_CreditCardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{10, 0}
}
func (m *PaymentMethod_CreditCardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentMethod_CreditCardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentMethod_CreditCardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentMethod_CreditCardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethod_CreditCardInfo.Merge(m, src)
}
func (m *PaymentMethod_CreditCardInfo) XXX_Size() int {
	return m.Size()
}
func (m *PaymentMethod_CreditCardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethod_CreditCardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethod_CreditCardInfo proto.InternalMessageInfo

func (m *PaymentMethod_CreditCardInfo) GetLastDigits() string {
	if m != nil {
		return m.LastDigits
	}
	return ""
}

func (m *PaymentMethod_CreditCardInfo) GetCardType() string {
	if m != nil {
		return m.CardType
	}
	return ""
}

// List of Payment methods
type PaymentMethodList struct {
	Items                []*PaymentMethod `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PaymentMethodList) Reset()         { *m = PaymentMethodList{} }
func (m *PaymentMethodList) String() string { return proto.CompactTextString(m) }
func (*PaymentMethodList) ProtoMessage()    {}
func (*PaymentMethodList) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{11}
}
func (m *PaymentMethodList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentMethodList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentMethodList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentMethodList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentMethodList.Merge(m, src)
}
func (m *PaymentMethodList) XXX_Size() int {
	return m.Size()
}
func (m *PaymentMethodList) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentMethodList.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentMethodList proto.InternalMessageInfo

func (m *PaymentMethodList) GetItems() []*PaymentMethod {
	if m != nil {
		return m.Items
	}
	return nil
}

// Request arguments for ListPaymentMethods
type ListPaymentMethodsRequest struct {
	// Identifier of the organization for which payment methods are requested.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Optional common list options. (Context ID is ignored)
	Options              *v1.ListOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListPaymentMethodsRequest) Reset()         { *m = ListPaymentMethodsRequest{} }
func (m *ListPaymentMethodsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPaymentMethodsRequest) ProtoMessage()    {}
func (*ListPaymentMethodsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{12}
}
func (m *ListPaymentMethodsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPaymentMethodsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPaymentMethodsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPaymentMethodsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPaymentMethodsRequest.Merge(m, src)
}
func (m *ListPaymentMethodsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPaymentMethodsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPaymentMethodsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPaymentMethodsRequest proto.InternalMessageInfo

func (m *ListPaymentMethodsRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *ListPaymentMethodsRequest) GetOptions() *v1.ListOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

// Request argument for SetDefaultPaymentMethod
type SetDefaultPaymentMethodRequest struct {
	// Identifier of the organization for which the default payment method will be set.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Identifier of the new default payment method for the organization.
	PaymentMethodId      string   `protobuf:"bytes,2,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetDefaultPaymentMethodRequest) Reset()         { *m = SetDefaultPaymentMethodRequest{} }
func (m *SetDefaultPaymentMethodRequest) String() string { return proto.CompactTextString(m) }
func (*SetDefaultPaymentMethodRequest) ProtoMessage()    {}
func (*SetDefaultPaymentMethodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{13}
}
func (m *SetDefaultPaymentMethodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDefaultPaymentMethodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDefaultPaymentMethodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDefaultPaymentMethodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDefaultPaymentMethodRequest.Merge(m, src)
}
func (m *SetDefaultPaymentMethodRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetDefaultPaymentMethodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDefaultPaymentMethodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDefaultPaymentMethodRequest proto.InternalMessageInfo

func (m *SetDefaultPaymentMethodRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *SetDefaultPaymentMethodRequest) GetPaymentMethodId() string {
	if m != nil {
		return m.PaymentMethodId
	}
	return ""
}

// Address of organization
type Address struct {
	// Address lines
	Address []string `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
	// ZIP code (if any)
	Zipcode string `protobuf:"bytes,2,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	// City
	City string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	// State
	// For US, this must be an ISO 3166-2 2-letter state code
	// See https://en.wikipedia.org/wiki/List_of_U.S._state_abbreviations
	State string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// Country code
	CountryCode          string   `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{14}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Address) GetZipcode() string {
	if m != nil {
		return m.Zipcode
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

// Billing specific organization flags
type OrganizationBillingFlags struct {
	// If set, this organization is allowed to list invoices.
	IsAllowedToListInvoices bool `protobuf:"varint,1,opt,name=is_allowed_to_list_invoices,json=isAllowedToListInvoices,proto3" json:"is_allowed_to_list_invoices,omitempty"`
	// If set, this organization is allowed to create/list/update payment methods.
	IsAllowedToAccessPaymentMethods bool     `protobuf:"varint,2,opt,name=is_allowed_to_access_payment_methods,json=isAllowedToAccessPaymentMethods,proto3" json:"is_allowed_to_access_payment_methods,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *OrganizationBillingFlags) Reset()         { *m = OrganizationBillingFlags{} }
func (m *OrganizationBillingFlags) String() string { return proto.CompactTextString(m) }
func (*OrganizationBillingFlags) ProtoMessage()    {}
func (*OrganizationBillingFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{15}
}
func (m *OrganizationBillingFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrganizationBillingFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrganizationBillingFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrganizationBillingFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrganizationBillingFlags.Merge(m, src)
}
func (m *OrganizationBillingFlags) XXX_Size() int {
	return m.Size()
}
func (m *OrganizationBillingFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_OrganizationBillingFlags.DiscardUnknown(m)
}

var xxx_messageInfo_OrganizationBillingFlags proto.InternalMessageInfo

func (m *OrganizationBillingFlags) GetIsAllowedToListInvoices() bool {
	if m != nil {
		return m.IsAllowedToListInvoices
	}
	return false
}

func (m *OrganizationBillingFlags) GetIsAllowedToAccessPaymentMethods() bool {
	if m != nil {
		return m.IsAllowedToAccessPaymentMethods
	}
	return false
}

// Billing configuration for an organization
type BillingConfig struct {
	// Address of the organization
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// EU VAT number of the organization (if any)
	VatNumber string `protobuf:"bytes,2,opt,name=vat_number,json=vatNumber,proto3" json:"vat_number,omitempty"`
	// Email address(es) to send emails related to billing (mostly invoices) to.
	EmailAddresses []string `protobuf:"bytes,3,rep,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
	// US sales tax number of the organization (if any)
	UsTaxNumber string `protobuf:"bytes,4,opt,name=us_tax_number,json=usTaxNumber,proto3" json:"us_tax_number,omitempty"`
	// Legal name of the organization
	CompanyLegalName     string   `protobuf:"bytes,5,opt,name=company_legal_name,json=companyLegalName,proto3" json:"company_legal_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BillingConfig) Reset()         { *m = BillingConfig{} }
func (m *BillingConfig) String() string { return proto.CompactTextString(m) }
func (*BillingConfig) ProtoMessage()    {}
func (*BillingConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{16}
}
func (m *BillingConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillingConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillingConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingConfig.Merge(m, src)
}
func (m *BillingConfig) XXX_Size() int {
	return m.Size()
}
func (m *BillingConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BillingConfig proto.InternalMessageInfo

func (m *BillingConfig) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *BillingConfig) GetVatNumber() string {
	if m != nil {
		return m.VatNumber
	}
	return ""
}

func (m *BillingConfig) GetEmailAddresses() []string {
	if m != nil {
		return m.EmailAddresses
	}
	return nil
}

func (m *BillingConfig) GetUsTaxNumber() string {
	if m != nil {
		return m.UsTaxNumber
	}
	return ""
}

func (m *BillingConfig) GetCompanyLegalName() string {
	if m != nil {
		return m.CompanyLegalName
	}
	return ""
}

// Request arguments for SetBillingConfig.
type SetBillingConfigRequest struct {
	// Identifier of the organization for which billing address is to be set.
	OrganizationId string `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Billing configuration to set.
	Config               *BillingConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SetBillingConfigRequest) Reset()         { *m = SetBillingConfigRequest{} }
func (m *SetBillingConfigRequest) String() string { return proto.CompactTextString(m) }
func (*SetBillingConfigRequest) ProtoMessage()    {}
func (*SetBillingConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{17}
}
func (m *SetBillingConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetBillingConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetBillingConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetBillingConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetBillingConfigRequest.Merge(m, src)
}
func (m *SetBillingConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetBillingConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetBillingConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetBillingConfigRequest proto.InternalMessageInfo

func (m *SetBillingConfigRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *SetBillingConfigRequest) GetConfig() *BillingConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type PDFDocument struct {
	// Content of the document
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Filename of the document
	Filename             string   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PDFDocument) Reset()         { *m = PDFDocument{} }
func (m *PDFDocument) String() string { return proto.CompactTextString(m) }
func (*PDFDocument) ProtoMessage()    {}
func (*PDFDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{18}
}
func (m *PDFDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PDFDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PDFDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PDFDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFDocument.Merge(m, src)
}
func (m *PDFDocument) XXX_Size() int {
	return m.Size()
}
func (m *PDFDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFDocument.DiscardUnknown(m)
}

var xxx_messageInfo_PDFDocument proto.InternalMessageInfo

func (m *PDFDocument) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *PDFDocument) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type GetAvailableCreditsRequest struct {
	OrganizationId       string   `protobuf:"bytes,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAvailableCreditsRequest) Reset()         { *m = GetAvailableCreditsRequest{} }
func (m *GetAvailableCreditsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAvailableCreditsRequest) ProtoMessage()    {}
func (*GetAvailableCreditsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{19}
}
func (m *GetAvailableCreditsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAvailableCreditsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAvailableCreditsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAvailableCreditsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAvailableCreditsRequest.Merge(m, src)
}
func (m *GetAvailableCreditsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAvailableCreditsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAvailableCreditsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAvailableCreditsRequest proto.InternalMessageInfo

func (m *GetAvailableCreditsRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

type AvailableCredits struct {
	// contains information about credits in different currencies
	Credits              []*AvailableCredits_CreditCurrencyAmount `protobuf:"bytes,1,rep,name=credits,proto3" json:"credits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *AvailableCredits) Reset()         { *m = AvailableCredits{} }
func (m *AvailableCredits) String() string { return proto.CompactTextString(m) }
func (*AvailableCredits) ProtoMessage()    {}
func (*AvailableCredits) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{20}
}
func (m *AvailableCredits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvailableCredits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AvailableCredits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AvailableCredits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableCredits.Merge(m, src)
}
func (m *AvailableCredits) XXX_Size() int {
	return m.Size()
}
func (m *AvailableCredits) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableCredits.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableCredits proto.InternalMessageInfo

func (m *AvailableCredits) GetCredits() []*AvailableCredits_CreditCurrencyAmount {
	if m != nil {
		return m.Credits
	}
	return nil
}

// information abou Credit in a given currency
type AvailableCredits_CreditCurrencyAmount struct {
	// amount of credit
	Amount float32 `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// identifier of the currency for this credit
	CurrencyId           string   `protobuf:"bytes,2,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AvailableCredits_CreditCurrencyAmount) Reset()         { *m = AvailableCredits_CreditCurrencyAmount{} }
func (m *AvailableCredits_CreditCurrencyAmount) String() string { return proto.CompactTextString(m) }
func (*AvailableCredits_CreditCurrencyAmount) ProtoMessage()    {}
func (*AvailableCredits_CreditCurrencyAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{20, 0}
}
func (m *AvailableCredits_CreditCurrencyAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvailableCredits_CreditCurrencyAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AvailableCredits_CreditCurrencyAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AvailableCredits_CreditCurrencyAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailableCredits_CreditCurrencyAmount.Merge(m, src)
}
func (m *AvailableCredits_CreditCurrencyAmount) XXX_Size() int {
	return m.Size()
}
func (m *AvailableCredits_CreditCurrencyAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailableCredits_CreditCurrencyAmount.DiscardUnknown(m)
}

var xxx_messageInfo_AvailableCredits_CreditCurrencyAmount proto.InternalMessageInfo

func (m *AvailableCredits_CreditCurrencyAmount) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *AvailableCredits_CreditCurrencyAmount) GetCurrencyId() string {
	if m != nil {
		return m.CurrencyId
	}
	return ""
}

func init() {
	proto.RegisterType((*Invoice)(nil), "arangodb.cloud.billing.v1.Invoice")
	proto.RegisterType((*Invoice_Item)(nil), "arangodb.cloud.billing.v1.Invoice.Item")
	proto.RegisterType((*Invoice_Status)(nil), "arangodb.cloud.billing.v1.Invoice.Status")
	proto.RegisterType((*Invoice_Payment)(nil), "arangodb.cloud.billing.v1.Invoice.Payment")
	proto.RegisterType((*InvoiceList)(nil), "arangodb.cloud.billing.v1.InvoiceList")
	proto.RegisterType((*ListInvoicesRequest)(nil), "arangodb.cloud.billing.v1.ListInvoicesRequest")
	proto.RegisterType((*GetPreliminaryInvoiceRequest)(nil), "arangodb.cloud.billing.v1.GetPreliminaryInvoiceRequest")
	proto.RegisterType((*PaymentProvider)(nil), "arangodb.cloud.billing.v1.PaymentProvider")
	proto.RegisterType((*PaymentProviderList)(nil), "arangodb.cloud.billing.v1.PaymentProviderList")
	proto.RegisterType((*PreparePaymentMethodRequest)(nil), "arangodb.cloud.billing.v1.PreparePaymentMethodRequest")
	proto.RegisterType((*PreparedPaymentMethod)(nil), "arangodb.cloud.billing.v1.PreparedPaymentMethod")
	proto.RegisterType((*CreatePaymentMethodRequest)(nil), "arangodb.cloud.billing.v1.CreatePaymentMethodRequest")
	proto.RegisterType((*ListPaymentProvidersRequest)(nil), "arangodb.cloud.billing.v1.ListPaymentProvidersRequest")
	proto.RegisterType((*PaymentMethod)(nil), "arangodb.cloud.billing.v1.PaymentMethod")
	proto.RegisterType((*PaymentMethod_CreditCardInfo)(nil), "arangodb.cloud.billing.v1.PaymentMethod.CreditCardInfo")
	proto.RegisterType((*PaymentMethodList)(nil), "arangodb.cloud.billing.v1.PaymentMethodList")
	proto.RegisterType((*ListPaymentMethodsRequest)(nil), "arangodb.cloud.billing.v1.ListPaymentMethodsRequest")
	proto.RegisterType((*SetDefaultPaymentMethodRequest)(nil), "arangodb.cloud.billing.v1.SetDefaultPaymentMethodRequest")
	proto.RegisterType((*Address)(nil), "arangodb.cloud.billing.v1.Address")
	proto.RegisterType((*OrganizationBillingFlags)(nil), "arangodb.cloud.billing.v1.OrganizationBillingFlags")
	proto.RegisterType((*BillingConfig)(nil), "arangodb.cloud.billing.v1.BillingConfig")
	proto.RegisterType((*SetBillingConfigRequest)(nil), "arangodb.cloud.billing.v1.SetBillingConfigRequest")
	proto.RegisterType((*PDFDocument)(nil), "arangodb.cloud.billing.v1.PDFDocument")
	proto.RegisterType((*GetAvailableCreditsRequest)(nil), "arangodb.cloud.billing.v1.GetAvailableCreditsRequest")
	proto.RegisterType((*AvailableCredits)(nil), "arangodb.cloud.billing.v1.AvailableCredits")
	proto.RegisterType((*AvailableCredits_CreditCurrencyAmount)(nil), "arangodb.cloud.billing.v1.AvailableCredits.CreditCurrencyAmount")
}

func init() { proto.RegisterFile("billing.proto", fileDescriptor_958db8ba491a6b57) }

var fileDescriptor_958db8ba491a6b57 = []byte{
	// 2656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0xcb, 0x6f, 0x1c, 0xc7,
	0xf1, 0xfe, 0xcd, 0x92, 0x14, 0xb9, 0xb5, 0x7c, 0xa9, 0x49, 0x49, 0xe3, 0x95, 0x44, 0x51, 0xa3,
	0x9f, 0x6c, 0x4a, 0xb2, 0x76, 0x2d, 0x39, 0x96, 0x2d, 0xdb, 0xb2, 0xc4, 0x87, 0x4c, 0x2c, 0x60,
	0x5b, 0xc4, 0xea, 0x11, 0xc0, 0x97, 0x41, 0x73, 0xa6, 0xb9, 0xea, 0x78, 0x76, 0x66, 0x3d, 0xdd,
	0xb3, 0xd1, 0x3a, 0xf1, 0x25, 0x70, 0x10, 0x27, 0x87, 0xe4, 0xe0, 0x1c, 0x92, 0x43, 0x0e, 0x39,
	0x19, 0xb9, 0x05, 0x41, 0x2e, 0x39, 0x39, 0x48, 0x80, 0xc4, 0xbe, 0x05, 0x08, 0x72, 0x0d, 0x02,
	0x27, 0x40, 0xfe, 0x8d, 0xa0, 0xab, 0x7b, 0x96, 0xb3, 0xcb, 0xd9, 0x97, 0x65, 0xf8, 0xb6, 0x53,
	0x55, 0xdd, 0xf3, 0xcd, 0xd7, 0xd5, 0x5f, 0x75, 0x35, 0x09, 0x0b, 0xfb, 0x3c, 0x08, 0x78, 0xd8,
	0xa8, 0xb4, 0xe2, 0x48, 0x46, 0xe4, 0x19, 0x1a, 0xd3, 0xb0, 0x11, 0xf9, 0xfb, 0x15, 0x2f, 0x88,
	0x12, 0xbf, 0x92, 0x7a, 0xdb, 0xd7, 0xca, 0x27, 0xbd, 0xa8, 0xd9, 0x8c, 0xc2, 0x6a, 0xfb, 0x5a,
	0x55, 0xff, 0xd2, 0x43, 0xca, 0xaf, 0x35, 0xb8, 0x7c, 0x9c, 0xec, 0x57, 0xbc, 0xa8, 0x59, 0x6d,
	0x44, 0x01, 0x0d, 0x1b, 0x55, 0x74, 0xec, 0x27, 0x07, 0xd5, 0x96, 0xec, 0xb4, 0x98, 0xa8, 0x4a,
	0xde, 0x64, 0x42, 0xd2, 0x66, 0xeb, 0xf0, 0x97, 0x19, 0x7c, 0xa6, 0x11, 0x45, 0x8d, 0x80, 0x55,
	0x69, 0x8b, 0x57, 0x69, 0x18, 0x46, 0x92, 0x4a, 0x1e, 0x85, 0x42, 0x7b, 0x9d, 0x1f, 0x13, 0x98,
	0xad, 0x85, 0xed, 0x88, 0x7b, 0x8c, 0x2c, 0x42, 0x81, 0xfb, 0xb6, 0xb5, 0x6e, 0x6d, 0x14, 0xeb,
	0x05, 0xee, 0x93, 0x65, 0x98, 0x4a, 0xe2, 0xc0, 0x2e, 0xa0, 0x41, 0xfd, 0x24, 0xcf, 0xc1, 0x52,
	0x14, 0x37, 0x68, 0xc8, 0x3f, 0xc0, 0x49, 0x5c, 0xee, 0xdb, 0x53, 0xe8, 0x5d, 0xcc, 0x9a, 0x6b,
	0x3e, 0xb9, 0x02, 0xc7, 0x7b, 0x02, 0x43, 0xda, 0x64, 0xf6, 0x34, 0x86, 0x2e, 0x67, 0x1d, 0xef,
	0xd0, 0x26, 0x23, 0xa7, 0xa1, 0xc8, 0x42, 0xc9, 0x65, 0x47, 0xcd, 0x37, 0x83, 0x41, 0x73, 0xda,
	0x50, 0xf3, 0xc9, 0x39, 0x28, 0x19, 0x27, 0xce, 0x71, 0x0c, 0xdd, 0xa0, 0x4d, 0x38, 0xfa, 0x22,
	0x2c, 0x72, 0xfd, 0x01, 0x6e, 0x98, 0x34, 0xf7, 0x59, 0x6c, 0xcf, 0x62, 0xcc, 0x82, 0xb1, 0xbe,
	0x83, 0x46, 0x72, 0x13, 0xc0, 0x8b, 0x19, 0x95, 0xcc, 0x77, 0xa9, 0xb4, 0x61, 0xdd, 0xda, 0x28,
	0x5d, 0x2f, 0x57, 0x34, 0x37, 0x95, 0x94, 0xcd, 0xca, 0x83, 0x94, 0xbc, 0x7a, 0xd1, 0x44, 0x6f,
	0x4a, 0x72, 0x07, 0xce, 0xc4, 0xec, 0xfd, 0x84, 0xc7, 0x4c, 0xb8, 0x4d, 0x1a, 0x26, 0x34, 0x70,
	0xdb, 0x2c, 0xe6, 0x07, 0xdc, 0xc3, 0x6f, 0xb0, 0x4b, 0xeb, 0xd6, 0xc6, 0x5c, 0xbd, 0x9c, 0xc6,
	0xbc, 0x8d, 0x21, 0x8f, 0x32, 0x11, 0x64, 0x0b, 0x96, 0x02, 0x2a, 0xa4, 0x9b, 0xb4, 0xfc, 0x14,
	0xc1, 0xfc, 0x48, 0x04, 0x0b, 0x6a, 0xc8, 0x43, 0x3d, 0x62, 0x53, 0x2a, 0xee, 0x59, 0x93, 0xf2,
	0xc0, 0xa5, 0xbe, 0x1f, 0x33, 0x21, 0x98, 0xb0, 0x17, 0xd6, 0xa7, 0x14, 0xf7, 0x68, 0xde, 0x4c,
	0xad, 0xe4, 0x05, 0x58, 0x6d, 0x25, 0xb1, 0xf7, 0x98, 0x0a, 0xe6, 0x46, 0xb1, 0xcf, 0x62, 0x77,
	0x9f, 0x0a, 0xe6, 0xdb, 0x8b, 0x08, 0x93, 0xa4, 0xbe, 0x7b, 0xca, 0xb5, 0xa5, 0x3c, 0xe4, 0x06,
	0x9c, 0x4a, 0x29, 0xdc, 0x4f, 0x78, 0xa0, 0x86, 0xb4, 0x59, 0x2c, 0xd4, 0xb7, 0xad, 0x22, 0x97,
	0x27, 0x8c, 0x7b, 0x4b, 0x7b, 0x1f, 0x69, 0x27, 0xb9, 0x05, 0x33, 0x5c, 0xb2, 0xa6, 0xb0, 0xfd,
	0xf5, 0xa9, 0x8d, 0xd2, 0xf5, 0xe7, 0x2a, 0x03, 0x53, 0xbb, 0x62, 0x72, 0xac, 0x52, 0x93, 0xac,
	0x59, 0xd7, 0xa3, 0xd4, 0xd2, 0x7a, 0x49, 0x1c, 0xb3, 0xd0, 0xc3, 0x95, 0x0f, 0xf5, 0xd2, 0xa6,
	0xa6, 0x9a, 0x4f, 0x5e, 0x82, 0x53, 0x32, 0x92, 0x34, 0x70, 0x69, 0x33, 0x4a, 0x42, 0xe9, 0xb2,
	0x27, 0x5e, 0xe0, 0x4a, 0xfa, 0x84, 0x09, 0x3b, 0x5a, 0xb7, 0x36, 0x0a, 0xf5, 0x55, 0x74, 0x6f,
	0xa2, 0xf7, 0xee, 0x13, 0x2f, 0x78, 0xa0, 0x7c, 0x2a, 0x9f, 0xf4, 0xb0, 0x36, 0x95, 0x76, 0x0b,
	0x03, 0xe7, 0xd0, 0xf0, 0x88, 0x4a, 0xf2, 0x3c, 0x90, 0x36, 0x95, 0x6e, 0xcc, 0xd4, 0x17, 0x32,
	0xd7, 0x7b, 0x4c, 0xe3, 0x06, 0xb3, 0x63, 0xe4, 0x66, 0xb9, 0x4d, 0x65, 0x5d, 0x3b, 0xb6, 0xd1,
	0x4e, 0x2a, 0xb0, 0xa2, 0xa2, 0x5b, 0x2c, 0xf6, 0x58, 0x28, 0x69, 0x83, 0xb9, 0x89, 0xa2, 0x52,
	0xe0, 0xa4, 0xc7, 0xdb, 0x54, 0xee, 0x75, 0x3d, 0x0f, 0x15, 0x93, 0xcf, 0xc2, 0x92, 0x7e, 0xb5,
	0xa0, 0x01, 0x13, 0x0a, 0xab, 0x2d, 0x31, 0x76, 0x01, 0xcd, 0xf7, 0x95, 0xf5, 0x01, 0x7d, 0x42,
	0x6e, 0xc2, 0x33, 0xdd, 0x88, 0x23, 0xb3, 0x27, 0x38, 0xe2, 0xa4, 0x30, 0xc1, 0x7d, 0xaf, 0xe8,
	0x27, 0x85, 0x87, 0x5d, 0x52, 0xde, 0x3f, 0x42, 0x4a, 0x2d, 0x4c, 0x49, 0xd9, 0x82, 0x63, 0x42,
	0x52, 0x99, 0x08, 0xfb, 0x73, 0x0b, 0x53, 0xef, 0xd2, 0x18, 0xab, 0x75, 0x1f, 0x47, 0xd4, 0xcd,
	0x48, 0xb2, 0x0b, 0x73, 0x2d, 0xda, 0x69, 0xb2, 0x50, 0x0a, 0xfb, 0x0b, 0x0b, 0xd7, 0xfc, 0xf2,
	0x18, 0xb3, 0xec, 0xe9, 0x31, 0xf5, 0xee, 0xe0, 0xf2, 0x47, 0x16, 0x4c, 0xab, 0x4c, 0x20, 0x17,
	0x60, 0x21, 0x11, 0xb4, 0xc1, 0x54, 0x42, 0xb8, 0xdc, 0x17, 0xf6, 0x34, 0xa6, 0xf4, 0x7c, 0xd7,
	0x58, 0xf3, 0x05, 0x39, 0x09, 0xc7, 0xf4, 0xb7, 0xa2, 0x14, 0x15, 0xea, 0xe6, 0x89, 0xac, 0x43,
	0xc9, 0x67, 0xc2, 0x8b, 0x79, 0x0b, 0xb7, 0xa1, 0x56, 0xa2, 0xac, 0x89, 0x9c, 0x05, 0xe0, 0xc2,
	0x6d, 0xc5, 0xac, 0x45, 0x8d, 0xb4, 0xcc, 0xd5, 0x8b, 0x5c, 0xec, 0x69, 0x43, 0xf9, 0x8b, 0x29,
	0x38, 0xa6, 0x3f, 0x31, 0x8d, 0x64, 0xa1, 0xcf, 0xc3, 0x06, 0x6a, 0xa0, 0x8e, 0xd4, 0x06, 0x72,
	0x1e, 0xe6, 0xb9, 0x70, 0xbd, 0xa8, 0xd9, 0x0a, 0x98, 0x64, 0x3e, 0x02, 0x99, 0xab, 0x97, 0xb8,
	0xd8, 0x4e, 0x4d, 0x2a, 0x9b, 0xb9, 0x70, 0x63, 0xf6, 0x1d, 0xe6, 0xa9, 0x88, 0x29, 0x8c, 0x00,
	0x2e, 0xea, 0xc6, 0x62, 0x02, 0xb4, 0x72, 0x30, 0x1f, 0xd5, 0x10, 0x03, 0x1e, 0x19, 0x8b, 0x22,
	0x23, 0x64, 0xcc, 0x57, 0x93, 0xe0, 0x36, 0x34, 0x80, 0xe7, 0xd1, 0x58, 0xd7, 0x36, 0x72, 0x0b,
	0xe6, 0xbb, 0x30, 0xc6, 0x53, 0xb2, 0x52, 0x37, 0x7e, 0x53, 0x92, 0xd7, 0xa0, 0x94, 0x42, 0x54,
	0xa3, 0x4b, 0x23, 0x47, 0x43, 0x1a, 0xbe, 0x29, 0x95, 0xaa, 0x9b, 0xb9, 0x94, 0xa6, 0xc7, 0x8c,
	0x8a, 0x28, 0x44, 0x21, 0x2b, 0xd6, 0x97, 0x0f, 0x1d, 0x75, 0xb4, 0x93, 0x4b, 0xb0, 0xac, 0x87,
	0x66, 0x62, 0x17, 0x30, 0x76, 0xa9, 0x6b, 0x37, 0xa1, 0xe7, 0xb3, 0xdf, 0xb4, 0xdf, 0x41, 0xa5,
	0x2a, 0x66, 0x70, 0x6f, 0x75, 0x14, 0x79, 0x5d, 0xdc, 0xfb, 0x1d, 0x7b, 0x49, 0x6b, 0x45, 0x6a,
	0xda, 0xea, 0x94, 0xff, 0x38, 0x0d, 0xb3, 0x26, 0xd1, 0xfa, 0xb4, 0xde, 0x9a, 0x44, 0xeb, 0x2b,
	0xb0, 0x62, 0xb2, 0xd4, 0x6d, 0xc5, 0x51, 0x9b, 0x2b, 0x2d, 0xe4, 0xbe, 0xa9, 0x81, 0xc7, 0x8d,
	0x6b, 0xcf, 0x78, 0x6a, 0xbe, 0xca, 0x9b, 0x34, 0xbe, 0x5b, 0x0c, 0x8b, 0xc6, 0x52, 0xf3, 0xc9,
	0x65, 0x48, 0xc7, 0xb8, 0x4d, 0x26, 0x1f, 0x47, 0xbe, 0x8a, 0xd2, 0x75, 0x70, 0xc9, 0x38, 0xde,
	0x46, 0xbb, 0x9e, 0x2a, 0x93, 0x82, 0x30, 0x2a, 0x05, 0x4b, 0x23, 0x53, 0x70, 0xfe, 0x48, 0x0a,
	0xf6, 0x27, 0xcf, 0xea, 0x53, 0x25, 0xcf, 0x89, 0x89, 0x92, 0x27, 0x2f, 0x1f, 0x4e, 0xe6, 0xe7,
	0xc3, 0x75, 0x38, 0xe1, 0x45, 0x61, 0x9b, 0xc5, 0xea, 0x45, 0xd9, 0x12, 0xb1, 0x86, 0xf1, 0x2b,
	0x5d, 0xe7, 0xf6, 0x61, 0xad, 0xb8, 0x04, 0xcb, 0x87, 0x63, 0x8c, 0x5c, 0x9c, 0x43, 0xb9, 0x58,
	0xea, 0xda, 0xb5, 0x26, 0x66, 0xf4, 0x64, 0x3d, 0xab, 0x27, 0xce, 0x2e, 0x94, 0x8c, 0x64, 0xbd,
	0xc5, 0x85, 0x24, 0xaf, 0xa4, 0xd5, 0x4d, 0x2b, 0x9d, 0x33, 0x5a, 0xe9, 0x4c, 0x61, 0x73, 0x7e,
	0x56, 0x80, 0x15, 0x35, 0x85, 0x31, 0x8b, 0x3a, 0x7b, 0x3f, 0x61, 0x42, 0xe6, 0x1d, 0x9f, 0xac,
	0xdc, 0xe3, 0x53, 0x05, 0xa6, 0x0f, 0xe2, 0xa8, 0x89, 0x69, 0x37, 0x9c, 0x61, 0x8c, 0x23, 0x97,
	0xa1, 0x20, 0x23, 0xcc, 0xbe, 0xe1, 0xd1, 0x05, 0x19, 0x91, 0xdb, 0x30, 0x1b, 0xa1, 0x3a, 0x0a,
	0xa3, 0x1d, 0x17, 0xfb, 0x3f, 0xcc, 0x9c, 0x3d, 0xdb, 0xd7, 0x2a, 0xea, 0x23, 0xee, 0xe9, 0xe0,
	0x7a, 0x3a, 0x4a, 0xad, 0x8e, 0xaa, 0x39, 0x89, 0xaf, 0xca, 0x55, 0x56, 0xbb, 0x57, 0x31, 0xdf,
	0x56, 0x8c, 0xf3, 0x61, 0x46, 0xc2, 0x9d, 0x5d, 0x38, 0xb3, 0xcb, 0xe4, 0x5e, 0xcc, 0x02, 0xde,
	0xe4, 0x21, 0x8d, 0x3b, 0x29, 0x63, 0x13, 0x32, 0xe3, 0xbc, 0x07, 0x4b, 0x7b, 0xbd, 0x9b, 0xf0,
	0xc8, 0xb1, 0x95, 0xc0, 0x34, 0x1e, 0x15, 0xf5, 0x9e, 0xc5, 0xdf, 0x63, 0x94, 0x0a, 0x02, 0xd3,
	0xea, 0x24, 0x6d, 0x36, 0x27, 0xfe, 0x76, 0xbe, 0x0d, 0x2b, 0x7d, 0x2f, 0xc3, 0xc4, 0xb8, 0xd3,
	0x9b, 0x18, 0xc3, 0x4a, 0x60, 0xdf, 0xf0, 0x34, 0x41, 0x3e, 0xb6, 0xe0, 0x34, 0x16, 0xa1, 0x98,
	0xed, 0x65, 0x55, 0x20, 0xa5, 0xe3, 0x1c, 0x94, 0xb2, 0xea, 0xa3, 0xbf, 0x0d, 0x5a, 0x87, 0xb2,
	0x93, 0xc3, 0x57, 0x21, 0x37, 0x93, 0xfa, 0xce, 0x58, 0x53, 0xfd, 0x67, 0x2c, 0xe7, 0x1f, 0x16,
	0x9c, 0x30, 0x50, 0xfc, 0x1e, 0x2c, 0xdf, 0x20, 0x08, 0xb2, 0x0a, 0x33, 0x32, 0x7a, 0x8f, 0xe9,
	0xa3, 0x74, 0xb1, 0xae, 0x1f, 0x94, 0x20, 0xea, 0xf5, 0x71, 0x55, 0x1b, 0xa2, 0xeb, 0x4c, 0x51,
	0x5b, 0x1e, 0xc6, 0x01, 0x39, 0x03, 0x45, 0xc1, 0x1b, 0x21, 0x95, 0x49, 0xcc, 0x6c, 0x66, 0xbc,
	0xa9, 0xc1, 0xf9, 0x93, 0x05, 0xe5, 0x6d, 0x94, 0xf5, 0x5c, 0x86, 0x1f, 0xc3, 0xa9, 0x96, 0xf9,
	0x6a, 0xb7, 0x57, 0xa1, 0x4d, 0xbd, 0x78, 0x61, 0xd8, 0xaa, 0xe6, 0xf1, 0x55, 0x3f, 0xd1, 0xca,
	0xa5, 0xf1, 0x2c, 0xc0, 0x01, 0x8f, 0x85, 0x74, 0x33, 0x49, 0x59, 0x44, 0x4b, 0xda, 0xfc, 0x60,
	0x6b, 0x80, 0x5e, 0xcd, 0xcc, 0x9c, 0x32, 0x28, 0xa7, 0xf3, 0x3b, 0x0b, 0x4e, 0xab, 0x94, 0xeb,
	0x4b, 0xa3, 0xc9, 0x05, 0x25, 0xb3, 0xe9, 0x0b, 0x5f, 0x69, 0xd3, 0x5f, 0x82, 0xe5, 0x74, 0xd3,
	0xf3, 0x50, 0xb2, 0x38, 0xa4, 0x81, 0x39, 0xe2, 0x2c, 0x19, 0x7b, 0xcd, 0x98, 0x9d, 0x5f, 0xcd,
	0xc0, 0x42, 0x2f, 0x05, 0x5f, 0xcf, 0x0e, 0x1d, 0x50, 0x9a, 0xa7, 0x07, 0x95, 0xe6, 0x1c, 0x72,
	0x66, 0x72, 0xc9, 0x79, 0x8a, 0xd6, 0xf0, 0x26, 0x80, 0xcf, 0xba, 0xe5, 0x74, 0xf4, 0x69, 0xaa,
	0x68, 0xa2, 0x37, 0xa5, 0x29, 0xf7, 0xe6, 0xd9, 0xd4, 0xea, 0x22, 0x17, 0x3b, 0xda, 0xa0, 0x6a,
	0x6d, 0x9b, 0x06, 0xdc, 0x77, 0x93, 0x50, 0xf2, 0x00, 0x4f, 0x4e, 0x23, 0x6a, 0x2d, 0x86, 0x3f,
	0x54, 0xd1, 0x87, 0xfb, 0x69, 0x31, 0xbb, 0x9f, 0x52, 0x89, 0x5b, 0x3a, 0x94, 0xb8, 0x2e, 0x8a,
	0x03, 0x9a, 0x04, 0xd2, 0x5e, 0x3e, 0x44, 0x81, 0x86, 0xfe, 0x9d, 0x7b, 0xfc, 0xc8, 0xce, 0xa5,
	0xb0, 0xec, 0xc5, 0xcc, 0xe7, 0xd2, 0xf5, 0x68, 0xec, 0xbb, 0x3c, 0x3c, 0x88, 0x70, 0x2f, 0x96,
	0xae, 0xbf, 0x3c, 0x5a, 0x16, 0x75, 0x7a, 0x54, 0xb6, 0x71, 0x82, 0x6d, 0x1a, 0xfb, 0xb5, 0xf0,
	0x20, 0xaa, 0x2f, 0x7a, 0x3d, 0xcf, 0xe5, 0x77, 0x60, 0xb1, 0x37, 0x42, 0xa1, 0xc2, 0x3d, 0xe3,
	0xf3, 0x06, 0x97, 0x22, 0x55, 0x26, 0x65, 0xda, 0x41, 0x8b, 0xda, 0x54, 0x08, 0x07, 0x3f, 0x57,
	0x67, 0xd9, 0x9c, 0x32, 0x3c, 0x50, 0xaa, 0x7e, 0x1f, 0x8e, 0xf7, 0xbc, 0x1f, 0x35, 0xfd, 0x8d,
	0x5e, 0x4d, 0xdf, 0x18, 0x17, 0x7c, 0xaa, 0xe8, 0x3f, 0xb4, 0xe0, 0x99, 0xcc, 0x4e, 0xd5, 0xce,
	0x6f, 0x7e, 0x9f, 0x3a, 0x09, 0xac, 0xdd, 0x67, 0xd2, 0x2c, 0x5f, 0xae, 0xf2, 0x8d, 0x8d, 0x25,
	0xf7, 0xec, 0x5a, 0xc8, 0x3d, 0xbb, 0x3a, 0x3f, 0xb1, 0x60, 0xd6, 0xdc, 0x40, 0x10, 0x1b, 0x66,
	0xcd, 0x15, 0x05, 0x92, 0x59, 0xac, 0xa7, 0x8f, 0xca, 0xf3, 0x01, 0x6f, 0x79, 0x91, 0x9f, 0x2e,
	0x4a, 0xfa, 0xa8, 0x52, 0xd3, 0xe3, 0xb2, 0x63, 0xb6, 0x3d, 0xfe, 0x56, 0x49, 0xac, 0xfa, 0xce,
	0xb4, 0x24, 0xeb, 0x07, 0xdd, 0x2b, 0x24, 0xa1, 0x8c, 0x3b, 0x2e, 0x4e, 0x34, 0x93, 0xf6, 0x0a,
	0x68, 0xdb, 0x8e, 0x7c, 0xe6, 0x7c, 0x6a, 0x81, 0x7d, 0x2f, 0xf3, 0x2d, 0x5b, 0x7a, 0xed, 0xde,
	0x0c, 0x68, 0x43, 0x90, 0xd7, 0xe1, 0x34, 0x17, 0x2e, 0x0d, 0x82, 0xe8, 0xbb, 0xcc, 0x77, 0x65,
	0xe4, 0x06, 0x5c, 0xa8, 0x26, 0x5a, 0x9f, 0xd4, 0x4c, 0xe7, 0x77, 0x8a, 0x8b, 0x4d, 0x1d, 0xf1,
	0x20, 0xca, 0x1e, 0xe4, 0xc8, 0xdb, 0xf0, 0xff, 0xbd, 0xa3, 0xa9, 0xe7, 0x31, 0x21, 0xfa, 0x4a,
	0x88, 0x30, 0xfd, 0xe1, 0xb9, 0xcc, 0x34, 0x9b, 0x18, 0xd8, 0x9b, 0x1e, 0xce, 0x7f, 0x2d, 0x58,
	0x30, 0xe8, 0xb6, 0xa3, 0xf0, 0x80, 0x37, 0xc8, 0xeb, 0x59, 0xf2, 0xac, 0x11, 0xc7, 0x4e, 0xc3,
	0xf8, 0x21, 0xc1, 0x67, 0x01, 0xda, 0x54, 0xa6, 0xf7, 0x60, 0xa6, 0xd6, 0xb4, 0xa9, 0x34, 0x77,
	0x60, 0x39, 0x57, 0x48, 0x53, 0xb9, 0x57, 0x48, 0x8e, 0x6a, 0xcb, 0xf1, 0x6e, 0xc2, 0x4c, 0xa5,
	0x97, 0xa0, 0x94, 0x88, 0x07, 0xf4, 0x89, 0x99, 0xec, 0x79, 0x20, 0xaa, 0x37, 0xa0, 0x61, 0xc7,
	0x0d, 0x58, 0x83, 0x06, 0xba, 0x82, 0xcd, 0x1c, 0x76, 0x83, 0x34, 0xec, 0xbc, 0xa5, 0x1c, 0x58,
	0xc9, 0x3e, 0xb2, 0xe0, 0xd4, 0x7d, 0x26, 0x7b, 0x3e, 0x76, 0xe2, 0x8c, 0xbc, 0x03, 0xc7, 0x3c,
	0x1c, 0x69, 0x36, 0xc7, 0xb0, 0x5d, 0xda, 0xfb, 0x26, 0x33, 0xce, 0xd9, 0x86, 0xd2, 0xde, 0xce,
	0x9b, 0x3b, 0x91, 0x97, 0x60, 0xa3, 0x68, 0xc3, 0xac, 0x17, 0x85, 0x92, 0x85, 0xba, 0x4b, 0x9c,
	0xaf, 0xa7, 0x8f, 0xa4, 0x0c, 0x73, 0x07, 0x3c, 0x60, 0x99, 0x32, 0xd5, 0x7d, 0x76, 0xee, 0x42,
	0x79, 0x97, 0xc9, 0xcd, 0x36, 0xe5, 0x01, 0xdd, 0x0f, 0x98, 0x16, 0xa7, 0x89, 0xf7, 0xba, 0xf3,
	0x99, 0x05, 0xcb, 0xfd, 0x93, 0x90, 0x77, 0x61, 0x56, 0xcb, 0x5f, 0xaa, 0x44, 0x77, 0x86, 0xad,
	0x7f, 0xdf, 0xe8, 0x54, 0x49, 0x8d, 0x3c, 0xeb, 0x76, 0xa7, 0x9e, 0x4e, 0x58, 0xbe, 0x07, 0xab,
	0x79, 0x01, 0x99, 0x7e, 0xc8, 0xea, 0xb9, 0x5f, 0xe9, 0x13, 0xff, 0x42, 0xbf, 0xf8, 0x5f, 0xff,
	0xa7, 0x0d, 0x8b, 0x86, 0xe7, 0xfb, 0x2c, 0x6e, 0x73, 0x8f, 0x91, 0x27, 0xb0, 0xa0, 0xb8, 0xd9,
	0xab, 0xa5, 0x77, 0x84, 0xe7, 0x06, 0x0b, 0xd8, 0xdd, 0x66, 0x4b, 0x76, 0xca, 0xe7, 0x07, 0x07,
	0x98, 0x39, 0x9c, 0x0b, 0x3f, 0xf8, 0xfb, 0x7f, 0x3e, 0x29, 0x9c, 0x25, 0xa7, 0xf1, 0x12, 0xdb,
	0x10, 0x50, 0x6d, 0x5f, 0x53, 0x8f, 0x57, 0xcd, 0x4d, 0x25, 0xf9, 0xad, 0x05, 0xa7, 0x77, 0x99,
	0x1c, 0xb8, 0xf1, 0x2f, 0x0c, 0x7e, 0x4f, 0x6d, 0xc7, 0xe8, 0x68, 0xf9, 0xc5, 0x21, 0x6c, 0x0f,
	0x9a, 0xd9, 0x79, 0x19, 0xe1, 0x5d, 0x23, 0xd5, 0x7e, 0x78, 0xd9, 0x05, 0xaf, 0x7e, 0x8f, 0xfb,
	0x1f, 0xa6, 0xce, 0xab, 0x07, 0x08, 0xe9, 0x53, 0x0b, 0xe6, 0x7b, 0xe4, 0xa5, 0x32, 0xe4, 0xf5,
	0x39, 0x0d, 0x65, 0xf9, 0xd9, 0xd1, 0x3d, 0xa9, 0x1a, 0xe6, 0xdc, 0x46, 0x84, 0x37, 0xc9, 0xcb,
	0xc3, 0x11, 0xf6, 0xe5, 0xed, 0x87, 0xd5, 0x54, 0x16, 0xc9, 0xf7, 0x01, 0x76, 0x59, 0xfa, 0xfa,
	0xf1, 0xa8, 0x1c, 0xa3, 0x5f, 0x76, 0x2e, 0x22, 0xae, 0x73, 0xe4, 0x6c, 0x3f, 0xae, 0xf4, 0xc5,
	0xc8, 0x1a, 0xf9, 0xbd, 0x05, 0x27, 0x72, 0xdb, 0x47, 0x32, 0xec, 0x90, 0x31, 0xac, 0xe1, 0x1c,
	0x0b, 0xdd, 0x1b, 0x88, 0xee, 0x15, 0x72, 0x63, 0x30, 0xba, 0x23, 0x8c, 0xb5, 0x0e, 0xdf, 0x48,
	0x7e, 0x64, 0xe1, 0x66, 0x30, 0xd3, 0xed, 0xed, 0xbc, 0x39, 0x1e, 0x71, 0xc3, 0x16, 0x35, 0x23,
	0x5e, 0xce, 0x25, 0x84, 0x77, 0x81, 0x9c, 0x1f, 0x4a, 0x5e, 0xb5, 0xe5, 0x1f, 0x90, 0xbf, 0x5a,
	0xb0, 0x9a, 0xd7, 0x47, 0x90, 0x1b, 0x23, 0x12, 0x6e, 0x40, 0xe3, 0x51, 0xae, 0x8c, 0xdf, 0xf3,
	0x62, 0x02, 0xee, 0x22, 0xd6, 0x4d, 0x72, 0x7b, 0xc2, 0x04, 0x34, 0x75, 0xb5, 0xd5, 0x05, 0xfc,
	0x73, 0x0b, 0x88, 0x5a, 0xd8, 0xbe, 0x3b, 0x80, 0xb1, 0x88, 0x9d, 0xa0, 0x51, 0x77, 0xae, 0x22,
	0xe0, 0xe7, 0xc8, 0xc5, 0x7e, 0xc0, 0xfd, 0x88, 0x74, 0x86, 0x7e, 0x66, 0x01, 0x39, 0x7a, 0xfc,
	0x23, 0xdf, 0x1a, 0x8f, 0xde, 0xde, 0xd3, 0x62, 0xf9, 0xf9, 0x71, 0x0f, 0x9f, 0x48, 0xed, 0x5d,
	0x44, 0x7a, 0x9b, 0xdc, 0xfa, 0x6a, 0xd4, 0x9a, 0x13, 0x0b, 0xf9, 0xa9, 0x05, 0xcb, 0x87, 0xc4,
	0x9a, 0xc6, 0x6d, 0x2c, 0x5a, 0xc7, 0x3e, 0x2b, 0x3b, 0x57, 0x10, 0xea, 0x45, 0x72, 0x61, 0x00,
	0xa9, 0x06, 0x8b, 0xa6, 0xf4, 0xcf, 0x16, 0xac, 0xe6, 0xdd, 0x91, 0x0c, 0xcd, 0xd9, 0x21, 0x97,
	0x2a, 0xe5, 0x89, 0x3b, 0x7a, 0x67, 0x13, 0xf1, 0xbe, 0xe6, 0xdc, 0x18, 0x9d, 0x04, 0x99, 0x8e,
	0x14, 0x45, 0x40, 0xcd, 0xf6, 0xaa, 0x75, 0x99, 0xfc, 0xda, 0x82, 0x95, 0x9c, 0x6b, 0x08, 0xf2,
	0xd2, 0x10, 0x30, 0x83, 0xaf, 0x2d, 0x26, 0xe0, 0xda, 0xa8, 0x83, 0xb3, 0x36, 0x9c, 0x6b, 0x85,
	0xf1, 0x97, 0x16, 0xac, 0xe8, 0xbf, 0x33, 0xf6, 0x62, 0x1c, 0xfb, 0x65, 0x13, 0xc0, 0xaa, 0x20,
	0xac, 0x8d, 0xf2, 0x38, 0x29, 0xa0, 0xb0, 0x7d, 0x6c, 0xc1, 0x8a, 0x6e, 0x89, 0xbf, 0x42, 0x66,
	0x8e, 0x3a, 0x7b, 0xa4, 0x09, 0x79, 0x79, 0xac, 0x84, 0xfc, 0x8d, 0x05, 0xa7, 0x76, 0xf3, 0x7b,
	0xab, 0xaf, 0x7b, 0xa3, 0x8c, 0x59, 0xaf, 0x55, 0xae, 0x99, 0xd6, 0xfd, 0x6a, 0x0f, 0x62, 0xf2,
	0x17, 0x7d, 0xdc, 0xce, 0xc5, 0x7a, 0x73, 0x08, 0x8c, 0xe1, 0xbd, 0xe3, 0x68, 0x42, 0xef, 0x21,
	0xf0, 0x5a, 0x79, 0x67, 0x42, 0x31, 0xca, 0xfd, 0x0a, 0xb5, 0xfe, 0x9f, 0x68, 0x59, 0xea, 0x6d,
	0x92, 0x9e, 0x9a, 0xed, 0x9e, 0xe9, 0x9c, 0x17, 0x10, 0xf4, 0x65, 0xb2, 0x31, 0x9a, 0x6d, 0xdd,
	0x46, 0xa8, 0x54, 0x58, 0xee, 0xef, 0x66, 0xc8, 0xf5, 0xe1, 0xbc, 0xe6, 0xb5, 0x3e, 0xa3, 0x09,
	0xbd, 0x83, 0xd8, 0x5e, 0x2d, 0xbf, 0x34, 0x21, 0xa1, 0x1a, 0xa8, 0x62, 0xf0, 0x0f, 0x16, 0xac,
	0xe4, 0xb4, 0x2b, 0x43, 0x15, 0x68, 0x70, 0x7b, 0x53, 0xbe, 0x32, 0x41, 0x3f, 0x32, 0xf8, 0x04,
	0x35, 0x0a, 0xbd, 0x1e, 0xbf, 0x75, 0xeb, 0xf3, 0x2f, 0xd7, 0xac, 0xbf, 0x7d, 0xb9, 0x66, 0xfd,
	0xeb, 0xcb, 0x35, 0xeb, 0x17, 0xff, 0x5e, 0xfb, 0xbf, 0x77, 0xaf, 0x64, 0xfe, 0x15, 0x26, 0x05,
	0x72, 0xb5, 0x49, 0x43, 0xda, 0x60, 0xbe, 0x7a, 0x89, 0xc8, 0xbc, 0x65, 0xff, 0x18, 0x5e, 0x93,
	0xbd, 0xf8, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x34, 0xb5, 0xdb, 0x82, 0x23, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BillingServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Fetch the billing specific flags for the organization identified by the given ID.
	// Required permissions:
	// - billing.organization.get
	GetOrganizationBillingFlags(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*OrganizationBillingFlags, error)
	// Fetch all Invoice resources for the organization identified by the given
	// organization ID that match the given criteria.
	// Required permissions:
	// - billing.invoice.list on the organization identified by the given organization ID
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*InvoiceList, error)
	// Fetch a specific Invoice identified by the given ID.
	// Required permissions:
	//   - billing.invoice.get on the organization that owns the invoice
	//     with given ID.
	GetInvoice(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Invoice, error)
	// Fetch a preliminary Invoice identified by the given organization ID.
	// The preliminary invoice contains all costs from the last invoice (if any, otherwise the creation date of the organization) until last night (midnight UTC).
	// Required permissions:
	// - billing.invoice.get-preliminary on the organization identified by the given organization ID
	GetPreliminaryInvoice(ctx context.Context, in *GetPreliminaryInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error)
	// Fetch a specific Invoice identified by the given ID as PDF document.
	// Required permissions:
	//   - billing.invoice.get on the organization that owns the invoice
	//     with given ID.
	GetInvoicePDF(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PDFDocument, error)
	// Fetch all payment providers that are usable for the organization identified
	// by the given context ID.
	// Required permissions:
	// - billing.paymentprovider.list on the organization identified by the given context ID
	ListPaymentProviders(ctx context.Context, in *ListPaymentProvidersRequest, opts ...grpc.CallOption) (*PaymentProviderList, error)
	// Fetch a specific payment provider identified by the given ID.
	// Required permissions:
	// - None
	GetPaymentProvider(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentProvider, error)
	// Fetch all payment methods that are configured for the organization identified
	// by the given context ID.
	// Required permissions:
	// - billing.paymentmethod.list on the organization identified by the given context ID
	ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, opts ...grpc.CallOption) (*PaymentMethodList, error)
	// Fetch a specific payment method identified by the given ID.
	// Required permissions:
	//   - billing.paymentmethod.get on the organization that owns the payment method
	//     which is identified by the given ID
	GetPaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentMethod, error)
	// Prepare the payment provider for creating a new payment method.
	// Required permissions:
	// - billing.paymentmethod.create on the organization that owns future payment method.
	PreparePaymentMethod(ctx context.Context, in *PreparePaymentMethodRequest, opts ...grpc.CallOption) (*PreparedPaymentMethod, error)
	// Create a new payment method.
	// Required permissions:
	// - billing.paymentmethod.create on the organization that owns the given payment method.
	CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethod, error)
	// Update a specific payment method.
	// Note that only name, description & valid period are updated.
	// Required permissions:
	// - billing.paymentmethod.update on the organization that owns the given payment method.
	UpdatePaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error)
	// Delete a specific payment method identified by the given ID.
	// Required permissions:
	//   - billing.paymentmethod.delete on the organization that owns the given payment method
	//     which is identified by the given ID.
	DeletePaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error)
	// Fetch the default PaymentMethod for an organization identified by the given ID.
	// Required permissions:
	// - billing.paymentmethod.get-default on the organization that is identified by the given ID
	GetDefaultPaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentMethod, error)
	// Update the default PaymentMethod for an organization identified by the
	// given organization ID, to the payment method identified by the given payment method ID.
	// Required permissions:
	// - billing.paymentmethod.set-default on the organization identified by the given organization ID
	SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Fetch the billing configuration of an organization identified by the given ID.
	// Required permissions:
	// - billing.config.get on the organization that is identified by the given ID
	GetBillingConfig(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*BillingConfig, error)
	// Update the billing configuration for an organization identified by the
	// given organization ID.
	// Required permissions:
	// - billing.config.set on the organization identified by the given organization ID
	SetBillingConfig(ctx context.Context, in *SetBillingConfigRequest, opts ...grpc.CallOption) (*v1.Empty, error)
	// Get available credits for an organization identified by organization_id
	// Required permissions:
	// - billing.credits.get_available on the organization identified by the given organization ID
	GetAvailableCredits(ctx context.Context, in *GetAvailableCreditsRequest, opts ...grpc.CallOption) (*AvailableCredits, error)
}

type billingServiceClient struct {
	cc *grpc.ClientConn
}

func NewBillingServiceClient(cc *grpc.ClientConn) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetOrganizationBillingFlags(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*OrganizationBillingFlags, error) {
	out := new(OrganizationBillingFlags)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/GetOrganizationBillingFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*InvoiceList, error) {
	out := new(InvoiceList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/ListInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoice(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/GetInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetPreliminaryInvoice(ctx context.Context, in *GetPreliminaryInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/GetPreliminaryInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoicePDF(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PDFDocument, error) {
	out := new(PDFDocument)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/GetInvoicePDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListPaymentProviders(ctx context.Context, in *ListPaymentProvidersRequest, opts ...grpc.CallOption) (*PaymentProviderList, error) {
	out := new(PaymentProviderList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/ListPaymentProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetPaymentProvider(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentProvider, error) {
	out := new(PaymentProvider)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/GetPaymentProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListPaymentMethods(ctx context.Context, in *ListPaymentMethodsRequest, opts ...grpc.CallOption) (*PaymentMethodList, error) {
	out := new(PaymentMethodList)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/ListPaymentMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetPaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentMethod, error) {
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/GetPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) PreparePaymentMethod(ctx context.Context, in *PreparePaymentMethodRequest, opts ...grpc.CallOption) (*PreparedPaymentMethod, error) {
	out := new(PreparedPaymentMethod)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/PreparePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethod, error) {
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/CreatePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdatePaymentMethod(ctx context.Context, in *PaymentMethod, opts ...grpc.CallOption) (*PaymentMethod, error) {
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/UpdatePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DeletePaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/DeletePaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetDefaultPaymentMethod(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PaymentMethod, error) {
	out := new(PaymentMethod)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/GetDefaultPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/SetDefaultPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetBillingConfig(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*BillingConfig, error) {
	out := new(BillingConfig)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/GetBillingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) SetBillingConfig(ctx context.Context, in *SetBillingConfigRequest, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/SetBillingConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetAvailableCredits(ctx context.Context, in *GetAvailableCreditsRequest, opts ...grpc.CallOption) (*AvailableCredits, error) {
	out := new(AvailableCredits)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.billing.v1.BillingService/GetAvailableCredits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
type BillingServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Fetch the billing specific flags for the organization identified by the given ID.
	// Required permissions:
	// - billing.organization.get
	GetOrganizationBillingFlags(context.Context, *v1.IDOptions) (*OrganizationBillingFlags, error)
	// Fetch all Invoice resources for the organization identified by the given
	// organization ID that match the given criteria.
	// Required permissions:
	// - billing.invoice.list on the organization identified by the given organization ID
	ListInvoices(context.Context, *ListInvoicesRequest) (*InvoiceList, error)
	// Fetch a specific Invoice identified by the given ID.
	// Required permissions:
	//   - billing.invoice.get on the organization that owns the invoice
	//     with given ID.
	GetInvoice(context.Context, *v1.IDOptions) (*Invoice, error)
	// Fetch a preliminary Invoice identified by the given organization ID.
	// The preliminary invoice contains all costs from the last invoice (if any, otherwise the creation date of the organization) until last night (midnight UTC).
	// Required permissions:
	// - billing.invoice.get-preliminary on the organization identified by the given organization ID
	GetPreliminaryInvoice(context.Context, *GetPreliminaryInvoiceRequest) (*Invoice, error)
	// Fetch a specific Invoice identified by the given ID as PDF document.
	// Required permissions:
	//   - billing.invoice.get on the organization that owns the invoice
	//     with given ID.
	GetInvoicePDF(context.Context, *v1.IDOptions) (*PDFDocument, error)
	// Fetch all payment providers that are usable for the organization identified
	// by the given context ID.
	// Required permissions:
	// - billing.paymentprovider.list on the organization identified by the given context ID
	ListPaymentProviders(context.Context, *ListPaymentProvidersRequest) (*PaymentProviderList, error)
	// Fetch a specific payment provider identified by the given ID.
	// Required permissions:
	// - None
	GetPaymentProvider(context.Context, *v1.IDOptions) (*PaymentProvider, error)
	// Fetch all payment methods that are configured for the organization identified
	// by the given context ID.
	// Required permissions:
	// - billing.paymentmethod.list on the organization identified by the given context ID
	ListPaymentMethods(context.Context, *ListPaymentMethodsRequest) (*PaymentMethodList, error)
	// Fetch a specific payment method identified by the given ID.
	// Required permissions:
	//   - billing.paymentmethod.get on the organization that owns the payment method
	//     which is identified by the given ID
	GetPaymentMethod(context.Context, *v1.IDOptions) (*PaymentMethod, error)
	// Prepare the payment provider for creating a new payment method.
	// Required permissions:
	// - billing.paymentmethod.create on the organization that owns future payment method.
	PreparePaymentMethod(context.Context, *PreparePaymentMethodRequest) (*PreparedPaymentMethod, error)
	// Create a new payment method.
	// Required permissions:
	// - billing.paymentmethod.create on the organization that owns the given payment method.
	CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest) (*PaymentMethod, error)
	// Update a specific payment method.
	// Note that only name, description & valid period are updated.
	// Required permissions:
	// - billing.paymentmethod.update on the organization that owns the given payment method.
	UpdatePaymentMethod(context.Context, *PaymentMethod) (*PaymentMethod, error)
	// Delete a specific payment method identified by the given ID.
	// Required permissions:
	//   - billing.paymentmethod.delete on the organization that owns the given payment method
	//     which is identified by the given ID.
	DeletePaymentMethod(context.Context, *v1.IDOptions) (*v1.Empty, error)
	// Fetch the default PaymentMethod for an organization identified by the given ID.
	// Required permissions:
	// - billing.paymentmethod.get-default on the organization that is identified by the given ID
	GetDefaultPaymentMethod(context.Context, *v1.IDOptions) (*PaymentMethod, error)
	// Update the default PaymentMethod for an organization identified by the
	// given organization ID, to the payment method identified by the given payment method ID.
	// Required permissions:
	// - billing.paymentmethod.set-default on the organization identified by the given organization ID
	SetDefaultPaymentMethod(context.Context, *SetDefaultPaymentMethodRequest) (*v1.Empty, error)
	// Fetch the billing configuration of an organization identified by the given ID.
	// Required permissions:
	// - billing.config.get on the organization that is identified by the given ID
	GetBillingConfig(context.Context, *v1.IDOptions) (*BillingConfig, error)
	// Update the billing configuration for an organization identified by the
	// given organization ID.
	// Required permissions:
	// - billing.config.set on the organization identified by the given organization ID
	SetBillingConfig(context.Context, *SetBillingConfigRequest) (*v1.Empty, error)
	// Get available credits for an organization identified by organization_id
	// Required permissions:
	// - billing.credits.get_available on the organization identified by the given organization ID
	GetAvailableCredits(context.Context, *GetAvailableCreditsRequest) (*AvailableCredits, error)
}

// UnimplementedBillingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBillingServiceServer struct {
}

func (*UnimplementedBillingServiceServer) GetAPIVersion(ctx context.Context, req *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedBillingServiceServer) GetOrganizationBillingFlags(ctx context.Context, req *v1.IDOptions) (*OrganizationBillingFlags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationBillingFlags not implemented")
}
func (*UnimplementedBillingServiceServer) ListInvoices(ctx context.Context, req *ListInvoicesRequest) (*InvoiceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (*UnimplementedBillingServiceServer) GetInvoice(ctx context.Context, req *v1.IDOptions) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (*UnimplementedBillingServiceServer) GetPreliminaryInvoice(ctx context.Context, req *GetPreliminaryInvoiceRequest) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreliminaryInvoice not implemented")
}
func (*UnimplementedBillingServiceServer) GetInvoicePDF(ctx context.Context, req *v1.IDOptions) (*PDFDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoicePDF not implemented")
}
func (*UnimplementedBillingServiceServer) ListPaymentProviders(ctx context.Context, req *ListPaymentProvidersRequest) (*PaymentProviderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentProviders not implemented")
}
func (*UnimplementedBillingServiceServer) GetPaymentProvider(ctx context.Context, req *v1.IDOptions) (*PaymentProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentProvider not implemented")
}
func (*UnimplementedBillingServiceServer) ListPaymentMethods(ctx context.Context, req *ListPaymentMethodsRequest) (*PaymentMethodList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentMethods not implemented")
}
func (*UnimplementedBillingServiceServer) GetPaymentMethod(ctx context.Context, req *v1.IDOptions) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMethod not implemented")
}
func (*UnimplementedBillingServiceServer) PreparePaymentMethod(ctx context.Context, req *PreparePaymentMethodRequest) (*PreparedPaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreparePaymentMethod not implemented")
}
func (*UnimplementedBillingServiceServer) CreatePaymentMethod(ctx context.Context, req *CreatePaymentMethodRequest) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentMethod not implemented")
}
func (*UnimplementedBillingServiceServer) UpdatePaymentMethod(ctx context.Context, req *PaymentMethod) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentMethod not implemented")
}
func (*UnimplementedBillingServiceServer) DeletePaymentMethod(ctx context.Context, req *v1.IDOptions) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentMethod not implemented")
}
func (*UnimplementedBillingServiceServer) GetDefaultPaymentMethod(ctx context.Context, req *v1.IDOptions) (*PaymentMethod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultPaymentMethod not implemented")
}
func (*UnimplementedBillingServiceServer) SetDefaultPaymentMethod(ctx context.Context, req *SetDefaultPaymentMethodRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPaymentMethod not implemented")
}
func (*UnimplementedBillingServiceServer) GetBillingConfig(ctx context.Context, req *v1.IDOptions) (*BillingConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingConfig not implemented")
}
func (*UnimplementedBillingServiceServer) SetBillingConfig(ctx context.Context, req *SetBillingConfigRequest) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBillingConfig not implemented")
}
func (*UnimplementedBillingServiceServer) GetAvailableCredits(ctx context.Context, req *GetAvailableCreditsRequest) (*AvailableCredits, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableCredits not implemented")
}

func RegisterBillingServiceServer(s *grpc.Server, srv BillingServiceServer) {
	s.RegisterService(&_BillingService_serviceDesc, srv)
}

func _BillingService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetOrganizationBillingFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetOrganizationBillingFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/GetOrganizationBillingFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetOrganizationBillingFlags(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/ListInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/GetInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoice(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetPreliminaryInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreliminaryInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetPreliminaryInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/GetPreliminaryInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetPreliminaryInvoice(ctx, req.(*GetPreliminaryInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoicePDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoicePDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/GetInvoicePDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoicePDF(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListPaymentProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListPaymentProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/ListPaymentProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListPaymentProviders(ctx, req.(*ListPaymentProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetPaymentProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetPaymentProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/GetPaymentProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetPaymentProvider(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/ListPaymentMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListPaymentMethods(ctx, req.(*ListPaymentMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/GetPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetPaymentMethod(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_PreparePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreparePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).PreparePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/PreparePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).PreparePaymentMethod(ctx, req.(*PreparePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/CreatePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreatePaymentMethod(ctx, req.(*CreatePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMethod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/UpdatePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdatePaymentMethod(ctx, req.(*PaymentMethod))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeletePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeletePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/DeletePaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeletePaymentMethod(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetDefaultPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetDefaultPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/GetDefaultPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetDefaultPaymentMethod(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_SetDefaultPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).SetDefaultPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/SetDefaultPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).SetDefaultPaymentMethod(ctx, req.(*SetDefaultPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetBillingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetBillingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/GetBillingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetBillingConfig(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_SetBillingConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBillingConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).SetBillingConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/SetBillingConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).SetBillingConfig(ctx, req.(*SetBillingConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetAvailableCredits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableCreditsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetAvailableCredits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.billing.v1.BillingService/GetAvailableCredits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetAvailableCredits(ctx, req.(*GetAvailableCreditsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.billing.v1.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _BillingService_GetAPIVersion_Handler,
		},
		{
			MethodName: "GetOrganizationBillingFlags",
			Handler:    _BillingService_GetOrganizationBillingFlags_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _BillingService_ListInvoices_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _BillingService_GetInvoice_Handler,
		},
		{
			MethodName: "GetPreliminaryInvoice",
			Handler:    _BillingService_GetPreliminaryInvoice_Handler,
		},
		{
			MethodName: "GetInvoicePDF",
			Handler:    _BillingService_GetInvoicePDF_Handler,
		},
		{
			MethodName: "ListPaymentProviders",
			Handler:    _BillingService_ListPaymentProviders_Handler,
		},
		{
			MethodName: "GetPaymentProvider",
			Handler:    _BillingService_GetPaymentProvider_Handler,
		},
		{
			MethodName: "ListPaymentMethods",
			Handler:    _BillingService_ListPaymentMethods_Handler,
		},
		{
			MethodName: "GetPaymentMethod",
			Handler:    _BillingService_GetPaymentMethod_Handler,
		},
		{
			MethodName: "PreparePaymentMethod",
			Handler:    _BillingService_PreparePaymentMethod_Handler,
		},
		{
			MethodName: "CreatePaymentMethod",
			Handler:    _BillingService_CreatePaymentMethod_Handler,
		},
		{
			MethodName: "UpdatePaymentMethod",
			Handler:    _BillingService_UpdatePaymentMethod_Handler,
		},
		{
			MethodName: "DeletePaymentMethod",
			Handler:    _BillingService_DeletePaymentMethod_Handler,
		},
		{
			MethodName: "GetDefaultPaymentMethod",
			Handler:    _BillingService_GetDefaultPaymentMethod_Handler,
		},
		{
			MethodName: "SetDefaultPaymentMethod",
			Handler:    _BillingService_SetDefaultPaymentMethod_Handler,
		},
		{
			MethodName: "GetBillingConfig",
			Handler:    _BillingService_GetBillingConfig_Handler,
		},
		{
			MethodName: "SetBillingConfig",
			Handler:    _BillingService_SetBillingConfig_Handler,
		},
		{
			MethodName: "GetAvailableCredits",
			Handler:    _BillingService_GetAvailableCredits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}

func (m *Invoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Invoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payments) > 0 {
		for iNdEx := len(m.Payments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBilling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xc
			i--
			dAtA[i] = 0xca
		}
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xc
		i--
		dAtA[i] = 0xc2
	}
	if m.SalesTaxPercentageUsed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SalesTaxPercentageUsed))))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xad
	}
	if m.TotalSalesTax != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalSalesTax))))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0xa5
	}
	if m.VatPercentageUsed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.VatPercentageUsed))))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x9d
	}
	if m.VatReverseCharge {
		i--
		if m.VatReverseCharge {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x90
	}
	if m.TotalAmountInclTaxes != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalAmountInclTaxes))))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x8d
	}
	if m.TotalVat != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalVat))))
		i--
		dAtA[i] = 0x7
		i--
		dAtA[i] = 0x85
	}
	if m.TotalAmountExclTaxes != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalAmountExclTaxes))))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfd
	}
	if len(m.CurrencyId) > 0 {
		i -= len(m.CurrencyId)
		copy(dAtA[i:], m.CurrencyId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CurrencyId)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xf2
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBilling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.InvoiceBuilderVersion) > 0 {
		i -= len(m.InvoiceBuilderVersion)
		copy(dAtA[i:], m.InvoiceBuilderVersion)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.InvoiceBuilderVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.PurchaseOrderBased {
		i--
		if m.PurchaseOrderBased {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.EmailAddresses) > 0 {
		for iNdEx := len(m.EmailAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EmailAddresses[iNdEx])
			copy(dAtA[i:], m.EmailAddresses[iNdEx])
			i = encodeVarintBilling(dAtA, i, uint64(len(m.EmailAddresses[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.LastUpdatedAt != nil {
		{
			size, err := m.LastUpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RequiresManualVerification {
		i--
		if m.RequiresManualVerification {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.InvoiceNumber) > 0 {
		i -= len(m.InvoiceNumber)
		copy(dAtA[i:], m.InvoiceNumber)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.InvoiceNumber)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EntityName) > 0 {
		i -= len(m.EntityName)
		copy(dAtA[i:], m.EntityName)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.EntityName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EntityId) > 0 {
		i -= len(m.EntityId)
		copy(dAtA[i:], m.EntityId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.EntityId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrganizationName) > 0 {
		i -= len(m.OrganizationName)
		copy(dAtA[i:], m.OrganizationName)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Invoice_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invoice_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Invoice_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsPrepaid {
		i--
		if m.IsPrepaid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.UsageitemIds) > 0 {
		for iNdEx := len(m.UsageitemIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UsageitemIds[iNdEx])
			copy(dAtA[i:], m.UsageitemIds[iNdEx])
			i = encodeVarintBilling(dAtA, i, uint64(len(m.UsageitemIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i--
		dAtA[i] = 0x15
	}
	return len(dAtA) - i, nil
}

func (m *Invoice_Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invoice_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Invoice_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RejectedBy) > 0 {
		i -= len(m.RejectedBy)
		copy(dAtA[i:], m.RejectedBy)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.RejectedBy)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CompletedBy) > 0 {
		i -= len(m.CompletedBy)
		copy(dAtA[i:], m.CompletedBy)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CompletedBy)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RejectionReason) > 0 {
		i -= len(m.RejectionReason)
		copy(dAtA[i:], m.RejectionReason)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.RejectionReason)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CompletionReason) > 0 {
		i -= len(m.CompletionReason)
		copy(dAtA[i:], m.CompletionReason)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CompletionReason)))
		i--
		dAtA[i] = 0x62
	}
	if m.RejectedAt != nil {
		{
			size, err := m.RejectedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.CompletedAt != nil {
		{
			size, err := m.CompletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.NeedsRebuild {
		i--
		if m.NeedsRebuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsRejected {
		i--
		if m.IsRejected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsCompleted {
		i--
		if m.IsCompleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsPending {
		i--
		if m.IsPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Invoice_Payment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invoice_Payment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Invoice_Payment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x85
	}
	if m.ConvertedAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ConvertedAmount))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfd
	}
	if len(m.ConvertedCurrencyId) > 0 {
		i -= len(m.ConvertedCurrencyId)
		copy(dAtA[i:], m.ConvertedCurrencyId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.ConvertedCurrencyId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if len(m.RejectionReason) > 0 {
		i -= len(m.RejectionReason)
		copy(dAtA[i:], m.RejectionReason)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.RejectionReason)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.RejectedAt != nil {
		{
			size, err := m.RejectedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.CompletedAt != nil {
		{
			size, err := m.CompletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.IsRejected {
		i--
		if m.IsRejected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.IsCompleted {
		i--
		if m.IsCompleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.IsPending {
		i--
		if m.IsPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.PaymentMethodId) > 0 {
		i -= len(m.PaymentMethodId)
		copy(dAtA[i:], m.PaymentMethodId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.PaymentMethodId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PaymentId) > 0 {
		i -= len(m.PaymentId)
		copy(dAtA[i:], m.PaymentId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.PaymentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PaymentProviderId) > 0 {
		i -= len(m.PaymentProviderId)
		copy(dAtA[i:], m.PaymentProviderId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.PaymentProviderId)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvoiceList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvoiceList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBilling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListInvoicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListInvoicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListInvoicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IncludeUsageitemIds {
		i--
		if m.IncludeUsageitemIds {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPreliminaryInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPreliminaryInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPreliminaryInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentProviderList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentProviderList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentProviderList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBilling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PreparePaymentMethodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreparePaymentMethodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreparePaymentMethodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CurrencyId) > 0 {
		i -= len(m.CurrencyId)
		copy(dAtA[i:], m.CurrencyId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CurrencyId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderId) > 0 {
		i -= len(m.ProviderId)
		copy(dAtA[i:], m.ProviderId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.ProviderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreparedPaymentMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreparedPaymentMethod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreparedPaymentMethod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.ScriptUrl) > 0 {
		i -= len(m.ScriptUrl)
		copy(dAtA[i:], m.ScriptUrl)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.ScriptUrl)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CurrencyId) > 0 {
		i -= len(m.CurrencyId)
		copy(dAtA[i:], m.CurrencyId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CurrencyId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProviderId) > 0 {
		i -= len(m.ProviderId)
		copy(dAtA[i:], m.ProviderId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.ProviderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreatePaymentMethodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePaymentMethodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePaymentMethodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if m.PreparedPaymentMethod != nil {
		{
			size, err := m.PreparedPaymentMethod.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPaymentProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPaymentProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPaymentProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IncludeInternal {
		i--
		if m.IncludeInternal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentMethod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentMethod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreditCardInfo != nil {
		{
			size, err := m.CreditCardInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CurrencyId) > 0 {
		i -= len(m.CurrencyId)
		copy(dAtA[i:], m.CurrencyId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CurrencyId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.IsDefault {
		i--
		if m.IsDefault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x72
	}
	if m.ValidUntil != nil {
		{
			size, err := m.ValidUntil.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PaymentProviderId) > 0 {
		i -= len(m.PaymentProviderId)
		copy(dAtA[i:], m.PaymentProviderId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.PaymentProviderId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentMethod_CreditCardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentMethod_CreditCardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentMethod_CreditCardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CardType) > 0 {
		i -= len(m.CardType)
		copy(dAtA[i:], m.CardType)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CardType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LastDigits) > 0 {
		i -= len(m.LastDigits)
		copy(dAtA[i:], m.LastDigits)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.LastDigits)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentMethodList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentMethodList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentMethodList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBilling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListPaymentMethodsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPaymentMethodsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPaymentMethodsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetDefaultPaymentMethodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDefaultPaymentMethodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDefaultPaymentMethodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PaymentMethodId) > 0 {
		i -= len(m.PaymentMethodId)
		copy(dAtA[i:], m.PaymentMethodId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.PaymentMethodId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Zipcode) > 0 {
		i -= len(m.Zipcode)
		copy(dAtA[i:], m.Zipcode)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Zipcode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Address[iNdEx])
			copy(dAtA[i:], m.Address[iNdEx])
			i = encodeVarintBilling(dAtA, i, uint64(len(m.Address[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OrganizationBillingFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrganizationBillingFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrganizationBillingFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsAllowedToAccessPaymentMethods {
		i--
		if m.IsAllowedToAccessPaymentMethods {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsAllowedToListInvoices {
		i--
		if m.IsAllowedToListInvoices {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BillingConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CompanyLegalName) > 0 {
		i -= len(m.CompanyLegalName)
		copy(dAtA[i:], m.CompanyLegalName)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CompanyLegalName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UsTaxNumber) > 0 {
		i -= len(m.UsTaxNumber)
		copy(dAtA[i:], m.UsTaxNumber)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.UsTaxNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EmailAddresses) > 0 {
		for iNdEx := len(m.EmailAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EmailAddresses[iNdEx])
			copy(dAtA[i:], m.EmailAddresses[iNdEx])
			i = encodeVarintBilling(dAtA, i, uint64(len(m.EmailAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.VatNumber) > 0 {
		i -= len(m.VatNumber)
		copy(dAtA[i:], m.VatNumber)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.VatNumber)))
		i--
		dAtA[i] = 0x12
	}
	if m.Address != nil {
		{
			size, err := m.Address.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetBillingConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetBillingConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetBillingConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PDFDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PDFDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PDFDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Filename) > 0 {
		i -= len(m.Filename)
		copy(dAtA[i:], m.Filename)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Filename)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAvailableCreditsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAvailableCreditsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAvailableCreditsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AvailableCredits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvailableCredits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AvailableCredits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Credits) > 0 {
		for iNdEx := len(m.Credits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Credits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBilling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AvailableCredits_CreditCurrencyAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvailableCredits_CreditCurrencyAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AvailableCredits_CreditCurrencyAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CurrencyId) > 0 {
		i -= len(m.CurrencyId)
		copy(dAtA[i:], m.CurrencyId)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CurrencyId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintBilling(dAtA []byte, offset int, v uint64) int {
	offset -= sovBilling(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Invoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.OrganizationName)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.EntityId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.EntityName)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.InvoiceNumber)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.RequiresManualVerification {
		n += 2
	}
	if m.LastUpdatedAt != nil {
		l = m.LastUpdatedAt.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if len(m.EmailAddresses) > 0 {
		for _, s := range m.EmailAddresses {
			l = len(s)
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	if m.PurchaseOrderBased {
		n += 2
	}
	l = len(m.InvoiceBuilderVersion)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 2 + l + sovBilling(uint64(l))
		}
	}
	l = len(m.CurrencyId)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	if m.TotalAmountExclTaxes != 0 {
		n += 6
	}
	if m.TotalVat != 0 {
		n += 6
	}
	if m.TotalAmountInclTaxes != 0 {
		n += 6
	}
	if m.VatReverseCharge {
		n += 3
	}
	if m.VatPercentageUsed != 0 {
		n += 6
	}
	if m.TotalSalesTax != 0 {
		n += 6
	}
	if m.SalesTaxPercentageUsed != 0 {
		n += 6
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 2 + l + sovBilling(uint64(l))
	}
	if len(m.Payments) > 0 {
		for _, e := range m.Payments {
			l = e.Size()
			n += 2 + l + sovBilling(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Invoice_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 5
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if len(m.UsageitemIds) > 0 {
		for _, s := range m.UsageitemIds {
			l = len(s)
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	if m.IsPrepaid {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Invoice_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPending {
		n += 2
	}
	if m.IsCompleted {
		n += 2
	}
	if m.IsRejected {
		n += 2
	}
	if m.IsVerified {
		n += 2
	}
	if m.NeedsRebuild {
		n += 2
	}
	if m.CompletedAt != nil {
		l = m.CompletedAt.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.RejectedAt != nil {
		l = m.RejectedAt.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.CompletionReason)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.RejectionReason)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.CompletedBy)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.RejectedBy)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Invoice_Payment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.PaymentProviderId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.PaymentId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.PaymentMethodId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.IsPending {
		n += 2
	}
	if m.IsCompleted {
		n += 2
	}
	if m.IsRejected {
		n += 2
	}
	if m.CompletedAt != nil {
		l = m.CompletedAt.Size()
		n += 2 + l + sovBilling(uint64(l))
	}
	if m.RejectedAt != nil {
		l = m.RejectedAt.Size()
		n += 2 + l + sovBilling(uint64(l))
	}
	l = len(m.RejectionReason)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	l = len(m.ConvertedCurrencyId)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	if m.ConvertedAmount != 0 {
		n += 6
	}
	if m.Amount != 0 {
		n += 6
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InvoiceList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListInvoicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.IncludeUsageitemIds {
		n += 3
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPreliminaryInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentProviderList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PreparePaymentMethodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.CurrencyId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PreparedPaymentMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.CurrencyId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.ScriptUrl)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePaymentMethodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreparedPaymentMethod != nil {
		l = m.PreparedPaymentMethod.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListPaymentProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.IncludeInternal {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.PaymentProviderId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.IsDeleted {
		n += 2
	}
	if m.ValidUntil != nil {
		l = m.ValidUntil.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.IsDefault {
		n += 3
	}
	l = len(m.CurrencyId)
	if l > 0 {
		n += 2 + l + sovBilling(uint64(l))
	}
	if m.CreditCardInfo != nil {
		l = m.CreditCardInfo.Size()
		n += 2 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentMethod_CreditCardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LastDigits)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.CardType)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PaymentMethodList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListPaymentMethodsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetDefaultPaymentMethodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.PaymentMethodId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, s := range m.Address {
			l = len(s)
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	l = len(m.Zipcode)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrganizationBillingFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAllowedToListInvoices {
		n += 2
	}
	if m.IsAllowedToAccessPaymentMethods {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BillingConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.VatNumber)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if len(m.EmailAddresses) > 0 {
		for _, s := range m.EmailAddresses {
			l = len(s)
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	l = len(m.UsTaxNumber)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.CompanyLegalName)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetBillingConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PDFDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAvailableCreditsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AvailableCredits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Credits) > 0 {
		for _, e := range m.Credits {
			l = e.Size()
			n += 1 + l + sovBilling(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AvailableCredits_CreditCurrencyAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 5
	}
	l = len(m.CurrencyId)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBilling(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBilling(x uint64) (n int) {
	return sovBilling(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Invoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiresManualVerification", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequiresManualVerification = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdatedAt == nil {
				m.LastUpdatedAt = &types.Timestamp{}
			}
			if err := m.LastUpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddresses = append(m.EmailAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseOrderBased", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PurchaseOrderBased = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceBuilderVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceBuilderVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Invoice_Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 111:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmountExclTaxes", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalAmountExclTaxes = float32(math.Float32frombits(v))
		case 112:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalVat = float32(math.Float32frombits(v))
		case 113:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmountInclTaxes", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalAmountInclTaxes = float32(math.Float32frombits(v))
		case 114:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatReverseCharge", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VatReverseCharge = bool(v != 0)
		case 115:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatPercentageUsed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.VatPercentageUsed = float32(math.Float32frombits(v))
		case 116:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSalesTax", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalSalesTax = float32(math.Float32frombits(v))
		case 117:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalesTaxPercentageUsed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SalesTaxPercentageUsed = float32(math.Float32frombits(v))
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Invoice_Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 201:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payments = append(m.Payments, &Invoice_Payment{})
			if err := m.Payments[len(m.Payments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invoice_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsageitemIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsageitemIds = append(m.UsageitemIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrepaid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrepaid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invoice_Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPending = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCompleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCompleted = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRejected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRejected = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsRebuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsRebuild = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = &types.Timestamp{}
			}
			if err := m.CompletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RejectedAt == nil {
				m.RejectedAt = &types.Timestamp{}
			}
			if err := m.RejectedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invoice_Payment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMethodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPending = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCompleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCompleted = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRejected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRejected = bool(v != 0)
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = &types.Timestamp{}
			}
			if err := m.CompletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RejectedAt == nil {
				m.RejectedAt = &types.Timestamp{}
			}
			if err := m.RejectedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectionReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectionReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertedCurrencyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConvertedCurrencyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertedAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ConvertedAmount = float32(math.Float32frombits(v))
		case 32:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvoiceList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Invoice{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListInvoicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInvoicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInvoicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &types.Timestamp{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &v1.ListOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeUsageitemIds", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeUsageitemIds = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPreliminaryInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPreliminaryInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPreliminaryInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentProviderList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentProviderList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentProviderList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &PaymentProvider{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreparePaymentMethodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreparePaymentMethodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreparePaymentMethodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreparedPaymentMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreparedPaymentMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreparedPaymentMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScriptUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScriptUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePaymentMethodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePaymentMethodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePaymentMethodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparedPaymentMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreparedPaymentMethod == nil {
				m.PreparedPaymentMethod = &PreparedPaymentMethod{}
			}
			if err := m.PreparedPaymentMethod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPaymentProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPaymentProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPaymentProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &v1.ListOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeInternal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeInternal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &types.Timestamp{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidUntil == nil {
				m.ValidUntil = &types.Timestamp{}
			}
			if err := m.ValidUntil.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefault = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreditCardInfo == nil {
				m.CreditCardInfo = &PaymentMethod_CreditCardInfo{}
			}
			if err := m.CreditCardInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentMethod_CreditCardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditCardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditCardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDigits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastDigits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentMethodList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentMethodList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentMethodList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &PaymentMethod{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPaymentMethodsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPaymentMethodsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPaymentMethodsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &v1.ListOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDefaultPaymentMethodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDefaultPaymentMethodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDefaultPaymentMethodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethodId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentMethodId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zipcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zipcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrganizationBillingFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrganizationBillingFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrganizationBillingFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllowedToListInvoices", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllowedToListInvoices = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAllowedToAccessPaymentMethods", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAllowedToAccessPaymentMethods = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillingConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VatNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VatNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddresses = append(m.EmailAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsTaxNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsTaxNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyLegalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyLegalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetBillingConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetBillingConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetBillingConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &BillingConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PDFDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PDFDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PDFDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAvailableCreditsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAvailableCreditsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAvailableCreditsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvailableCredits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvailableCredits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvailableCredits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credits = append(m.Credits, &AvailableCredits_CreditCurrencyAmount{})
			if err := m.Credits[len(m.Credits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvailableCredits_CreditCurrencyAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditCurrencyAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditCurrencyAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrencyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBilling(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBilling
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBilling
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBilling
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBilling        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBilling          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBilling = fmt.Errorf("proto: unexpected end of group")
)
