// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

package v1

import (
	context "context"
	fmt "fmt"
	v1 "github.com/arangodb-managed/apis/common/v1"
	types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// IsPrivateEndpointServiceFeatureAvailableRequest specifies the request parameters for the IsPrivateEndpointServiceFeatureAvailable method.
// At least 1 of the fields should contain a value.
type IsPrivateEndpointServiceFeatureAvailableRequest struct {
	// Identifier of the deployment (optional)
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Identifier of the organization (optional)
	// This field is ignored if a deployment_id is specified
	OrganizationId string `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Identifier of the region (optional)
	// This field is ignored if a deployment_id is specified
	RegionId             string   `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) Reset() {
	*m = IsPrivateEndpointServiceFeatureAvailableRequest{}
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) String() string {
	return proto.CompactTextString(m)
}
func (*IsPrivateEndpointServiceFeatureAvailableRequest) ProtoMessage() {}
func (*IsPrivateEndpointServiceFeatureAvailableRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableRequest.Merge(m, src)
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) XXX_Size() int {
	return m.Size()
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableRequest proto.InternalMessageInfo

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) GetOrganizationId() string {
	if m != nil {
		return m.OrganizationId
	}
	return ""
}

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

// IsPrivateEndpointServiceFeatureAvailableResult specifies if the private endpoint service is enabled and available.
// If it is not available it contains a message why not.
type IsPrivateEndpointServiceFeatureAvailableResult struct {
	// Set if the feature is enabled and available.
	Available bool `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	// Message why the feature is not available.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) Reset() {
	*m = IsPrivateEndpointServiceFeatureAvailableResult{}
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) String() string {
	return proto.CompactTextString(m)
}
func (*IsPrivateEndpointServiceFeatureAvailableResult) ProtoMessage() {}
func (*IsPrivateEndpointServiceFeatureAvailableResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{1}
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableResult.Merge(m, src)
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) XXX_Size() int {
	return m.Size()
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) XXX_DiscardUnknown() {
	xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableResult.DiscardUnknown(m)
}

var xxx_messageInfo_IsPrivateEndpointServiceFeatureAvailableResult proto.InternalMessageInfo

func (m *IsPrivateEndpointServiceFeatureAvailableResult) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// PrivateEndpointService represents the service part of the private endpoint
type PrivateEndpointService struct {
	// System identifier of the private endpoint service.
	// This is a read-only value.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// URL of this resource.
	// This is a read-only value.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Name of the private endpoint service.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the private endpoint service.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The creation timestamp of the private endpoint service
	// This is a read-only value.
	CreatedAt *types.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The deletion timestamp of the private endpoint service
	// This is a read-only value.
	DeletedAt *types.Timestamp `protobuf:"bytes,6,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Set when this private endpoint service is deleted.
	// This is a read-only value.
	IsDeleted bool `protobuf:"varint,7,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// Identifier of the deployment
	// After creation, this value cannot be changed.
	DeploymentId string `protobuf:"bytes,10,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Zero or more DNS names to include in the TLS certificate of the deployment.
	// This name should be resolvable in the private network (vNET/VPC) and can be used to connect
	// to the private endpoint to establish a SSL connection (where the name will be used during the handshake).
	AlternateDnsNames []string `protobuf:"bytes,11,rep,name=alternate_dns_names,json=alternateDnsNames,proto3" json:"alternate_dns_names,omitempty"`
	// Specific AKS setting.
	Aks *PrivateEndpointService_Aks `protobuf:"bytes,20,opt,name=aks,proto3" json:"aks,omitempty"`
	// Specific AWS setting.
	Aws *PrivateEndpointService_Aws `protobuf:"bytes,30,opt,name=aws,proto3" json:"aws,omitempty"`
	// Specific GCP setting.
	Gcp *PrivateEndpointService_Gcp `protobuf:"bytes,40,opt,name=gcp,proto3" json:"gcp,omitempty"`
	// Status of the private endpoint service.
	// All fields are read-only.
	Status               *PrivateEndpointService_Status `protobuf:"bytes,100,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *PrivateEndpointService) Reset()         { *m = PrivateEndpointService{} }
func (m *PrivateEndpointService) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService) ProtoMessage()    {}
func (*PrivateEndpointService) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2}
}
func (m *PrivateEndpointService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService.Merge(m, src)
}
func (m *PrivateEndpointService) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService proto.InternalMessageInfo

func (m *PrivateEndpointService) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PrivateEndpointService) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PrivateEndpointService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrivateEndpointService) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PrivateEndpointService) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PrivateEndpointService) GetDeletedAt() *types.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *PrivateEndpointService) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *PrivateEndpointService) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

func (m *PrivateEndpointService) GetAlternateDnsNames() []string {
	if m != nil {
		return m.AlternateDnsNames
	}
	return nil
}

func (m *PrivateEndpointService) GetAks() *PrivateEndpointService_Aks {
	if m != nil {
		return m.Aks
	}
	return nil
}

func (m *PrivateEndpointService) GetAws() *PrivateEndpointService_Aws {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *PrivateEndpointService) GetGcp() *PrivateEndpointService_Gcp {
	if m != nil {
		return m.Gcp
	}
	return nil
}

func (m *PrivateEndpointService) GetStatus() *PrivateEndpointService_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// Specific AKS setting.
type PrivateEndpointService_Aks struct {
	// The subscription IDs of the client side, needed to auto-approve private endpoint connections.
	// After a private endpoint connection has been made this field cannot be modified anymore.
	ClientSubscriptionIds []string `protobuf:"bytes,1,rep,name=client_subscription_ids,json=clientSubscriptionIds,proto3" json:"client_subscription_ids,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PrivateEndpointService_Aks) Reset()         { *m = PrivateEndpointService_Aks{} }
func (m *PrivateEndpointService_Aks) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_Aks) ProtoMessage()    {}
func (*PrivateEndpointService_Aks) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 0}
}
func (m *PrivateEndpointService_Aks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_Aks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_Aks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_Aks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_Aks.Merge(m, src)
}
func (m *PrivateEndpointService_Aks) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_Aks) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_Aks.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_Aks proto.InternalMessageInfo

func (m *PrivateEndpointService_Aks) GetClientSubscriptionIds() []string {
	if m != nil {
		return m.ClientSubscriptionIds
	}
	return nil
}

// Specific AWS principal setting.
type PrivateEndpointService_AwsPrincipals struct {
	// 12 digit AWS Account Identifier.
	// When both user_names and role_names are not provided all principals can be used to setup the private endpoint (account principal).
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Optional user names (when at least one user name is provided the specified IAM user(s)) are able to setup the private endpoint.
	// It is allowed to specify both users and roles
	UserNames []string `protobuf:"bytes,2,rep,name=user_names,json=userNames,proto3" json:"user_names,omitempty"`
	// Optional role names (when at least one role name is provided the specified IAM role(s)) are able to setup the private endpoint.
	// It is allowed to specify both users and roles
	RoleNames            []string `protobuf:"bytes,3,rep,name=role_names,json=roleNames,proto3" json:"role_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateEndpointService_AwsPrincipals) Reset()         { *m = PrivateEndpointService_AwsPrincipals{} }
func (m *PrivateEndpointService_AwsPrincipals) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_AwsPrincipals) ProtoMessage()    {}
func (*PrivateEndpointService_AwsPrincipals) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 1}
}
func (m *PrivateEndpointService_AwsPrincipals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_AwsPrincipals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_AwsPrincipals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_AwsPrincipals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_AwsPrincipals.Merge(m, src)
}
func (m *PrivateEndpointService_AwsPrincipals) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_AwsPrincipals) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_AwsPrincipals.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_AwsPrincipals proto.InternalMessageInfo

func (m *PrivateEndpointService_AwsPrincipals) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *PrivateEndpointService_AwsPrincipals) GetUserNames() []string {
	if m != nil {
		return m.UserNames
	}
	return nil
}

func (m *PrivateEndpointService_AwsPrincipals) GetRoleNames() []string {
	if m != nil {
		return m.RoleNames
	}
	return nil
}

// Specific AWS setting.
type PrivateEndpointService_Aws struct {
	// The AWS principals of the client side, needed to auto-approve private endpoint connections.
	// After a private endpoint connection has been made this field cannot be modified anymore.
	AwsPrincipals        []*PrivateEndpointService_AwsPrincipals `protobuf:"bytes,1,rep,name=aws_principals,json=awsPrincipals,proto3" json:"aws_principals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *PrivateEndpointService_Aws) Reset()         { *m = PrivateEndpointService_Aws{} }
func (m *PrivateEndpointService_Aws) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_Aws) ProtoMessage()    {}
func (*PrivateEndpointService_Aws) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 2}
}
func (m *PrivateEndpointService_Aws) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_Aws) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_Aws.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_Aws) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_Aws.Merge(m, src)
}
func (m *PrivateEndpointService_Aws) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_Aws) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_Aws.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_Aws proto.InternalMessageInfo

func (m *PrivateEndpointService_Aws) GetAwsPrincipals() []*PrivateEndpointService_AwsPrincipals {
	if m != nil {
		return m.AwsPrincipals
	}
	return nil
}

// Specific GCP setting.
type PrivateEndpointService_Gcp struct {
	// The projects of the client side, needed to auto-approve private endpoint connections.
	// After a private endpoint connection has been made this field cannot be modified anymore.
	Projects             []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateEndpointService_Gcp) Reset()         { *m = PrivateEndpointService_Gcp{} }
func (m *PrivateEndpointService_Gcp) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_Gcp) ProtoMessage()    {}
func (*PrivateEndpointService_Gcp) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 3}
}
func (m *PrivateEndpointService_Gcp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_Gcp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_Gcp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_Gcp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_Gcp.Merge(m, src)
}
func (m *PrivateEndpointService_Gcp) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_Gcp) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_Gcp.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_Gcp proto.InternalMessageInfo

func (m *PrivateEndpointService_Gcp) GetProjects() []string {
	if m != nil {
		return m.Projects
	}
	return nil
}

// Specific AKS private endpoint connection status fields.
type PrivateEndpointService_AksPrivateEndpointConnectionStatus struct {
	// The name of the private endpoint connection
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the private endpoint connection
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The state of the private endpoint connection
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// The private endpoint identifier
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) Reset() {
	*m = PrivateEndpointService_AksPrivateEndpointConnectionStatus{}
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) String() string {
	return proto.CompactTextString(m)
}
func (*PrivateEndpointService_AksPrivateEndpointConnectionStatus) ProtoMessage() {}
func (*PrivateEndpointService_AksPrivateEndpointConnectionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 4}
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_AksPrivateEndpointConnectionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_AksPrivateEndpointConnectionStatus.Merge(m, src)
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_AksPrivateEndpointConnectionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_AksPrivateEndpointConnectionStatus proto.InternalMessageInfo

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Specific AKS status fields.
// All fields are read-only.
type PrivateEndpointService_AksStatus struct {
	// The alias generated by the Azure private link service needed by the client to setup the private endpoint.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// The status of the private endpoint connections.
	PrivateEndpointConnections []*PrivateEndpointService_AksPrivateEndpointConnectionStatus `protobuf:"bytes,2,rep,name=private_endpoint_connections,json=privateEndpointConnections,proto3" json:"private_endpoint_connections,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                                     `json:"-"`
	XXX_unrecognized           []byte                                                       `json:"-"`
	XXX_sizecache              int32                                                        `json:"-"`
}

func (m *PrivateEndpointService_AksStatus) Reset()         { *m = PrivateEndpointService_AksStatus{} }
func (m *PrivateEndpointService_AksStatus) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_AksStatus) ProtoMessage()    {}
func (*PrivateEndpointService_AksStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 5}
}
func (m *PrivateEndpointService_AksStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_AksStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_AksStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_AksStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_AksStatus.Merge(m, src)
}
func (m *PrivateEndpointService_AksStatus) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_AksStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_AksStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_AksStatus proto.InternalMessageInfo

func (m *PrivateEndpointService_AksStatus) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *PrivateEndpointService_AksStatus) GetPrivateEndpointConnections() []*PrivateEndpointService_AksPrivateEndpointConnectionStatus {
	if m != nil {
		return m.PrivateEndpointConnections
	}
	return nil
}

// Specific AWS private endpoint connection status fields.
type PrivateEndpointService_AwsPrivateEndpointConnectionStatus struct {
	// The owner of the private endpoint connection
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The creation date the private endpoint connection
	CreatedAt *types.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The state of the private endpoint connection
	State string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// The private endpoint identifier
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) Reset() {
	*m = PrivateEndpointService_AwsPrivateEndpointConnectionStatus{}
}
func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) String() string {
	return proto.CompactTextString(m)
}
func (*PrivateEndpointService_AwsPrivateEndpointConnectionStatus) ProtoMessage() {}
func (*PrivateEndpointService_AwsPrivateEndpointConnectionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 6}
}
func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_AwsPrivateEndpointConnectionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_AwsPrivateEndpointConnectionStatus.Merge(m, src)
}
func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_AwsPrivateEndpointConnectionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_AwsPrivateEndpointConnectionStatus proto.InternalMessageInfo

func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Specific AWS status fields.
// All fields are read-only.
type PrivateEndpointService_AwsStatus struct {
	// The service name generated by the AWS VPC endpoint service needed by the client to setup the VPC endpoint.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The availability zones information needed to setup the VPC endpoint.
	AvailabilityZones []string `protobuf:"bytes,2,rep,name=availability_zones,json=availabilityZones,proto3" json:"availability_zones,omitempty"`
	// The status of the private endpoint connections.
	PrivateEndpointConnections []*PrivateEndpointService_AwsPrivateEndpointConnectionStatus `protobuf:"bytes,3,rep,name=private_endpoint_connections,json=privateEndpointConnections,proto3" json:"private_endpoint_connections,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                                     `json:"-"`
	XXX_unrecognized           []byte                                                       `json:"-"`
	XXX_sizecache              int32                                                        `json:"-"`
}

func (m *PrivateEndpointService_AwsStatus) Reset()         { *m = PrivateEndpointService_AwsStatus{} }
func (m *PrivateEndpointService_AwsStatus) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_AwsStatus) ProtoMessage()    {}
func (*PrivateEndpointService_AwsStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 7}
}
func (m *PrivateEndpointService_AwsStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_AwsStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_AwsStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_AwsStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_AwsStatus.Merge(m, src)
}
func (m *PrivateEndpointService_AwsStatus) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_AwsStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_AwsStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_AwsStatus proto.InternalMessageInfo

func (m *PrivateEndpointService_AwsStatus) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *PrivateEndpointService_AwsStatus) GetAvailabilityZones() []string {
	if m != nil {
		return m.AvailabilityZones
	}
	return nil
}

func (m *PrivateEndpointService_AwsStatus) GetPrivateEndpointConnections() []*PrivateEndpointService_AwsPrivateEndpointConnectionStatus {
	if m != nil {
		return m.PrivateEndpointConnections
	}
	return nil
}

// Specific GCP private endpoint connection status fields.
type PrivateEndpointService_GcpPrivateEndpointConnectionStatus struct {
	// The name of the private endpoint connection
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state of the private endpoint connection
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// The private endpoint identifier
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) Reset() {
	*m = PrivateEndpointService_GcpPrivateEndpointConnectionStatus{}
}
func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) String() string {
	return proto.CompactTextString(m)
}
func (*PrivateEndpointService_GcpPrivateEndpointConnectionStatus) ProtoMessage() {}
func (*PrivateEndpointService_GcpPrivateEndpointConnectionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 8}
}
func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_GcpPrivateEndpointConnectionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_GcpPrivateEndpointConnectionStatus.Merge(m, src)
}
func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_GcpPrivateEndpointConnectionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_GcpPrivateEndpointConnectionStatus proto.InternalMessageInfo

func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Specific GCP status fields.
// All fields are read-only.
type PrivateEndpointService_GcpStatus struct {
	// The service attachment generated by the Google private service connect needed by the client to setup the private endpoint.
	ServiceAttachment string `protobuf:"bytes,1,opt,name=service_attachment,json=serviceAttachment,proto3" json:"service_attachment,omitempty"`
	// The status of the private endpoint connections.
	PrivateEndpointConnections []*PrivateEndpointService_GcpPrivateEndpointConnectionStatus `protobuf:"bytes,2,rep,name=private_endpoint_connections,json=privateEndpointConnections,proto3" json:"private_endpoint_connections,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                                     `json:"-"`
	XXX_unrecognized           []byte                                                       `json:"-"`
	XXX_sizecache              int32                                                        `json:"-"`
}

func (m *PrivateEndpointService_GcpStatus) Reset()         { *m = PrivateEndpointService_GcpStatus{} }
func (m *PrivateEndpointService_GcpStatus) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_GcpStatus) ProtoMessage()    {}
func (*PrivateEndpointService_GcpStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 9}
}
func (m *PrivateEndpointService_GcpStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_GcpStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_GcpStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_GcpStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_GcpStatus.Merge(m, src)
}
func (m *PrivateEndpointService_GcpStatus) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_GcpStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_GcpStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_GcpStatus proto.InternalMessageInfo

func (m *PrivateEndpointService_GcpStatus) GetServiceAttachment() string {
	if m != nil {
		return m.ServiceAttachment
	}
	return ""
}

func (m *PrivateEndpointService_GcpStatus) GetPrivateEndpointConnections() []*PrivateEndpointService_GcpPrivateEndpointConnectionStatus {
	if m != nil {
		return m.PrivateEndpointConnections
	}
	return nil
}

// Status of the private endpoint service.
// All fields are read-only.
type PrivateEndpointService_Status struct {
	// Set when the private endpoint service is ready.
	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
	// The timestamp the ready flag has been set.
	ReadyAt *types.Timestamp `protobuf:"bytes,2,opt,name=ready_at,json=readyAt,proto3" json:"ready_at,omitempty"`
	// Set if this private endpoint service needs attention.
	NeedsAttention bool `protobuf:"varint,10,opt,name=needs_attention,json=needsAttention,proto3" json:"needs_attention,omitempty"`
	// Free text message describing the status.
	Message string `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	// Specific AKS status fields.
	// All fields are read-only.
	Aks *PrivateEndpointService_AksStatus `protobuf:"bytes,20,opt,name=aks,proto3" json:"aks,omitempty"`
	// Specific AWS status fields.
	// All fields are read-only.
	Aws *PrivateEndpointService_AwsStatus `protobuf:"bytes,30,opt,name=aws,proto3" json:"aws,omitempty"`
	// Specific GCP status fields.
	// All fields are read-only.
	Gcp                  *PrivateEndpointService_GcpStatus `protobuf:"bytes,40,opt,name=gcp,proto3" json:"gcp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *PrivateEndpointService_Status) Reset()         { *m = PrivateEndpointService_Status{} }
func (m *PrivateEndpointService_Status) String() string { return proto.CompactTextString(m) }
func (*PrivateEndpointService_Status) ProtoMessage()    {}
func (*PrivateEndpointService_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{2, 10}
}
func (m *PrivateEndpointService_Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateEndpointService_Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateEndpointService_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateEndpointService_Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateEndpointService_Status.Merge(m, src)
}
func (m *PrivateEndpointService_Status) XXX_Size() int {
	return m.Size()
}
func (m *PrivateEndpointService_Status) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateEndpointService_Status.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateEndpointService_Status proto.InternalMessageInfo

func (m *PrivateEndpointService_Status) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *PrivateEndpointService_Status) GetReadyAt() *types.Timestamp {
	if m != nil {
		return m.ReadyAt
	}
	return nil
}

func (m *PrivateEndpointService_Status) GetNeedsAttention() bool {
	if m != nil {
		return m.NeedsAttention
	}
	return false
}

func (m *PrivateEndpointService_Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PrivateEndpointService_Status) GetAks() *PrivateEndpointService_AksStatus {
	if m != nil {
		return m.Aks
	}
	return nil
}

func (m *PrivateEndpointService_Status) GetAws() *PrivateEndpointService_AwsStatus {
	if m != nil {
		return m.Aws
	}
	return nil
}

func (m *PrivateEndpointService_Status) GetGcp() *PrivateEndpointService_GcpStatus {
	if m != nil {
		return m.Gcp
	}
	return nil
}

func init() {
	proto.RegisterType((*IsPrivateEndpointServiceFeatureAvailableRequest)(nil), "arangodb.cloud.network.v1.IsPrivateEndpointServiceFeatureAvailableRequest")
	proto.RegisterType((*IsPrivateEndpointServiceFeatureAvailableResult)(nil), "arangodb.cloud.network.v1.IsPrivateEndpointServiceFeatureAvailableResult")
	proto.RegisterType((*PrivateEndpointService)(nil), "arangodb.cloud.network.v1.PrivateEndpointService")
	proto.RegisterType((*PrivateEndpointService_Aks)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.Aks")
	proto.RegisterType((*PrivateEndpointService_AwsPrincipals)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.AwsPrincipals")
	proto.RegisterType((*PrivateEndpointService_Aws)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.Aws")
	proto.RegisterType((*PrivateEndpointService_Gcp)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.Gcp")
	proto.RegisterType((*PrivateEndpointService_AksPrivateEndpointConnectionStatus)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.AksPrivateEndpointConnectionStatus")
	proto.RegisterType((*PrivateEndpointService_AksStatus)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.AksStatus")
	proto.RegisterType((*PrivateEndpointService_AwsPrivateEndpointConnectionStatus)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.AwsPrivateEndpointConnectionStatus")
	proto.RegisterType((*PrivateEndpointService_AwsStatus)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.AwsStatus")
	proto.RegisterType((*PrivateEndpointService_GcpPrivateEndpointConnectionStatus)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.GcpPrivateEndpointConnectionStatus")
	proto.RegisterType((*PrivateEndpointService_GcpStatus)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.GcpStatus")
	proto.RegisterType((*PrivateEndpointService_Status)(nil), "arangodb.cloud.network.v1.PrivateEndpointService.Status")
}

func init() { proto.RegisterFile("network.proto", fileDescriptor_8571034d60397816) }

var fileDescriptor_8571034d60397816 = []byte{
	// 1233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x67, 0xed, 0xfc, 0xf3, 0x73, 0x13, 0xc8, 0x10, 0x8a, 0xbb, 0x4d, 0x42, 0xe2, 0x1c, 0x1a,
	0xb5, 0xca, 0x9a, 0xa4, 0x6a, 0x54, 0x1a, 0x15, 0xb4, 0x6d, 0x5a, 0xcb, 0x88, 0x96, 0xc8, 0x29,
	0x1c, 0x7a, 0xc0, 0x1a, 0xef, 0x4e, 0x36, 0x8b, 0xd7, 0xbb, 0xc3, 0xce, 0xd8, 0x8b, 0x8b, 0x90,
	0x10, 0x12, 0x9f, 0x00, 0x09, 0x21, 0xc1, 0x07, 0x40, 0x7c, 0x04, 0x6e, 0xdc, 0x38, 0x22, 0x7a,
	0xe4, 0x82, 0x02, 0x9f, 0x01, 0xc4, 0x0d, 0xcd, 0xec, 0xec, 0x7a, 0x9b, 0xc4, 0x71, 0x6c, 0xda,
	0xdb, 0xce, 0x7b, 0x6f, 0x7e, 0xf3, 0xde, 0xef, 0xbd, 0x37, 0xf3, 0x16, 0x66, 0x7d, 0xc2, 0xa3,
	0x20, 0x6c, 0x19, 0x34, 0x0c, 0x78, 0x80, 0x2e, 0xe1, 0x10, 0xfb, 0x4e, 0x60, 0x37, 0x0d, 0xcb,
	0x0b, 0x3a, 0xb6, 0x91, 0x68, 0xbb, 0x9b, 0xfa, 0x45, 0x2b, 0x68, 0xb7, 0x03, 0xbf, 0xd2, 0xdd,
	0xac, 0xc4, 0x5f, 0xf1, 0x16, 0x7d, 0xc7, 0x71, 0xf9, 0x61, 0xa7, 0x69, 0x58, 0x41, 0xbb, 0xe2,
	0x04, 0x1e, 0xf6, 0x9d, 0x8a, 0x54, 0x34, 0x3b, 0x07, 0x15, 0xca, 0x7b, 0x94, 0xb0, 0x0a, 0x77,
	0xdb, 0x84, 0x71, 0xdc, 0xa6, 0xfd, 0x2f, 0xb5, 0x79, 0xd1, 0x09, 0x02, 0xc7, 0x23, 0x15, 0x4c,
	0xdd, 0x0a, 0xf6, 0xfd, 0x80, 0x63, 0xee, 0x06, 0x3e, 0x8b, 0xb5, 0xe5, 0xef, 0x35, 0xa8, 0xd4,
	0xd8, 0x5e, 0xe8, 0x76, 0x31, 0x27, 0xf7, 0x7c, 0x9b, 0x06, 0xae, 0xcf, 0xf7, 0x49, 0xd8, 0x75,
	0x2d, 0x72, 0x9f, 0x60, 0xde, 0x09, 0x89, 0xd9, 0xc5, 0xae, 0x87, 0x9b, 0x1e, 0xa9, 0x93, 0x4f,
	0x3a, 0x84, 0x71, 0xb4, 0x06, 0xb3, 0x36, 0xa1, 0x5e, 0xd0, 0x6b, 0x13, 0x9f, 0x37, 0x5c, 0xbb,
	0xa4, 0xad, 0x68, 0xeb, 0x85, 0xfa, 0x85, 0xbe, 0xb0, 0x66, 0xa3, 0x2b, 0xf0, 0x72, 0x10, 0x3a,
	0xd8, 0x77, 0x9f, 0xc8, 0xf3, 0x84, 0x59, 0x4e, 0x9a, 0xcd, 0x65, 0xc5, 0x35, 0x1b, 0x5d, 0x86,
	0x42, 0x48, 0x1c, 0x65, 0x92, 0x97, 0x26, 0x33, 0xb1, 0xa0, 0x66, 0x97, 0x0f, 0xc1, 0x38, 0xbf,
	0x77, 0xac, 0xe3, 0x71, 0xb4, 0x08, 0x05, 0x9c, 0x88, 0xa4, 0x63, 0x33, 0xf5, 0xbe, 0x00, 0x95,
	0x60, 0xba, 0x4d, 0x18, 0xc3, 0x0e, 0x51, 0xde, 0x24, 0xcb, 0xf2, 0xef, 0x08, 0x2e, 0x9e, 0x7e,
	0x10, 0x9a, 0x83, 0x5c, 0x1a, 0x64, 0xce, 0xb5, 0xd1, 0x2b, 0x90, 0xef, 0x84, 0x9e, 0x02, 0x10,
	0x9f, 0x08, 0xc1, 0x84, 0x8f, 0xdb, 0x44, 0xb9, 0x2f, 0xbf, 0xd1, 0x0a, 0x14, 0x6d, 0xc2, 0xac,
	0xd0, 0xa5, 0x22, 0xd0, 0xd2, 0x84, 0x54, 0x65, 0x45, 0xe8, 0x2d, 0x00, 0x2b, 0x24, 0x98, 0x13,
	0xbb, 0x81, 0x79, 0x69, 0x72, 0x45, 0x5b, 0x2f, 0x6e, 0xe9, 0x46, 0x9c, 0x2e, 0x23, 0x49, 0xb0,
	0xf1, 0x28, 0xc9, 0x67, 0xbd, 0xa0, 0xac, 0x4d, 0x2e, 0xb6, 0xda, 0xc4, 0x23, 0x6a, 0xeb, 0xd4,
	0xf0, 0xad, 0xca, 0xda, 0xe4, 0x68, 0x09, 0xc0, 0x65, 0x0d, 0xb5, 0x2e, 0x4d, 0xc7, 0x0c, 0xb9,
	0x6c, 0x37, 0x16, 0x9c, 0x4c, 0x2e, 0x9c, 0x92, 0x5c, 0x03, 0x5e, 0xc5, 0x1e, 0x27, 0xa1, 0x8f,
	0x39, 0x69, 0xd8, 0x3e, 0x6b, 0x88, 0x88, 0x59, 0xa9, 0xb8, 0x92, 0x5f, 0x2f, 0xd4, 0xe7, 0x53,
	0xd5, 0xae, 0xcf, 0x1e, 0x0a, 0x05, 0xaa, 0x42, 0x1e, 0xb7, 0x58, 0x69, 0x41, 0xfa, 0x79, 0xc3,
	0x18, 0xd8, 0x01, 0xc6, 0xe9, 0x19, 0x30, 0xcc, 0x16, 0xab, 0x0b, 0x04, 0x09, 0x14, 0xb1, 0xd2,
	0xf2, 0xd8, 0x40, 0x91, 0x00, 0x8a, 0x24, 0x90, 0x63, 0xd1, 0xd2, 0xfa, 0xb8, 0x40, 0x55, 0x8b,
	0xd6, 0x05, 0x02, 0xda, 0x83, 0x29, 0xc6, 0x31, 0xef, 0xb0, 0x92, 0x2d, 0xb1, 0x6e, 0x8e, 0x8e,
	0xb5, 0x2f, 0xf7, 0xd7, 0x15, 0x8e, 0x7e, 0x1b, 0xf2, 0x66, 0x8b, 0xa1, 0x6d, 0x78, 0xdd, 0xf2,
	0x5c, 0x91, 0x04, 0xd6, 0x69, 0xa6, 0x45, 0xd3, 0x70, 0x6d, 0x56, 0xd2, 0x24, 0xcf, 0xaf, 0xc5,
	0xea, 0xfd, 0x8c, 0xb6, 0x66, 0x33, 0xdd, 0x83, 0x59, 0x33, 0x12, 0x3d, 0xe3, 0x5b, 0x2e, 0xc5,
	0x1e, 0x13, 0x09, 0xc7, 0x96, 0x15, 0x74, 0xb2, 0xbd, 0x5a, 0x50, 0x92, 0x9a, 0x2d, 0xd4, 0x1d,
	0x46, 0x42, 0x95, 0xc2, 0x9c, 0x84, 0x2e, 0x08, 0x49, 0x9c, 0xba, 0x25, 0x80, 0x30, 0xf0, 0x88,
	0x52, 0xe7, 0x63, 0xb5, 0x90, 0x48, 0xb5, 0xde, 0x86, 0xbc, 0x19, 0x31, 0x74, 0x00, 0x73, 0x38,
	0x62, 0x0d, 0x9a, 0x9e, 0x2a, 0x7d, 0x2c, 0x6e, 0xbd, 0x33, 0x56, 0x8a, 0xfa, 0xce, 0xd7, 0x67,
	0x71, 0x76, 0xa9, 0xaf, 0x42, 0xbe, 0x6a, 0x51, 0xa4, 0xc3, 0x0c, 0x0d, 0x83, 0x8f, 0x89, 0xc5,
	0x13, 0x32, 0xd2, 0xb5, 0xfe, 0x85, 0x06, 0x65, 0xb3, 0x75, 0xfc, 0xd2, 0xb8, 0x1b, 0xf8, 0x3e,
	0xb1, 0x04, 0x47, 0x31, 0xdb, 0x69, 0xcb, 0x6a, 0x83, 0x5b, 0x36, 0x77, 0xb2, 0x65, 0x17, 0x60,
	0x52, 0x64, 0x29, 0xe9, 0xf4, 0x78, 0xa1, 0x2e, 0x88, 0x89, 0xe4, 0x82, 0xd0, 0x7f, 0xd2, 0xa0,
	0x60, 0xb6, 0x98, 0x3a, 0x69, 0x01, 0x26, 0xb1, 0xe7, 0x62, 0xa6, 0x8e, 0x8a, 0x17, 0xe8, 0x1b,
	0x0d, 0x16, 0x69, 0xec, 0x63, 0x83, 0x28, 0x27, 0x1b, 0x56, 0xea, 0x65, 0x9c, 0x89, 0xe2, 0xd6,
	0xa3, 0xb1, 0x9a, 0x65, 0x48, 0xf0, 0x75, 0x9d, 0x0e, 0x32, 0x60, 0xfa, 0x77, 0x82, 0xbf, 0x68,
	0x28, 0x7f, 0x0b, 0x30, 0x19, 0x44, 0x3e, 0x09, 0x93, 0xa8, 0xe4, 0xe2, 0xd8, 0x95, 0x96, 0x1b,
	0xe5, 0x4a, 0x3b, 0x1f, 0xb5, 0x7f, 0x0b, 0x6a, 0xa3, 0x84, 0xda, 0x55, 0xb8, 0xc0, 0xe2, 0xa8,
	0x1b, 0x99, 0x64, 0x16, 0x95, 0x4c, 0x54, 0x28, 0xda, 0x00, 0xa4, 0xae, 0x7f, 0xd7, 0x73, 0x79,
	0xaf, 0xf1, 0x24, 0xf0, 0xd3, 0x32, 0x9f, 0xcf, 0x6a, 0x1e, 0x0b, 0xc5, 0xf0, 0xb4, 0xe4, 0xc7,
	0x4e, 0x4b, 0xf4, 0xbf, 0xd2, 0xf2, 0x11, 0x94, 0xab, 0x16, 0x1d, 0xa7, 0xaa, 0x53, 0x62, 0x73,
	0x27, 0x89, 0xcd, 0xa7, 0xc4, 0x3e, 0xd5, 0xa0, 0x50, 0xb5, 0xa8, 0xc2, 0xd9, 0x00, 0x94, 0x10,
	0x8b, 0x39, 0xc7, 0xd6, 0xa1, 0xb8, 0xf8, 0x15, 0xea, 0xbc, 0xd2, 0x98, 0xa9, 0xe2, 0x05, 0x16,
	0xf3, 0xf0, 0x98, 0xcf, 0x64, 0xed, 0xab, 0x3c, 0x4c, 0xf5, 0x0b, 0x36, 0x24, 0xd8, 0xee, 0xa9,
	0xa1, 0x20, 0x5e, 0xa0, 0x1b, 0x30, 0x23, 0x3f, 0xce, 0x57, 0xae, 0xd3, 0xd2, 0xd6, 0xe4, 0x62,
	0xba, 0xf1, 0x09, 0xb1, 0x99, 0x60, 0x87, 0xf8, 0xf2, 0xb6, 0x00, 0x09, 0x3b, 0x27, 0xc5, 0x66,
	0x22, 0xcd, 0x0e, 0x1c, 0xc5, 0x67, 0x06, 0x0e, 0xf4, 0x20, 0xfb, 0x26, 0xee, 0x8c, 0xd5, 0xe6,
	0x8a, 0x00, 0xf9, 0x32, 0x3e, 0xc8, 0xbe, 0x8c, 0x3b, 0x63, 0x95, 0x67, 0x0a, 0x17, 0x49, 0xb8,
	0xfe, 0xfb, 0xb8, 0x33, 0x56, 0xde, 0x12, 0x38, 0xc7, 0xa2, 0x5b, 0xff, 0xcc, 0xc0, 0xdc, 0xc3,
	0x78, 0x53, 0x32, 0x55, 0x7d, 0x0a, 0xb3, 0x55, 0xc2, 0xcd, 0xbd, 0xda, 0x87, 0x24, 0x64, 0x82,
	0xaa, 0x37, 0x8e, 0x9f, 0xa2, 0x66, 0xe0, 0xee, 0xa6, 0x71, 0xaf, 0x4d, 0x79, 0x4f, 0x5f, 0x1d,
	0x6c, 0xa0, 0x30, 0xca, 0x6b, 0x5f, 0x3e, 0xfd, 0xeb, 0xeb, 0xdc, 0x12, 0xba, 0x2c, 0xc7, 0x5d,
	0xe5, 0xa6, 0x98, 0xa7, 0x31, 0x75, 0x37, 0xba, 0xea, 0xa0, 0x7f, 0x35, 0x58, 0x3f, 0xef, 0x54,
	0x89, 0xde, 0x3d, 0x23, 0xf6, 0x11, 0x07, 0x67, 0xbd, 0xf6, 0x5c, 0xb0, 0xc4, 0x98, 0x5b, 0xde,
	0x96, 0x81, 0xbe, 0x59, 0x36, 0x8e, 0x07, 0xaa, 0x9a, 0x21, 0xe9, 0x42, 0xd5, 0xab, 0x95, 0x83,
	0x18, 0x06, 0xfd, 0xa0, 0xc1, 0xa5, 0x2a, 0xe1, 0x03, 0x26, 0xdd, 0xb5, 0xc1, 0x0c, 0xd7, 0x76,
	0xdf, 0xa7, 0x71, 0x4f, 0x6d, 0x8e, 0x5c, 0x0d, 0xe5, 0xeb, 0xd2, 0xdb, 0x0d, 0x74, 0xed, 0x9c,
	0xde, 0x7e, 0xe6, 0xda, 0x9f, 0xa3, 0x9f, 0x35, 0xb8, 0x32, 0xd0, 0xd5, 0x3b, 0xbd, 0xdd, 0xfe,
	0x40, 0xba, 0xfb, 0xc2, 0x1c, 0x7f, 0x5b, 0x3a, 0x7e, 0x13, 0x6d, 0x1f, 0x77, 0xbc, 0x3f, 0x0e,
	0x4b, 0x67, 0x07, 0x04, 0x82, 0x7e, 0xd3, 0x60, 0xf1, 0xae, 0x7c, 0xe2, 0x06, 0x30, 0x3e, 0xba,
	0x4f, 0xe3, 0x84, 0xf1, 0x9e, 0x0c, 0xe3, 0x7e, 0xd9, 0x3c, 0x2b, 0x8c, 0x67, 0xc6, 0xfe, 0x41,
	0x11, 0xdd, 0xd2, 0xae, 0xa2, 0x1f, 0x35, 0x58, 0xfc, 0x80, 0xda, 0xcf, 0x35, 0xa8, 0x61, 0xcd,
	0x9f, 0x14, 0xfc, 0xd6, 0x28, 0x25, 0x74, 0x4b, 0xbb, 0x7a, 0xe7, 0xf6, 0x2f, 0x47, 0xcb, 0xda,
	0xaf, 0x47, 0xcb, 0xda, 0x1f, 0x47, 0xcb, 0xda, 0xb7, 0x7f, 0x2e, 0xbf, 0xf4, 0xf8, 0x5a, 0xe6,
	0x6f, 0x3a, 0x39, 0x74, 0xa3, 0x8d, 0x7d, 0xec, 0x10, 0x5b, 0x80, 0xb3, 0x0c, 0x7a, 0x73, 0x4a,
	0xbe, 0x02, 0xd7, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x77, 0x44, 0x21, 0xc5, 0x0f, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error)
	// Checks if the private endpoint service feature is enabled and available.
	// Required permissions:
	// - network.privateendpointservice.get-feature on the deployment that is identified by the given deployment ID (if specified).
	// - network.privateendpointservice.get-feature on the organization that is identified by the given organization ID (if specified).
	// - None, authenticated only (if only the region ID is specified).
	IsPrivateEndpointServiceFeatureAvailable(ctx context.Context, in *IsPrivateEndpointServiceFeatureAvailableRequest, opts ...grpc.CallOption) (*IsPrivateEndpointServiceFeatureAvailableResult, error)
	// Fetch a private endpoint service by its ID.
	// Required permissions:
	// - network.privateendpointservice.get on the private endpoint service.
	GetPrivateEndpointService(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error)
	// Fetch a private endpoint service by the deployment ID.
	// Required permissions:
	// - network.privateendpointservice.get-by-deployment-id on the deployment that owns the private endpoint service.
	GetPrivateEndpointServiceByDeploymentID(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error)
	// Create a new private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.create on the deployment that owns the private endpoint service.
	CreatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*PrivateEndpointService, error)
	// Update the private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.update on the private endpoint service.
	UpdatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*v1.Empty, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) GetAPIVersion(ctx context.Context, in *v1.Empty, opts ...grpc.CallOption) (*v1.Version, error) {
	out := new(v1.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) IsPrivateEndpointServiceFeatureAvailable(ctx context.Context, in *IsPrivateEndpointServiceFeatureAvailableRequest, opts ...grpc.CallOption) (*IsPrivateEndpointServiceFeatureAvailableResult, error) {
	out := new(IsPrivateEndpointServiceFeatureAvailableResult)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/IsPrivateEndpointServiceFeatureAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetPrivateEndpointService(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error) {
	out := new(PrivateEndpointService)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) GetPrivateEndpointServiceByDeploymentID(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*PrivateEndpointService, error) {
	out := new(PrivateEndpointService)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointServiceByDeploymentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) CreatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*PrivateEndpointService, error) {
	out := new(PrivateEndpointService)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/CreatePrivateEndpointService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) UpdatePrivateEndpointService(ctx context.Context, in *PrivateEndpointService, opts ...grpc.CallOption) (*v1.Empty, error) {
	out := new(v1.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.network.v1.NetworkService/UpdatePrivateEndpointService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
type NetworkServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v1.Empty) (*v1.Version, error)
	// Checks if the private endpoint service feature is enabled and available.
	// Required permissions:
	// - network.privateendpointservice.get-feature on the deployment that is identified by the given deployment ID (if specified).
	// - network.privateendpointservice.get-feature on the organization that is identified by the given organization ID (if specified).
	// - None, authenticated only (if only the region ID is specified).
	IsPrivateEndpointServiceFeatureAvailable(context.Context, *IsPrivateEndpointServiceFeatureAvailableRequest) (*IsPrivateEndpointServiceFeatureAvailableResult, error)
	// Fetch a private endpoint service by its ID.
	// Required permissions:
	// - network.privateendpointservice.get on the private endpoint service.
	GetPrivateEndpointService(context.Context, *v1.IDOptions) (*PrivateEndpointService, error)
	// Fetch a private endpoint service by the deployment ID.
	// Required permissions:
	// - network.privateendpointservice.get-by-deployment-id on the deployment that owns the private endpoint service.
	GetPrivateEndpointServiceByDeploymentID(context.Context, *v1.IDOptions) (*PrivateEndpointService, error)
	// Create a new private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.create on the deployment that owns the private endpoint service.
	CreatePrivateEndpointService(context.Context, *PrivateEndpointService) (*PrivateEndpointService, error)
	// Update the private endpoint service.
	// Required permissions:
	// - network.privateendpointservice.update on the private endpoint service.
	UpdatePrivateEndpointService(context.Context, *PrivateEndpointService) (*v1.Empty, error)
}

// UnimplementedNetworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (*UnimplementedNetworkServiceServer) GetAPIVersion(ctx context.Context, req *v1.Empty) (*v1.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedNetworkServiceServer) IsPrivateEndpointServiceFeatureAvailable(ctx context.Context, req *IsPrivateEndpointServiceFeatureAvailableRequest) (*IsPrivateEndpointServiceFeatureAvailableResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPrivateEndpointServiceFeatureAvailable not implemented")
}
func (*UnimplementedNetworkServiceServer) GetPrivateEndpointService(ctx context.Context, req *v1.IDOptions) (*PrivateEndpointService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateEndpointService not implemented")
}
func (*UnimplementedNetworkServiceServer) GetPrivateEndpointServiceByDeploymentID(ctx context.Context, req *v1.IDOptions) (*PrivateEndpointService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateEndpointServiceByDeploymentID not implemented")
}
func (*UnimplementedNetworkServiceServer) CreatePrivateEndpointService(ctx context.Context, req *PrivateEndpointService) (*PrivateEndpointService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateEndpointService not implemented")
}
func (*UnimplementedNetworkServiceServer) UpdatePrivateEndpointService(ctx context.Context, req *PrivateEndpointService) (*v1.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivateEndpointService not implemented")
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetAPIVersion(ctx, req.(*v1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_IsPrivateEndpointServiceFeatureAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPrivateEndpointServiceFeatureAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).IsPrivateEndpointServiceFeatureAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/IsPrivateEndpointServiceFeatureAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).IsPrivateEndpointServiceFeatureAvailable(ctx, req.(*IsPrivateEndpointServiceFeatureAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetPrivateEndpointService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetPrivateEndpointService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetPrivateEndpointService(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_GetPrivateEndpointServiceByDeploymentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetPrivateEndpointServiceByDeploymentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/GetPrivateEndpointServiceByDeploymentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetPrivateEndpointServiceByDeploymentID(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_CreatePrivateEndpointService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateEndpointService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).CreatePrivateEndpointService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/CreatePrivateEndpointService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).CreatePrivateEndpointService(ctx, req.(*PrivateEndpointService))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_UpdatePrivateEndpointService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateEndpointService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).UpdatePrivateEndpointService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.network.v1.NetworkService/UpdatePrivateEndpointService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).UpdatePrivateEndpointService(ctx, req.(*PrivateEndpointService))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.network.v1.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _NetworkService_GetAPIVersion_Handler,
		},
		{
			MethodName: "IsPrivateEndpointServiceFeatureAvailable",
			Handler:    _NetworkService_IsPrivateEndpointServiceFeatureAvailable_Handler,
		},
		{
			MethodName: "GetPrivateEndpointService",
			Handler:    _NetworkService_GetPrivateEndpointService_Handler,
		},
		{
			MethodName: "GetPrivateEndpointServiceByDeploymentID",
			Handler:    _NetworkService_GetPrivateEndpointServiceByDeploymentID_Handler,
		},
		{
			MethodName: "CreatePrivateEndpointService",
			Handler:    _NetworkService_CreatePrivateEndpointService_Handler,
		},
		{
			MethodName: "UpdatePrivateEndpointService",
			Handler:    _NetworkService_UpdatePrivateEndpointService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsPrivateEndpointServiceFeatureAvailableRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RegionId) > 0 {
		i -= len(m.RegionId)
		copy(dAtA[i:], m.RegionId)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.RegionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrganizationId) > 0 {
		i -= len(m.OrganizationId)
		copy(dAtA[i:], m.OrganizationId)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.OrganizationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Available {
		i--
		if m.Available {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if m.Gcp != nil {
		{
			size, err := m.Gcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.Aks != nil {
		{
			size, err := m.Aks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.AlternateDnsNames) > 0 {
		for iNdEx := len(m.AlternateDnsNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AlternateDnsNames[iNdEx])
			copy(dAtA[i:], m.AlternateDnsNames[iNdEx])
			i = encodeVarintNetwork(dAtA, i, uint64(len(m.AlternateDnsNames[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.DeploymentId) > 0 {
		i -= len(m.DeploymentId)
		copy(dAtA[i:], m.DeploymentId)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.DeploymentId)))
		i--
		dAtA[i] = 0x52
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_Aks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_Aks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_Aks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ClientSubscriptionIds) > 0 {
		for iNdEx := len(m.ClientSubscriptionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClientSubscriptionIds[iNdEx])
			copy(dAtA[i:], m.ClientSubscriptionIds[iNdEx])
			i = encodeVarintNetwork(dAtA, i, uint64(len(m.ClientSubscriptionIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_AwsPrincipals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_AwsPrincipals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_AwsPrincipals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoleNames) > 0 {
		for iNdEx := len(m.RoleNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoleNames[iNdEx])
			copy(dAtA[i:], m.RoleNames[iNdEx])
			i = encodeVarintNetwork(dAtA, i, uint64(len(m.RoleNames[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.UserNames) > 0 {
		for iNdEx := len(m.UserNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserNames[iNdEx])
			copy(dAtA[i:], m.UserNames[iNdEx])
			i = encodeVarintNetwork(dAtA, i, uint64(len(m.UserNames[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_Aws) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_Aws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_Aws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AwsPrincipals) > 0 {
		for iNdEx := len(m.AwsPrincipals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AwsPrincipals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetwork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_Gcp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_Gcp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_Gcp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Projects[iNdEx])
			copy(dAtA[i:], m.Projects[iNdEx])
			i = encodeVarintNetwork(dAtA, i, uint64(len(m.Projects[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_AksStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_AksStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_AksStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrivateEndpointConnections) > 0 {
		for iNdEx := len(m.PrivateEndpointConnections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateEndpointConnections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetwork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Alias) > 0 {
		i -= len(m.Alias)
		copy(dAtA[i:], m.Alias)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Alias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_AwsStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_AwsStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_AwsStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrivateEndpointConnections) > 0 {
		for iNdEx := len(m.PrivateEndpointConnections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateEndpointConnections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetwork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AvailabilityZones) > 0 {
		for iNdEx := len(m.AvailabilityZones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvailabilityZones[iNdEx])
			copy(dAtA[i:], m.AvailabilityZones[iNdEx])
			i = encodeVarintNetwork(dAtA, i, uint64(len(m.AvailabilityZones[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_GcpStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_GcpStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_GcpStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrivateEndpointConnections) > 0 {
		for iNdEx := len(m.PrivateEndpointConnections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateEndpointConnections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNetwork(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ServiceAttachment) > 0 {
		i -= len(m.ServiceAttachment)
		copy(dAtA[i:], m.ServiceAttachment)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.ServiceAttachment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateEndpointService_Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateEndpointService_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateEndpointService_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Gcp != nil {
		{
			size, err := m.Gcp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if m.Aws != nil {
		{
			size, err := m.Aws.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.Aks != nil {
		{
			size, err := m.Aks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x5a
	}
	if m.NeedsAttention {
		i--
		if m.NeedsAttention {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ReadyAt != nil {
		{
			size, err := m.ReadyAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetwork(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Ready {
		i--
		if m.Ready {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.OrganizationId)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.RegionId)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsPrivateEndpointServiceFeatureAvailableResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Available {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.IsDeleted {
		n += 2
	}
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.AlternateDnsNames) > 0 {
		for _, s := range m.AlternateDnsNames {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.Aks != nil {
		l = m.Aks.Size()
		n += 2 + l + sovNetwork(uint64(l))
	}
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 2 + l + sovNetwork(uint64(l))
	}
	if m.Gcp != nil {
		l = m.Gcp.Size()
		n += 2 + l + sovNetwork(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 2 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_Aks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClientSubscriptionIds) > 0 {
		for _, s := range m.ClientSubscriptionIds {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_AwsPrincipals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.UserNames) > 0 {
		for _, s := range m.UserNames {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.RoleNames) > 0 {
		for _, s := range m.RoleNames {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_Aws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AwsPrincipals) > 0 {
		for _, e := range m.AwsPrincipals {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_Gcp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Projects) > 0 {
		for _, s := range m.Projects {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_AksStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.PrivateEndpointConnections) > 0 {
		for _, e := range m.PrivateEndpointConnections {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_AwsStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.AvailabilityZones) > 0 {
		for _, s := range m.AvailabilityZones {
			l = len(s)
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if len(m.PrivateEndpointConnections) > 0 {
		for _, e := range m.PrivateEndpointConnections {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_GcpStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceAttachment)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.PrivateEndpointConnections) > 0 {
		for _, e := range m.PrivateEndpointConnections {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateEndpointService_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ready {
		n += 2
	}
	if m.ReadyAt != nil {
		l = m.ReadyAt.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.NeedsAttention {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Aks != nil {
		l = m.Aks.Size()
		n += 2 + l + sovNetwork(uint64(l))
	}
	if m.Aws != nil {
		l = m.Aws.Size()
		n += 2 + l + sovNetwork(uint64(l))
	}
	if m.Gcp != nil {
		l = m.Gcp.Size()
		n += 2 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IsPrivateEndpointServiceFeatureAvailableRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsPrivateEndpointServiceFeatureAvailableRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsPrivateEndpointServiceFeatureAvailableRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsPrivateEndpointServiceFeatureAvailableResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsPrivateEndpointServiceFeatureAvailableResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsPrivateEndpointServiceFeatureAvailableResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Available = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateEndpointService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateEndpointService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &types.Timestamp{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlternateDnsNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlternateDnsNames = append(m.AlternateDnsNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aks == nil {
				m.Aks = &PrivateEndpointService_Aks{}
			}
			if err := m.Aks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aws == nil {
				m.Aws = &PrivateEndpointService_Aws{}
			}
			if err := m.Aws.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gcp == nil {
				m.Gcp = &PrivateEndpointService_Gcp{}
			}
			if err := m.Gcp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PrivateEndpointService_Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_Aks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSubscriptionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSubscriptionIds = append(m.ClientSubscriptionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_AwsPrincipals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwsPrincipals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwsPrincipals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserNames = append(m.UserNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleNames = append(m.RoleNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_Aws) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aws: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aws: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsPrincipals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwsPrincipals = append(m.AwsPrincipals, &PrivateEndpointService_AwsPrincipals{})
			if err := m.AwsPrincipals[len(m.AwsPrincipals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_Gcp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gcp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gcp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_AksPrivateEndpointConnectionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AksPrivateEndpointConnectionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AksPrivateEndpointConnectionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_AksStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AksStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AksStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateEndpointConnections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateEndpointConnections = append(m.PrivateEndpointConnections, &PrivateEndpointService_AksPrivateEndpointConnectionStatus{})
			if err := m.PrivateEndpointConnections[len(m.PrivateEndpointConnections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_AwsPrivateEndpointConnectionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwsPrivateEndpointConnectionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwsPrivateEndpointConnectionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_AwsStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwsStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwsStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityZones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailabilityZones = append(m.AvailabilityZones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateEndpointConnections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateEndpointConnections = append(m.PrivateEndpointConnections, &PrivateEndpointService_AwsPrivateEndpointConnectionStatus{})
			if err := m.PrivateEndpointConnections[len(m.PrivateEndpointConnections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_GcpPrivateEndpointConnectionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GcpPrivateEndpointConnectionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GcpPrivateEndpointConnectionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_GcpStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GcpStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GcpStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAttachment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAttachment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateEndpointConnections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateEndpointConnections = append(m.PrivateEndpointConnections, &PrivateEndpointService_GcpPrivateEndpointConnectionStatus{})
			if err := m.PrivateEndpointConnections[len(m.PrivateEndpointConnections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateEndpointService_Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ready = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadyAt == nil {
				m.ReadyAt = &types.Timestamp{}
			}
			if err := m.ReadyAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedsAttention", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedsAttention = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aks == nil {
				m.Aks = &PrivateEndpointService_AksStatus{}
			}
			if err := m.Aks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aws", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Aws == nil {
				m.Aws = &PrivateEndpointService_AwsStatus{}
			}
			if err := m.Aws.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gcp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gcp == nil {
				m.Gcp = &PrivateEndpointService_GcpStatus{}
			}
			if err := m.Gcp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetwork = fmt.Errorf("proto: unexpected end of group")
)
