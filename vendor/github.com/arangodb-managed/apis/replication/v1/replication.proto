// 
// DISCLAIMER
// 
// Copyright 2020-2022 ArangoDB GmbH, Cologne, Germany
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Copyright holder is ArangoDB GmbH, Cologne, Germany
// 

syntax = "proto3";

package arangodb.cloud.replication.v1;

option go_package = "github.com/arangodb-managed/apis/replication/v1";

import "common/v1/common.proto";
import "data/v1/data.proto";

import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "google/api/annotations.proto";

// ReplicationService is the API used to replicate a deployment.
service ReplicationService {
    // Get the current API version of this service.
    // Required permissions:
    // - None
    rpc GetAPIVersion(common.v1.Empty) returns (common.v1.Version) {
        option (google.api.http) = {
            get: "/api/replication/v1/api-version"
        };
    }

    // Takes a backup and creates a deployment from it. For all intents and purposes this new deployment
    // will be the same as the deployment at that exact moment when the backup was taken from it. This means that
    // the new deployment will be in the same project and use the same provider as the old deployment did. Optionally
    // a different region can be provided using the region id field on the request. Furthermore, the new deployment
    // will have the same server settings ( count, mode, replication factor ) as the old deployment did at the time
    // of taking the backup. After the new deployment successfully started, the backup will be used to restore the
    // data into the new deployment. The new deployment will have a different endpoint, and the password will also
    // be reset for it. All other user settings will remain the same.
    // The old deployment will not be touched.
    // Required permissions:
    // if project_id is specified
    // - backup.backup.get on the backup specified by backup_id in request
    // - replication.deployment.clone-from-backup on the project specified in request
    // if project_id is not specified
    // - replication.deployment.clone-from-backup on the backup specified by backup_id
    rpc CloneDeploymentFromBackup(CloneDeploymentFromBackupRequest) returns (data.v1.Deployment) {
        option (google.api.http) = {
            post: "/api/replication/v1/backup/{backup_id}/clone"
            body: "*"
        };
    }

    // Get an existing DeploymentReplication using its deployment ID
    // Required permissions:
    // - replication.deploymentreplication.get
    rpc GetDeploymentReplication(common.v1.IDOptions) returns (DeploymentReplication) {
        option (google.api.http) = {
            get: "/api/replication/v1/deployment/{id}/replication"
        };
    } 

    // Update an existing DeploymentReplication spec. If does not exist, this will create a new one.
    // This call expects the complete entity with the updated fields.
    // Required permissions:
    // - replication.deploymentreplication.update
    rpc UpdateDeploymentReplication(DeploymentReplication) returns (DeploymentReplication) {
        option (google.api.http) = {
            put: "/api/replication/v1/deployment/{deployment_id}/replication"
            body: "*"
        };
    }
}

// CloneDeploymentFromBackupRequest defines a request object for clone deployment call.
message CloneDeploymentFromBackupRequest {
    // The ID of the backup to clone a deployment from.
    string backup_id = 1;
    // Target region.
    // This is an optional field
    string region_id = 2;
    // This field must be set to the identifier of the current Terms&Conditions
    // when cloning a deployment.
    // If the tier of the organization does not require a non-empty Terms&Condition
    // identifier, this field may be left empty.
    // If this field is not set the terms and conditions of the source deployment will be used.
    string accepted_terms_and_conditions_id = 3;
    // Target project identifier.
    // This is an optional field
    string project_id = 4;
}

// DeploymentReplication defines a request object for creating or updating a deployment replication
message DeploymentReplication {
    // Identifier of the deployment for a given DeploymentReplication
    string deployment_id = 1;
    // Start the replication process for the given deployment.
    bool started = 2;
    // A PEM encoded representation of the public key of the CA certificate used to verify sync master in source deployment.
    string certificate_pem = 3;
    // A PEM encoded representation of the keyfile used for client authentication of the sync master (with the sync master in the source deployment).
    // A keyfile contains 1 or more certificates and a private key.
    string tls_keyfile = 4;
    // List of master endpoints at source deployment.
    // This setting will be removed for migration-agent v1.0.0 and is needed for the BETA version only.
    repeated string master_endpoint = 5;
    
    // CancelationOptions describes what to do during cancelation process of the migration-agent.
    message CancelationOptions{
        // If set, during cancelation process data consistency is not required (otherwise data consistency is required).
        bool data_consistency_not_required = 1;
        // If set, after cancelation the source deployment will be in read-only mode.
        bool make_source_deployment_read_only = 2;
    }
    // CancelationOptions describes what to do during cancelation process of the migration-agent.
    CancelationOptions cancelation_options = 10;
   
    // DeploymentReplicationStatus defines the status of a deployment replication.
    // Note: All fields in this message block are read-only.
    message Status {
        // Where the deployment replication process is in its lifecycle at any given time.
        // Should only contain only one of the following values:
        // "Initialising"   - Replication has started, waiting for sync masters / workers.
        // "In-Progress"    - Replication has started and currently in progress.
        // "Error"          - Replication is in an errored state.
        // "Failed"         - Replication could not complete successfully.
        // "Stopping"       - Replication is being stopped.
        // "Completed"      - Replication is stopped and all resources cleaned up properly.
        string phase = 1;
        // Supporting information about the deployment replication phase - such as error messages in case of failures.
        // This field will be in JSON format and can be built using the `AsJSON()` helper.
        // Use `FromJSON()` helper to parse this field.
        // See - replication/v1/message.go in this repository.
        string message = 2;
        // Total number of shards that should be in-sync.
        int32 total_shards = 3;
        // Number of shards currently in-sync.
        int32 shards_in_sync = 4;
        // Service (LoadBalancer) endpoint of the SyncMasters
        // This field has the format of a URL.
        // This is a readonly field.
        string sync_endpoint = 5;
        // The timestamp of when the Phase of the Deployment Replication was last updated.
        // This is a readonly field.
        google.protobuf.Timestamp phase_updated_at = 6;
    }
    // Status of the DeploymentReplication.
    Status status = 100;
}
