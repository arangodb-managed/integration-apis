// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dataservice.proto

package v1

import (
	context "context"
	fmt "fmt"
	v1 "github.com/arangodb-managed/apis/common/v1"
	v11 "github.com/arangodb-managed/apis/data/v1"
	_ "github.com/arangodb-managed/integration-apis/common/v1"
	_ "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("dataservice.proto", fileDescriptor_2a4d2d62adc5d541) }

var fileDescriptor_2a4d2d62adc5d541 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0xbd, 0x4e, 0xf4, 0x30,
	0x10, 0xfc, 0xd2, 0x7c, 0xc5, 0x51, 0x91, 0x02, 0xa4, 0x13, 0x4a, 0x43, 0x89, 0x62, 0x2b, 0x50,
	0x22, 0x51, 0xc0, 0x49, 0x88, 0x0a, 0x04, 0x1d, 0xdd, 0x26, 0x59, 0x8c, 0x45, 0xec, 0xb5, 0xec,
	0x8d, 0xa5, 0x2b, 0x79, 0x0b, 0x1e, 0x89, 0x92, 0x47, 0x40, 0xe1, 0x45, 0x50, 0x7e, 0x4e, 0x09,
	0x57, 0x79, 0x35, 0x3b, 0x9e, 0x9d, 0x99, 0xd5, 0x61, 0x0d, 0x0c, 0x01, 0x7d, 0xd4, 0x15, 0x0a,
	0xe7, 0x89, 0x29, 0x3d, 0x03, 0x0f, 0x56, 0x51, 0x5d, 0x8a, 0xaa, 0xa1, 0xb6, 0x16, 0xda, 0x32,
	0x2a, 0x0f, 0xac, 0xc9, 0x8a, 0xb2, 0xad, 0xde, 0x90, 0x77, 0xfc, 0x58, 0xac, 0x8f, 0x2a, 0x32,
	0x86, 0xac, 0x8c, 0x85, 0x1c, 0xa7, 0x51, 0x64, 0x7d, 0x3c, 0xe3, 0xfa, 0xcf, 0x22, 0xed, 0x0f,
	0xf6, 0x70, 0xff, 0x4e, 0xd8, 0xa5, 0xd2, 0xfc, 0xda, 0x96, 0xa2, 0x22, 0x23, 0x15, 0x35, 0x60,
	0x95, 0x1c, 0x16, 0x65, 0xfb, 0x22, 0x1d, 0x6f, 0x1d, 0x06, 0xc9, 0xda, 0x60, 0x60, 0x30, 0x6e,
	0x9e, 0xc6, 0xcf, 0xe7, 0xef, 0xc9, 0xea, 0x60, 0x03, 0x0c, 0x4f, 0xa3, 0xa9, 0xd4, 0xaf, 0x4e,
	0x6e, 0x91, 0x37, 0xe8, 0x1a, 0xda, 0x1a, 0xb4, 0xfc, 0x48, 0xc4, 0x37, 0x1e, 0x6b, 0xb4, 0xac,
	0xa1, 0x09, 0xe9, 0xa9, 0xd8, 0xcb, 0x37, 0xd9, 0x8b, 0x85, 0xb8, 0xdb, 0xdc, 0xbb, 0x3e, 0x66,
	0x58, 0xe7, 0xfb, 0xa4, 0xc1, 0x6d, 0x2c, 0xc4, 0xac, 0xbb, 0xd0, 0xbc, 0x7e, 0xf8, 0xec, 0xb2,
	0xe4, 0xab, 0xcb, 0x92, 0xef, 0x2e, 0x4b, 0x3e, 0x7e, 0xb2, 0x7f, 0xcf, 0x57, 0x8b, 0x48, 0x3b,
	0xa9, 0xdc, 0x80, 0x05, 0x85, 0xb5, 0x5c, 0x34, 0x9a, 0x83, 0xd3, 0x41, 0x8e, 0xb5, 0xe6, 0x53,
	0xaf, 0x32, 0x16, 0xe5, 0xff, 0x21, 0xdc, 0xc5, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x41, 0x8e,
	0x2b, 0x2c, 0xa0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataServiceClient interface {
	// Fetch the credentials for the root user of the deployment with given ID.
	// Required permissions:
	// - dataservice.deployment.get-root-credentials for the deployment.
	GetDeploymentRootCredentials(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v11.DeploymentCredentials, error)
}

type dataServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataServiceClient(cc *grpc.ClientConn) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) GetDeploymentRootCredentials(ctx context.Context, in *v1.IDOptions, opts ...grpc.CallOption) (*v11.DeploymentCredentials, error) {
	out := new(v11.DeploymentCredentials)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.integration.bucketservice.v1.DataService/GetDeploymentRootCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
type DataServiceServer interface {
	// Fetch the credentials for the root user of the deployment with given ID.
	// Required permissions:
	// - dataservice.deployment.get-root-credentials for the deployment.
	GetDeploymentRootCredentials(context.Context, *v1.IDOptions) (*v11.DeploymentCredentials, error)
}

// UnimplementedDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataServiceServer struct {
}

func (*UnimplementedDataServiceServer) GetDeploymentRootCredentials(ctx context.Context, req *v1.IDOptions) (*v11.DeploymentCredentials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentRootCredentials not implemented")
}

func RegisterDataServiceServer(s *grpc.Server, srv DataServiceServer) {
	s.RegisterService(&_DataService_serviceDesc, srv)
}

func _DataService_GetDeploymentRootCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IDOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetDeploymentRootCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.integration.bucketservice.v1.DataService/GetDeploymentRootCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetDeploymentRootCredentials(ctx, req.(*v1.IDOptions))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.integration.bucketservice.v1.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeploymentRootCredentials",
			Handler:    _DataService_GetDeploymentRootCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataservice.proto",
}
