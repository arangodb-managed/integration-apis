//
// DISCLAIMER
//
// Copyright 2023-2024 ArangoDB GmbH, Cologne, Germany
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Copyright holder is ArangoDB GmbH, Cologne, Germany
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.28.3
// source: bucketservice.proto

package v1

import (
	context "context"
	v11 "github.com/arangodb-managed/apis/common/v1"
	v1 "github.com/arangodb-managed/integration-apis/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request params for Bucket related calls
type BucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key-value pairs stored at the providers (as labels/tags) during CreateBucket
	Tags []*v1.KeyValuePair `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *BucketRequest) Reset() {
	*x = BucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bucketservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketRequest) ProtoMessage() {}

func (x *BucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bucketservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketRequest.ProtoReflect.Descriptor instead.
func (*BucketRequest) Descriptor() ([]byte, []int) {
	return file_bucketservice_proto_rawDescGZIP(), []int{0}
}

func (x *BucketRequest) GetTags() []*v1.KeyValuePair {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Request params for Path related requests
type PathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path (Specify as "." to indicate the root folder)
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *PathRequest) Reset() {
	*x = PathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bucketservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathRequest) ProtoMessage() {}

func (x *PathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bucketservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathRequest.ProtoReflect.Descriptor instead.
func (*PathRequest) Descriptor() ([]byte, []int) {
	return file_bucketservice_proto_rawDescGZIP(), []int{1}
}

func (x *PathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Response from GetRepositoryURL request
type RepositoryURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The URL without provider information
	BucketPath string `protobuf:"bytes,2,opt,name=bucket_path,json=bucketPath,proto3" json:"bucket_path,omitempty"`
}

func (x *RepositoryURL) Reset() {
	*x = RepositoryURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bucketservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryURL) ProtoMessage() {}

func (x *RepositoryURL) ProtoReflect() protoreflect.Message {
	mi := &file_bucketservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryURL.ProtoReflect.Descriptor instead.
func (*RepositoryURL) Descriptor() ([]byte, []int) {
	return file_bucketservice_proto_rawDescGZIP(), []int{2}
}

func (x *RepositoryURL) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RepositoryURL) GetBucketPath() string {
	if x != nil {
		return x.BucketPath
	}
	return ""
}

// Response from GetPathSize request
type PathSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The size in bytes
	SizeInBytes uint64 `protobuf:"varint,1,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`
	// Number of files
	NumberOfFiles uint32 `protobuf:"varint,2,opt,name=number_of_files,json=numberOfFiles,proto3" json:"number_of_files,omitempty"`
	// Number of folders
	NumberOfFolders uint32 `protobuf:"varint,3,opt,name=number_of_folders,json=numberOfFolders,proto3" json:"number_of_folders,omitempty"`
}

func (x *PathSize) Reset() {
	*x = PathSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bucketservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathSize) ProtoMessage() {}

func (x *PathSize) ProtoReflect() protoreflect.Message {
	mi := &file_bucketservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathSize.ProtoReflect.Descriptor instead.
func (*PathSize) Descriptor() ([]byte, []int) {
	return file_bucketservice_proto_rawDescGZIP(), []int{3}
}

func (x *PathSize) GetSizeInBytes() uint64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *PathSize) GetNumberOfFiles() uint32 {
	if x != nil {
		return x.NumberOfFiles
	}
	return 0
}

func (x *PathSize) GetNumberOfFolders() uint32 {
	if x != nil {
		return x.NumberOfFolders
	}
	return 0
}

// Response from GetObjectInfo request
type ObjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates if the object is locked
	IsLocked bool `protobuf:"varint,1,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	// Indicates the size of the object in bytes
	SizeInBytes uint64 `protobuf:"varint,2,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`
	// The timestamp this object has last been modified
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
}

func (x *ObjectInfo) Reset() {
	*x = ObjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bucketservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectInfo) ProtoMessage() {}

func (x *ObjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bucketservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectInfo.ProtoReflect.Descriptor instead.
func (*ObjectInfo) Descriptor() ([]byte, []int) {
	return file_bucketservice_proto_rawDescGZIP(), []int{4}
}

func (x *ObjectInfo) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *ObjectInfo) GetSizeInBytes() uint64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *ObjectInfo) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

// Output message for ReadObject.
type ReadObjectChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw output
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *ReadObjectChunk) Reset() {
	*x = ReadObjectChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bucketservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadObjectChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadObjectChunk) ProtoMessage() {}

func (x *ReadObjectChunk) ProtoReflect() protoreflect.Message {
	mi := &file_bucketservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadObjectChunk.ProtoReflect.Descriptor instead.
func (*ReadObjectChunk) Descriptor() ([]byte, []int) {
	return file_bucketservice_proto_rawDescGZIP(), []int{5}
}

func (x *ReadObjectChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// Input message for WriteObject
type WriteObjectChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base request params for Path related requests.
	// This field cannot change during the stream.
	Path *PathRequest `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Raw input
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	// If set, the caller wants to send a next message with more input data.
	// If not set, no more control message will be sent.
	HasMore bool `protobuf:"varint,3,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *WriteObjectChunk) Reset() {
	*x = WriteObjectChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bucketservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteObjectChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteObjectChunk) ProtoMessage() {}

func (x *WriteObjectChunk) ProtoReflect() protoreflect.Message {
	mi := &file_bucketservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteObjectChunk.ProtoReflect.Descriptor instead.
func (*WriteObjectChunk) Descriptor() ([]byte, []int) {
	return file_bucketservice_proto_rawDescGZIP(), []int{6}
}

func (x *WriteObjectChunk) GetPath() *PathRequest {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *WriteObjectChunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *WriteObjectChunk) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// Output message for WriteObject
type WriteObjectControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, the next chunk of input is allowed.
	// If unset, the caller is expected to terminate the call.
	AllowMoreOutput bool `protobuf:"varint,1,opt,name=allow_more_output,json=allowMoreOutput,proto3" json:"allow_more_output,omitempty"`
	// Maximum number of bytes the caller is allowed to send in the next input chunk.
	MaxChunkBytes int32 `protobuf:"varint,2,opt,name=max_chunk_bytes,json=maxChunkBytes,proto3" json:"max_chunk_bytes,omitempty"`
}

func (x *WriteObjectControl) Reset() {
	*x = WriteObjectControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bucketservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteObjectControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteObjectControl) ProtoMessage() {}

func (x *WriteObjectControl) ProtoReflect() protoreflect.Message {
	mi := &file_bucketservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteObjectControl.ProtoReflect.Descriptor instead.
func (*WriteObjectControl) Descriptor() ([]byte, []int) {
	return file_bucketservice_proto_rawDescGZIP(), []int{7}
}

func (x *WriteObjectControl) GetAllowMoreOutput() bool {
	if x != nil {
		return x.AllowMoreOutput
	}
	return false
}

func (x *WriteObjectControl) GetMaxChunkBytes() int32 {
	if x != nil {
		return x.MaxChunkBytes
	}
	return 0
}

var File_bucketservice_proto protoreflect.FileDescriptor

var file_bucketservice_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x0d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x21, 0x0a,
	0x0b, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x42, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x52,
	0x4c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x69,
	0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x27, 0x0a,
	0x0f, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x4c, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0x68, 0x0a, 0x12, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x32, 0xc3, 0x09, 0x0a, 0x0d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x50, 0x49,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67,
	0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x0c, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x61, 0x72,
	0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x59, 0x65, 0x73, 0x4f, 0x72, 0x4e, 0x6f, 0x12, 0x6b, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x61,
	0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x61, 0x6e,
	0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x52, 0x4c, 0x12,
	0x67, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x2e,
	0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x61,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30,
	0x01, 0x12, 0x91, 0x01, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x3d, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x1a, 0x3f, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x28, 0x01, 0x30, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f,
	0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x61, 0x6e, 0x67, 0x6f, 0x64,
	0x62, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bucketservice_proto_rawDescOnce sync.Once
	file_bucketservice_proto_rawDescData = file_bucketservice_proto_rawDesc
)

func file_bucketservice_proto_rawDescGZIP() []byte {
	file_bucketservice_proto_rawDescOnce.Do(func() {
		file_bucketservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_bucketservice_proto_rawDescData)
	})
	return file_bucketservice_proto_rawDescData
}

var file_bucketservice_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_bucketservice_proto_goTypes = []interface{}{
	(*BucketRequest)(nil),         // 0: arangodb.cloud.integration.bucketservice.v1.BucketRequest
	(*PathRequest)(nil),           // 1: arangodb.cloud.integration.bucketservice.v1.PathRequest
	(*RepositoryURL)(nil),         // 2: arangodb.cloud.integration.bucketservice.v1.RepositoryURL
	(*PathSize)(nil),              // 3: arangodb.cloud.integration.bucketservice.v1.PathSize
	(*ObjectInfo)(nil),            // 4: arangodb.cloud.integration.bucketservice.v1.ObjectInfo
	(*ReadObjectChunk)(nil),       // 5: arangodb.cloud.integration.bucketservice.v1.ReadObjectChunk
	(*WriteObjectChunk)(nil),      // 6: arangodb.cloud.integration.bucketservice.v1.WriteObjectChunk
	(*WriteObjectControl)(nil),    // 7: arangodb.cloud.integration.bucketservice.v1.WriteObjectControl
	(*v1.KeyValuePair)(nil),       // 8: arangodb.cloud.integration.common.v1.KeyValuePair
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
	(*v11.Empty)(nil),             // 10: arangodb.cloud.common.v1.Empty
	(*v11.Version)(nil),           // 11: arangodb.cloud.common.v1.Version
	(*v11.YesOrNo)(nil),           // 12: arangodb.cloud.common.v1.YesOrNo
}
var file_bucketservice_proto_depIdxs = []int32{
	8,  // 0: arangodb.cloud.integration.bucketservice.v1.BucketRequest.tags:type_name -> arangodb.cloud.integration.common.v1.KeyValuePair
	9,  // 1: arangodb.cloud.integration.bucketservice.v1.ObjectInfo.last_updated_at:type_name -> google.protobuf.Timestamp
	1,  // 2: arangodb.cloud.integration.bucketservice.v1.WriteObjectChunk.path:type_name -> arangodb.cloud.integration.bucketservice.v1.PathRequest
	10, // 3: arangodb.cloud.integration.bucketservice.v1.BucketService.GetAPIVersion:input_type -> arangodb.cloud.common.v1.Empty
	0,  // 4: arangodb.cloud.integration.bucketservice.v1.BucketService.BucketExists:input_type -> arangodb.cloud.integration.bucketservice.v1.BucketRequest
	0,  // 5: arangodb.cloud.integration.bucketservice.v1.BucketService.CreateBucket:input_type -> arangodb.cloud.integration.bucketservice.v1.BucketRequest
	0,  // 6: arangodb.cloud.integration.bucketservice.v1.BucketService.DeleteBucket:input_type -> arangodb.cloud.integration.bucketservice.v1.BucketRequest
	1,  // 7: arangodb.cloud.integration.bucketservice.v1.BucketService.GetRepositoryURL:input_type -> arangodb.cloud.integration.bucketservice.v1.PathRequest
	1,  // 8: arangodb.cloud.integration.bucketservice.v1.BucketService.DeletePath:input_type -> arangodb.cloud.integration.bucketservice.v1.PathRequest
	1,  // 9: arangodb.cloud.integration.bucketservice.v1.BucketService.GetPathSize:input_type -> arangodb.cloud.integration.bucketservice.v1.PathRequest
	1,  // 10: arangodb.cloud.integration.bucketservice.v1.BucketService.ReadObject:input_type -> arangodb.cloud.integration.bucketservice.v1.PathRequest
	6,  // 11: arangodb.cloud.integration.bucketservice.v1.BucketService.WriteObject:input_type -> arangodb.cloud.integration.bucketservice.v1.WriteObjectChunk
	1,  // 12: arangodb.cloud.integration.bucketservice.v1.BucketService.GetObjectInfo:input_type -> arangodb.cloud.integration.bucketservice.v1.PathRequest
	11, // 13: arangodb.cloud.integration.bucketservice.v1.BucketService.GetAPIVersion:output_type -> arangodb.cloud.common.v1.Version
	12, // 14: arangodb.cloud.integration.bucketservice.v1.BucketService.BucketExists:output_type -> arangodb.cloud.common.v1.YesOrNo
	10, // 15: arangodb.cloud.integration.bucketservice.v1.BucketService.CreateBucket:output_type -> arangodb.cloud.common.v1.Empty
	10, // 16: arangodb.cloud.integration.bucketservice.v1.BucketService.DeleteBucket:output_type -> arangodb.cloud.common.v1.Empty
	2,  // 17: arangodb.cloud.integration.bucketservice.v1.BucketService.GetRepositoryURL:output_type -> arangodb.cloud.integration.bucketservice.v1.RepositoryURL
	10, // 18: arangodb.cloud.integration.bucketservice.v1.BucketService.DeletePath:output_type -> arangodb.cloud.common.v1.Empty
	3,  // 19: arangodb.cloud.integration.bucketservice.v1.BucketService.GetPathSize:output_type -> arangodb.cloud.integration.bucketservice.v1.PathSize
	5,  // 20: arangodb.cloud.integration.bucketservice.v1.BucketService.ReadObject:output_type -> arangodb.cloud.integration.bucketservice.v1.ReadObjectChunk
	7,  // 21: arangodb.cloud.integration.bucketservice.v1.BucketService.WriteObject:output_type -> arangodb.cloud.integration.bucketservice.v1.WriteObjectControl
	4,  // 22: arangodb.cloud.integration.bucketservice.v1.BucketService.GetObjectInfo:output_type -> arangodb.cloud.integration.bucketservice.v1.ObjectInfo
	13, // [13:23] is the sub-list for method output_type
	3,  // [3:13] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_bucketservice_proto_init() }
func file_bucketservice_proto_init() {
	if File_bucketservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bucketservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bucketservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bucketservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bucketservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bucketservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bucketservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadObjectChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bucketservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteObjectChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bucketservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteObjectControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bucketservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bucketservice_proto_goTypes,
		DependencyIndexes: file_bucketservice_proto_depIdxs,
		MessageInfos:      file_bucketservice_proto_msgTypes,
	}.Build()
	File_bucketservice_proto = out.File
	file_bucketservice_proto_rawDesc = nil
	file_bucketservice_proto_goTypes = nil
	file_bucketservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BucketServiceClient is the client API for BucketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BucketServiceClient interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(ctx context.Context, in *v11.Empty, opts ...grpc.CallOption) (*v11.Version, error)
	// BucketExists checks if the specified bucket exists
	// Required permissions:
	// - bucketservice.bucket.exists globally
	BucketExists(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v11.YesOrNo, error)
	// CreateBucket creates a bucket
	// Required permissions:
	// - bucketservice.bucket.create globally
	CreateBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v11.Empty, error)
	// DeleteBucket deletes a bucket
	// Notice that this deletes all data contained in the bucket as well
	// Required permissions:
	// - bucketservice.bucket.delete globally
	DeleteBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v11.Empty, error)
	// GetRepositoryURL get the URL needed to store/delete objects in a bucket
	// Required permissions:
	// - bucketservice.bucketpath.get-repository-url globally
	GetRepositoryURL(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*RepositoryURL, error)
	// DeletePath deletes the specified path (recursively) from the provided bucket
	// Required permissions:
	// - bucketservice.bucketpath.delete globally
	DeletePath(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*v11.Empty, error)
	// GetPathSize provides the size in bytes for the specified path from the provided bucket
	// Required permissions:
	// - bucketservice.bucketpath.get-size globally
	GetPathSize(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*PathSize, error)
	// ReadObject opens an object in the bucket and streams the existing data from the object into the client
	// Required permissions:
	// - bucketservice.bucketobject.read globally
	ReadObject(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (BucketService_ReadObjectClient, error)
	// CreateObject creates or opens an object in the bucket and allows the client to stream (additional) data into the object
	// Required permissions:
	// - bucketservice.bucketobject.write globally
	WriteObject(ctx context.Context, opts ...grpc.CallOption) (BucketService_WriteObjectClient, error)
	// GetObjectInfo provides information for the specified object from the provided bucket
	// A Not-Found error is returned if the object cannot be found
	// Required permissions:
	// - bucketservice.bucketobject.get-info globally
	GetObjectInfo(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*ObjectInfo, error)
}

type bucketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketServiceClient(cc grpc.ClientConnInterface) BucketServiceClient {
	return &bucketServiceClient{cc}
}

func (c *bucketServiceClient) GetAPIVersion(ctx context.Context, in *v11.Empty, opts ...grpc.CallOption) (*v11.Version, error) {
	out := new(v11.Version)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.integration.bucketservice.v1.BucketService/GetAPIVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) BucketExists(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v11.YesOrNo, error) {
	out := new(v11.YesOrNo)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.integration.bucketservice.v1.BucketService/BucketExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) CreateBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v11.Empty, error) {
	out := new(v11.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.integration.bucketservice.v1.BucketService/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) DeleteBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*v11.Empty, error) {
	out := new(v11.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.integration.bucketservice.v1.BucketService/DeleteBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) GetRepositoryURL(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*RepositoryURL, error) {
	out := new(RepositoryURL)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.integration.bucketservice.v1.BucketService/GetRepositoryURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) DeletePath(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*v11.Empty, error) {
	out := new(v11.Empty)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.integration.bucketservice.v1.BucketService/DeletePath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) GetPathSize(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*PathSize, error) {
	out := new(PathSize)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.integration.bucketservice.v1.BucketService/GetPathSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) ReadObject(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (BucketService_ReadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BucketService_serviceDesc.Streams[0], "/arangodb.cloud.integration.bucketservice.v1.BucketService/ReadObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketServiceReadObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BucketService_ReadObjectClient interface {
	Recv() (*ReadObjectChunk, error)
	grpc.ClientStream
}

type bucketServiceReadObjectClient struct {
	grpc.ClientStream
}

func (x *bucketServiceReadObjectClient) Recv() (*ReadObjectChunk, error) {
	m := new(ReadObjectChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bucketServiceClient) WriteObject(ctx context.Context, opts ...grpc.CallOption) (BucketService_WriteObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BucketService_serviceDesc.Streams[1], "/arangodb.cloud.integration.bucketservice.v1.BucketService/WriteObject", opts...)
	if err != nil {
		return nil, err
	}
	x := &bucketServiceWriteObjectClient{stream}
	return x, nil
}

type BucketService_WriteObjectClient interface {
	Send(*WriteObjectChunk) error
	Recv() (*WriteObjectControl, error)
	grpc.ClientStream
}

type bucketServiceWriteObjectClient struct {
	grpc.ClientStream
}

func (x *bucketServiceWriteObjectClient) Send(m *WriteObjectChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bucketServiceWriteObjectClient) Recv() (*WriteObjectControl, error) {
	m := new(WriteObjectControl)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bucketServiceClient) GetObjectInfo(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*ObjectInfo, error) {
	out := new(ObjectInfo)
	err := c.cc.Invoke(ctx, "/arangodb.cloud.integration.bucketservice.v1.BucketService/GetObjectInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServiceServer is the server API for BucketService service.
type BucketServiceServer interface {
	// Get the current API version of this service.
	// Required permissions:
	// - None
	GetAPIVersion(context.Context, *v11.Empty) (*v11.Version, error)
	// BucketExists checks if the specified bucket exists
	// Required permissions:
	// - bucketservice.bucket.exists globally
	BucketExists(context.Context, *BucketRequest) (*v11.YesOrNo, error)
	// CreateBucket creates a bucket
	// Required permissions:
	// - bucketservice.bucket.create globally
	CreateBucket(context.Context, *BucketRequest) (*v11.Empty, error)
	// DeleteBucket deletes a bucket
	// Notice that this deletes all data contained in the bucket as well
	// Required permissions:
	// - bucketservice.bucket.delete globally
	DeleteBucket(context.Context, *BucketRequest) (*v11.Empty, error)
	// GetRepositoryURL get the URL needed to store/delete objects in a bucket
	// Required permissions:
	// - bucketservice.bucketpath.get-repository-url globally
	GetRepositoryURL(context.Context, *PathRequest) (*RepositoryURL, error)
	// DeletePath deletes the specified path (recursively) from the provided bucket
	// Required permissions:
	// - bucketservice.bucketpath.delete globally
	DeletePath(context.Context, *PathRequest) (*v11.Empty, error)
	// GetPathSize provides the size in bytes for the specified path from the provided bucket
	// Required permissions:
	// - bucketservice.bucketpath.get-size globally
	GetPathSize(context.Context, *PathRequest) (*PathSize, error)
	// ReadObject opens an object in the bucket and streams the existing data from the object into the client
	// Required permissions:
	// - bucketservice.bucketobject.read globally
	ReadObject(*PathRequest, BucketService_ReadObjectServer) error
	// CreateObject creates or opens an object in the bucket and allows the client to stream (additional) data into the object
	// Required permissions:
	// - bucketservice.bucketobject.write globally
	WriteObject(BucketService_WriteObjectServer) error
	// GetObjectInfo provides information for the specified object from the provided bucket
	// A Not-Found error is returned if the object cannot be found
	// Required permissions:
	// - bucketservice.bucketobject.get-info globally
	GetObjectInfo(context.Context, *PathRequest) (*ObjectInfo, error)
}

// UnimplementedBucketServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBucketServiceServer struct {
}

func (*UnimplementedBucketServiceServer) GetAPIVersion(context.Context, *v11.Empty) (*v11.Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIVersion not implemented")
}
func (*UnimplementedBucketServiceServer) BucketExists(context.Context, *BucketRequest) (*v11.YesOrNo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketExists not implemented")
}
func (*UnimplementedBucketServiceServer) CreateBucket(context.Context, *BucketRequest) (*v11.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (*UnimplementedBucketServiceServer) DeleteBucket(context.Context, *BucketRequest) (*v11.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (*UnimplementedBucketServiceServer) GetRepositoryURL(context.Context, *PathRequest) (*RepositoryURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryURL not implemented")
}
func (*UnimplementedBucketServiceServer) DeletePath(context.Context, *PathRequest) (*v11.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePath not implemented")
}
func (*UnimplementedBucketServiceServer) GetPathSize(context.Context, *PathRequest) (*PathSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPathSize not implemented")
}
func (*UnimplementedBucketServiceServer) ReadObject(*PathRequest, BucketService_ReadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadObject not implemented")
}
func (*UnimplementedBucketServiceServer) WriteObject(BucketService_WriteObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteObject not implemented")
}
func (*UnimplementedBucketServiceServer) GetObjectInfo(context.Context, *PathRequest) (*ObjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectInfo not implemented")
}

func RegisterBucketServiceServer(s *grpc.Server, srv BucketServiceServer) {
	s.RegisterService(&_BucketService_serviceDesc, srv)
}

func _BucketService_GetAPIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).GetAPIVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.integration.bucketservice.v1.BucketService/GetAPIVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).GetAPIVersion(ctx, req.(*v11.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_BucketExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).BucketExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.integration.bucketservice.v1.BucketService/BucketExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).BucketExists(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.integration.bucketservice.v1.BucketService/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).CreateBucket(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.integration.bucketservice.v1.BucketService/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).DeleteBucket(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_GetRepositoryURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).GetRepositoryURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.integration.bucketservice.v1.BucketService/GetRepositoryURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).GetRepositoryURL(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_DeletePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).DeletePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.integration.bucketservice.v1.BucketService/DeletePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).DeletePath(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_GetPathSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).GetPathSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.integration.bucketservice.v1.BucketService/GetPathSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).GetPathSize(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_ReadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PathRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BucketServiceServer).ReadObject(m, &bucketServiceReadObjectServer{stream})
}

type BucketService_ReadObjectServer interface {
	Send(*ReadObjectChunk) error
	grpc.ServerStream
}

type bucketServiceReadObjectServer struct {
	grpc.ServerStream
}

func (x *bucketServiceReadObjectServer) Send(m *ReadObjectChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _BucketService_WriteObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BucketServiceServer).WriteObject(&bucketServiceWriteObjectServer{stream})
}

type BucketService_WriteObjectServer interface {
	Send(*WriteObjectControl) error
	Recv() (*WriteObjectChunk, error)
	grpc.ServerStream
}

type bucketServiceWriteObjectServer struct {
	grpc.ServerStream
}

func (x *bucketServiceWriteObjectServer) Send(m *WriteObjectControl) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bucketServiceWriteObjectServer) Recv() (*WriteObjectChunk, error) {
	m := new(WriteObjectChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BucketService_GetObjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).GetObjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arangodb.cloud.integration.bucketservice.v1.BucketService/GetObjectInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).GetObjectInfo(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BucketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arangodb.cloud.integration.bucketservice.v1.BucketService",
	HandlerType: (*BucketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIVersion",
			Handler:    _BucketService_GetAPIVersion_Handler,
		},
		{
			MethodName: "BucketExists",
			Handler:    _BucketService_BucketExists_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _BucketService_CreateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _BucketService_DeleteBucket_Handler,
		},
		{
			MethodName: "GetRepositoryURL",
			Handler:    _BucketService_GetRepositoryURL_Handler,
		},
		{
			MethodName: "DeletePath",
			Handler:    _BucketService_DeletePath_Handler,
		},
		{
			MethodName: "GetPathSize",
			Handler:    _BucketService_GetPathSize_Handler,
		},
		{
			MethodName: "GetObjectInfo",
			Handler:    _BucketService_GetObjectInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadObject",
			Handler:       _BucketService_ReadObject_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteObject",
			Handler:       _BucketService_WriteObject_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bucketservice.proto",
}
